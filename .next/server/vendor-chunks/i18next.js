"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/i18next";
exports.ids = ["vendor-chunks/i18next"];
exports.modules = {

/***/ "(ssr)/./node_modules/i18next/dist/esm/i18next.js":
/*!**************************************************!*\
  !*** ./node_modules/i18next/dist/esm/i18next.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   changeLanguage: () => (/* binding */ changeLanguage),\n/* harmony export */   createInstance: () => (/* binding */ createInstance),\n/* harmony export */   \"default\": () => (/* binding */ instance),\n/* harmony export */   dir: () => (/* binding */ dir),\n/* harmony export */   exists: () => (/* binding */ exists),\n/* harmony export */   getFixedT: () => (/* binding */ getFixedT),\n/* harmony export */   hasLoadedNamespace: () => (/* binding */ hasLoadedNamespace),\n/* harmony export */   init: () => (/* binding */ init),\n/* harmony export */   loadLanguages: () => (/* binding */ loadLanguages),\n/* harmony export */   loadNamespaces: () => (/* binding */ loadNamespaces),\n/* harmony export */   loadResources: () => (/* binding */ loadResources),\n/* harmony export */   reloadResources: () => (/* binding */ reloadResources),\n/* harmony export */   setDefaultNamespace: () => (/* binding */ setDefaultNamespace),\n/* harmony export */   t: () => (/* binding */ t),\n/* harmony export */   use: () => (/* binding */ use)\n/* harmony export */ });\nconst consoleLogger = {\n    type: \"logger\",\n    log (args) {\n        this.output(\"log\", args);\n    },\n    warn (args) {\n        this.output(\"warn\", args);\n    },\n    error (args) {\n        this.output(\"error\", args);\n    },\n    output (type, args) {\n        if (console && console[type]) console[type].apply(console, args);\n    }\n};\nclass Logger {\n    constructor(concreteLogger){\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        this.init(concreteLogger, options);\n    }\n    init(concreteLogger) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        this.prefix = options.prefix || \"i18next:\";\n        this.logger = concreteLogger || consoleLogger;\n        this.options = options;\n        this.debug = options.debug;\n    }\n    log() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        return this.forward(args, \"log\", \"\", true);\n    }\n    warn() {\n        for(var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++){\n            args[_key2] = arguments[_key2];\n        }\n        return this.forward(args, \"warn\", \"\", true);\n    }\n    error() {\n        for(var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++){\n            args[_key3] = arguments[_key3];\n        }\n        return this.forward(args, \"error\", \"\");\n    }\n    deprecate() {\n        for(var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++){\n            args[_key4] = arguments[_key4];\n        }\n        return this.forward(args, \"warn\", \"WARNING DEPRECATED: \", true);\n    }\n    forward(args, lvl, prefix, debugOnly) {\n        if (debugOnly && !this.debug) return null;\n        if (typeof args[0] === \"string\") args[0] = `${prefix}${this.prefix} ${args[0]}`;\n        return this.logger[lvl](args);\n    }\n    create(moduleName) {\n        return new Logger(this.logger, {\n            ...{\n                prefix: `${this.prefix}:${moduleName}:`\n            },\n            ...this.options\n        });\n    }\n    clone(options) {\n        options = options || this.options;\n        options.prefix = options.prefix || this.prefix;\n        return new Logger(this.logger, options);\n    }\n}\nvar baseLogger = new Logger();\nclass EventEmitter {\n    constructor(){\n        this.observers = {};\n    }\n    on(events, listener) {\n        events.split(\" \").forEach((event)=>{\n            this.observers[event] = this.observers[event] || [];\n            this.observers[event].push(listener);\n        });\n        return this;\n    }\n    off(event, listener) {\n        if (!this.observers[event]) return;\n        if (!listener) {\n            delete this.observers[event];\n            return;\n        }\n        this.observers[event] = this.observers[event].filter((l)=>l !== listener);\n    }\n    emit(event) {\n        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n            args[_key - 1] = arguments[_key];\n        }\n        if (this.observers[event]) {\n            const cloned = [].concat(this.observers[event]);\n            cloned.forEach((observer)=>{\n                observer(...args);\n            });\n        }\n        if (this.observers[\"*\"]) {\n            const cloned = [].concat(this.observers[\"*\"]);\n            cloned.forEach((observer)=>{\n                observer.apply(observer, [\n                    event,\n                    ...args\n                ]);\n            });\n        }\n    }\n}\nfunction defer() {\n    let res;\n    let rej;\n    const promise = new Promise((resolve, reject)=>{\n        res = resolve;\n        rej = reject;\n    });\n    promise.resolve = res;\n    promise.reject = rej;\n    return promise;\n}\nfunction makeString(object) {\n    if (object == null) return \"\";\n    return \"\" + object;\n}\nfunction copy(a, s, t) {\n    a.forEach((m)=>{\n        if (s[m]) t[m] = s[m];\n    });\n}\nfunction getLastOfPath(object, path, Empty) {\n    function cleanKey(key) {\n        return key && key.indexOf(\"###\") > -1 ? key.replace(/###/g, \".\") : key;\n    }\n    function canNotTraverseDeeper() {\n        return !object || typeof object === \"string\";\n    }\n    const stack = typeof path !== \"string\" ? [].concat(path) : path.split(\".\");\n    while(stack.length > 1){\n        if (canNotTraverseDeeper()) return {};\n        const key = cleanKey(stack.shift());\n        if (!object[key] && Empty) object[key] = new Empty();\n        if (Object.prototype.hasOwnProperty.call(object, key)) {\n            object = object[key];\n        } else {\n            object = {};\n        }\n    }\n    if (canNotTraverseDeeper()) return {};\n    return {\n        obj: object,\n        k: cleanKey(stack.shift())\n    };\n}\nfunction setPath(object, path, newValue) {\n    const { obj, k } = getLastOfPath(object, path, Object);\n    obj[k] = newValue;\n}\nfunction pushPath(object, path, newValue, concat) {\n    const { obj, k } = getLastOfPath(object, path, Object);\n    obj[k] = obj[k] || [];\n    if (concat) obj[k] = obj[k].concat(newValue);\n    if (!concat) obj[k].push(newValue);\n}\nfunction getPath(object, path) {\n    const { obj, k } = getLastOfPath(object, path);\n    if (!obj) return undefined;\n    return obj[k];\n}\nfunction getPathWithDefaults(data, defaultData, key) {\n    const value = getPath(data, key);\n    if (value !== undefined) {\n        return value;\n    }\n    return getPath(defaultData, key);\n}\nfunction deepExtend(target, source, overwrite) {\n    for(const prop in source){\n        if (prop !== \"__proto__\" && prop !== \"constructor\") {\n            if (prop in target) {\n                if (typeof target[prop] === \"string\" || target[prop] instanceof String || typeof source[prop] === \"string\" || source[prop] instanceof String) {\n                    if (overwrite) target[prop] = source[prop];\n                } else {\n                    deepExtend(target[prop], source[prop], overwrite);\n                }\n            } else {\n                target[prop] = source[prop];\n            }\n        }\n    }\n    return target;\n}\nfunction regexEscape(str) {\n    return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n}\nvar _entityMap = {\n    \"&\": \"&amp;\",\n    \"<\": \"&lt;\",\n    \">\": \"&gt;\",\n    '\"': \"&quot;\",\n    \"'\": \"&#39;\",\n    \"/\": \"&#x2F;\"\n};\nfunction escape(data) {\n    if (typeof data === \"string\") {\n        return data.replace(/[&<>\"'\\/]/g, (s)=>_entityMap[s]);\n    }\n    return data;\n}\nconst chars = [\n    \" \",\n    \",\",\n    \"?\",\n    \"!\",\n    \";\"\n];\nfunction looksLikeObjectPath(key, nsSeparator, keySeparator) {\n    nsSeparator = nsSeparator || \"\";\n    keySeparator = keySeparator || \"\";\n    const possibleChars = chars.filter((c)=>nsSeparator.indexOf(c) < 0 && keySeparator.indexOf(c) < 0);\n    if (possibleChars.length === 0) return true;\n    const r = new RegExp(`(${possibleChars.map((c)=>c === \"?\" ? \"\\\\?\" : c).join(\"|\")})`);\n    let matched = !r.test(key);\n    if (!matched) {\n        const ki = key.indexOf(keySeparator);\n        if (ki > 0 && !r.test(key.substring(0, ki))) {\n            matched = true;\n        }\n    }\n    return matched;\n}\nfunction deepFind(obj, path) {\n    let keySeparator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \".\";\n    if (!obj) return undefined;\n    if (obj[path]) return obj[path];\n    const paths = path.split(keySeparator);\n    let current = obj;\n    for(let i = 0; i < paths.length; ++i){\n        if (!current) return undefined;\n        if (typeof current[paths[i]] === \"string\" && i + 1 < paths.length) {\n            return undefined;\n        }\n        if (current[paths[i]] === undefined) {\n            let j = 2;\n            let p = paths.slice(i, i + j).join(keySeparator);\n            let mix = current[p];\n            while(mix === undefined && paths.length > i + j){\n                j++;\n                p = paths.slice(i, i + j).join(keySeparator);\n                mix = current[p];\n            }\n            if (mix === undefined) return undefined;\n            if (mix === null) return null;\n            if (path.endsWith(p)) {\n                if (typeof mix === \"string\") return mix;\n                if (p && typeof mix[p] === \"string\") return mix[p];\n            }\n            const joinedPath = paths.slice(i + j).join(keySeparator);\n            if (joinedPath) return deepFind(mix, joinedPath, keySeparator);\n            return undefined;\n        }\n        current = current[paths[i]];\n    }\n    return current;\n}\nfunction getCleanedCode(code) {\n    if (code && code.indexOf(\"_\") > 0) return code.replace(\"_\", \"-\");\n    return code;\n}\nclass ResourceStore extends EventEmitter {\n    constructor(data){\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n            ns: [\n                \"translation\"\n            ],\n            defaultNS: \"translation\"\n        };\n        super();\n        this.data = data || {};\n        this.options = options;\n        if (this.options.keySeparator === undefined) {\n            this.options.keySeparator = \".\";\n        }\n        if (this.options.ignoreJSONStructure === undefined) {\n            this.options.ignoreJSONStructure = true;\n        }\n    }\n    addNamespaces(ns) {\n        if (this.options.ns.indexOf(ns) < 0) {\n            this.options.ns.push(ns);\n        }\n    }\n    removeNamespaces(ns) {\n        const index = this.options.ns.indexOf(ns);\n        if (index > -1) {\n            this.options.ns.splice(index, 1);\n        }\n    }\n    getResource(lng, ns, key) {\n        let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n        const keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;\n        const ignoreJSONStructure = options.ignoreJSONStructure !== undefined ? options.ignoreJSONStructure : this.options.ignoreJSONStructure;\n        let path = [\n            lng,\n            ns\n        ];\n        if (key && typeof key !== \"string\") path = path.concat(key);\n        if (key && typeof key === \"string\") path = path.concat(keySeparator ? key.split(keySeparator) : key);\n        if (lng.indexOf(\".\") > -1) {\n            path = lng.split(\".\");\n        }\n        const result = getPath(this.data, path);\n        if (result || !ignoreJSONStructure || typeof key !== \"string\") return result;\n        return deepFind(this.data && this.data[lng] && this.data[lng][ns], key, keySeparator);\n    }\n    addResource(lng, ns, key, value) {\n        let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {\n            silent: false\n        };\n        const keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;\n        let path = [\n            lng,\n            ns\n        ];\n        if (key) path = path.concat(keySeparator ? key.split(keySeparator) : key);\n        if (lng.indexOf(\".\") > -1) {\n            path = lng.split(\".\");\n            value = ns;\n            ns = path[1];\n        }\n        this.addNamespaces(ns);\n        setPath(this.data, path, value);\n        if (!options.silent) this.emit(\"added\", lng, ns, key, value);\n    }\n    addResources(lng, ns, resources) {\n        let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {\n            silent: false\n        };\n        for(const m in resources){\n            if (typeof resources[m] === \"string\" || Object.prototype.toString.apply(resources[m]) === \"[object Array]\") this.addResource(lng, ns, m, resources[m], {\n                silent: true\n            });\n        }\n        if (!options.silent) this.emit(\"added\", lng, ns, resources);\n    }\n    addResourceBundle(lng, ns, resources, deep, overwrite) {\n        let options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {\n            silent: false\n        };\n        let path = [\n            lng,\n            ns\n        ];\n        if (lng.indexOf(\".\") > -1) {\n            path = lng.split(\".\");\n            deep = resources;\n            resources = ns;\n            ns = path[1];\n        }\n        this.addNamespaces(ns);\n        let pack = getPath(this.data, path) || {};\n        if (deep) {\n            deepExtend(pack, resources, overwrite);\n        } else {\n            pack = {\n                ...pack,\n                ...resources\n            };\n        }\n        setPath(this.data, path, pack);\n        if (!options.silent) this.emit(\"added\", lng, ns, resources);\n    }\n    removeResourceBundle(lng, ns) {\n        if (this.hasResourceBundle(lng, ns)) {\n            delete this.data[lng][ns];\n        }\n        this.removeNamespaces(ns);\n        this.emit(\"removed\", lng, ns);\n    }\n    hasResourceBundle(lng, ns) {\n        return this.getResource(lng, ns) !== undefined;\n    }\n    getResourceBundle(lng, ns) {\n        if (!ns) ns = this.options.defaultNS;\n        if (this.options.compatibilityAPI === \"v1\") return {\n            ...{},\n            ...this.getResource(lng, ns)\n        };\n        return this.getResource(lng, ns);\n    }\n    getDataByLanguage(lng) {\n        return this.data[lng];\n    }\n    hasLanguageSomeTranslations(lng) {\n        const data = this.getDataByLanguage(lng);\n        const n = data && Object.keys(data) || [];\n        return !!n.find((v)=>data[v] && Object.keys(data[v]).length > 0);\n    }\n    toJSON() {\n        return this.data;\n    }\n}\nvar postProcessor = {\n    processors: {},\n    addPostProcessor (module) {\n        this.processors[module.name] = module;\n    },\n    handle (processors, value, key, options, translator) {\n        processors.forEach((processor)=>{\n            if (this.processors[processor]) value = this.processors[processor].process(value, key, options, translator);\n        });\n        return value;\n    }\n};\nconst checkedLoadedFor = {};\nclass Translator extends EventEmitter {\n    constructor(services){\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        super();\n        copy([\n            \"resourceStore\",\n            \"languageUtils\",\n            \"pluralResolver\",\n            \"interpolator\",\n            \"backendConnector\",\n            \"i18nFormat\",\n            \"utils\"\n        ], services, this);\n        this.options = options;\n        if (this.options.keySeparator === undefined) {\n            this.options.keySeparator = \".\";\n        }\n        this.logger = baseLogger.create(\"translator\");\n    }\n    changeLanguage(lng) {\n        if (lng) this.language = lng;\n    }\n    exists(key) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n            interpolation: {}\n        };\n        if (key === undefined || key === null) {\n            return false;\n        }\n        const resolved = this.resolve(key, options);\n        return resolved && resolved.res !== undefined;\n    }\n    extractFromKey(key, options) {\n        let nsSeparator = options.nsSeparator !== undefined ? options.nsSeparator : this.options.nsSeparator;\n        if (nsSeparator === undefined) nsSeparator = \":\";\n        const keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;\n        let namespaces = options.ns || this.options.defaultNS || [];\n        const wouldCheckForNsInKey = nsSeparator && key.indexOf(nsSeparator) > -1;\n        const seemsNaturalLanguage = !this.options.userDefinedKeySeparator && !options.keySeparator && !this.options.userDefinedNsSeparator && !options.nsSeparator && !looksLikeObjectPath(key, nsSeparator, keySeparator);\n        if (wouldCheckForNsInKey && !seemsNaturalLanguage) {\n            const m = key.match(this.interpolator.nestingRegexp);\n            if (m && m.length > 0) {\n                return {\n                    key,\n                    namespaces\n                };\n            }\n            const parts = key.split(nsSeparator);\n            if (nsSeparator !== keySeparator || nsSeparator === keySeparator && this.options.ns.indexOf(parts[0]) > -1) namespaces = parts.shift();\n            key = parts.join(keySeparator);\n        }\n        if (typeof namespaces === \"string\") namespaces = [\n            namespaces\n        ];\n        return {\n            key,\n            namespaces\n        };\n    }\n    translate(keys, options, lastKey) {\n        if (typeof options !== \"object\" && this.options.overloadTranslationOptionHandler) {\n            options = this.options.overloadTranslationOptionHandler(arguments);\n        }\n        if (typeof options === \"object\") options = {\n            ...options\n        };\n        if (!options) options = {};\n        if (keys === undefined || keys === null) return \"\";\n        if (!Array.isArray(keys)) keys = [\n            String(keys)\n        ];\n        const returnDetails = options.returnDetails !== undefined ? options.returnDetails : this.options.returnDetails;\n        const keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;\n        const { key, namespaces } = this.extractFromKey(keys[keys.length - 1], options);\n        const namespace = namespaces[namespaces.length - 1];\n        const lng = options.lng || this.language;\n        const appendNamespaceToCIMode = options.appendNamespaceToCIMode || this.options.appendNamespaceToCIMode;\n        if (lng && lng.toLowerCase() === \"cimode\") {\n            if (appendNamespaceToCIMode) {\n                const nsSeparator = options.nsSeparator || this.options.nsSeparator;\n                if (returnDetails) {\n                    return {\n                        res: `${namespace}${nsSeparator}${key}`,\n                        usedKey: key,\n                        exactUsedKey: key,\n                        usedLng: lng,\n                        usedNS: namespace,\n                        usedParams: this.getUsedParamsDetails(options)\n                    };\n                }\n                return `${namespace}${nsSeparator}${key}`;\n            }\n            if (returnDetails) {\n                return {\n                    res: key,\n                    usedKey: key,\n                    exactUsedKey: key,\n                    usedLng: lng,\n                    usedNS: namespace,\n                    usedParams: this.getUsedParamsDetails(options)\n                };\n            }\n            return key;\n        }\n        const resolved = this.resolve(keys, options);\n        let res = resolved && resolved.res;\n        const resUsedKey = resolved && resolved.usedKey || key;\n        const resExactUsedKey = resolved && resolved.exactUsedKey || key;\n        const resType = Object.prototype.toString.apply(res);\n        const noObject = [\n            \"[object Number]\",\n            \"[object Function]\",\n            \"[object RegExp]\"\n        ];\n        const joinArrays = options.joinArrays !== undefined ? options.joinArrays : this.options.joinArrays;\n        const handleAsObjectInI18nFormat = !this.i18nFormat || this.i18nFormat.handleAsObject;\n        const handleAsObject = typeof res !== \"string\" && typeof res !== \"boolean\" && typeof res !== \"number\";\n        if (handleAsObjectInI18nFormat && res && handleAsObject && noObject.indexOf(resType) < 0 && !(typeof joinArrays === \"string\" && resType === \"[object Array]\")) {\n            if (!options.returnObjects && !this.options.returnObjects) {\n                if (!this.options.returnedObjectHandler) {\n                    this.logger.warn(\"accessing an object - but returnObjects options is not enabled!\");\n                }\n                const r = this.options.returnedObjectHandler ? this.options.returnedObjectHandler(resUsedKey, res, {\n                    ...options,\n                    ns: namespaces\n                }) : `key '${key} (${this.language})' returned an object instead of string.`;\n                if (returnDetails) {\n                    resolved.res = r;\n                    resolved.usedParams = this.getUsedParamsDetails(options);\n                    return resolved;\n                }\n                return r;\n            }\n            if (keySeparator) {\n                const resTypeIsArray = resType === \"[object Array]\";\n                const copy = resTypeIsArray ? [] : {};\n                const newKeyToUse = resTypeIsArray ? resExactUsedKey : resUsedKey;\n                for(const m in res){\n                    if (Object.prototype.hasOwnProperty.call(res, m)) {\n                        const deepKey = `${newKeyToUse}${keySeparator}${m}`;\n                        copy[m] = this.translate(deepKey, {\n                            ...options,\n                            ...{\n                                joinArrays: false,\n                                ns: namespaces\n                            }\n                        });\n                        if (copy[m] === deepKey) copy[m] = res[m];\n                    }\n                }\n                res = copy;\n            }\n        } else if (handleAsObjectInI18nFormat && typeof joinArrays === \"string\" && resType === \"[object Array]\") {\n            res = res.join(joinArrays);\n            if (res) res = this.extendTranslation(res, keys, options, lastKey);\n        } else {\n            let usedDefault = false;\n            let usedKey = false;\n            const needsPluralHandling = options.count !== undefined && typeof options.count !== \"string\";\n            const hasDefaultValue = Translator.hasDefaultValue(options);\n            const defaultValueSuffix = needsPluralHandling ? this.pluralResolver.getSuffix(lng, options.count, options) : \"\";\n            const defaultValueSuffixOrdinalFallback = options.ordinal && needsPluralHandling ? this.pluralResolver.getSuffix(lng, options.count, {\n                ordinal: false\n            }) : \"\";\n            const defaultValue = options[`defaultValue${defaultValueSuffix}`] || options[`defaultValue${defaultValueSuffixOrdinalFallback}`] || options.defaultValue;\n            if (!this.isValidLookup(res) && hasDefaultValue) {\n                usedDefault = true;\n                res = defaultValue;\n            }\n            if (!this.isValidLookup(res)) {\n                usedKey = true;\n                res = key;\n            }\n            const missingKeyNoValueFallbackToKey = options.missingKeyNoValueFallbackToKey || this.options.missingKeyNoValueFallbackToKey;\n            const resForMissing = missingKeyNoValueFallbackToKey && usedKey ? undefined : res;\n            const updateMissing = hasDefaultValue && defaultValue !== res && this.options.updateMissing;\n            if (usedKey || usedDefault || updateMissing) {\n                this.logger.log(updateMissing ? \"updateKey\" : \"missingKey\", lng, namespace, key, updateMissing ? defaultValue : res);\n                if (keySeparator) {\n                    const fk = this.resolve(key, {\n                        ...options,\n                        keySeparator: false\n                    });\n                    if (fk && fk.res) this.logger.warn(\"Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.\");\n                }\n                let lngs = [];\n                const fallbackLngs = this.languageUtils.getFallbackCodes(this.options.fallbackLng, options.lng || this.language);\n                if (this.options.saveMissingTo === \"fallback\" && fallbackLngs && fallbackLngs[0]) {\n                    for(let i = 0; i < fallbackLngs.length; i++){\n                        lngs.push(fallbackLngs[i]);\n                    }\n                } else if (this.options.saveMissingTo === \"all\") {\n                    lngs = this.languageUtils.toResolveHierarchy(options.lng || this.language);\n                } else {\n                    lngs.push(options.lng || this.language);\n                }\n                const send = (l, k, specificDefaultValue)=>{\n                    const defaultForMissing = hasDefaultValue && specificDefaultValue !== res ? specificDefaultValue : resForMissing;\n                    if (this.options.missingKeyHandler) {\n                        this.options.missingKeyHandler(l, namespace, k, defaultForMissing, updateMissing, options);\n                    } else if (this.backendConnector && this.backendConnector.saveMissing) {\n                        this.backendConnector.saveMissing(l, namespace, k, defaultForMissing, updateMissing, options);\n                    }\n                    this.emit(\"missingKey\", l, namespace, k, res);\n                };\n                if (this.options.saveMissing) {\n                    if (this.options.saveMissingPlurals && needsPluralHandling) {\n                        lngs.forEach((language)=>{\n                            this.pluralResolver.getSuffixes(language, options).forEach((suffix)=>{\n                                send([\n                                    language\n                                ], key + suffix, options[`defaultValue${suffix}`] || defaultValue);\n                            });\n                        });\n                    } else {\n                        send(lngs, key, defaultValue);\n                    }\n                }\n            }\n            res = this.extendTranslation(res, keys, options, resolved, lastKey);\n            if (usedKey && res === key && this.options.appendNamespaceToMissingKey) res = `${namespace}:${key}`;\n            if ((usedKey || usedDefault) && this.options.parseMissingKeyHandler) {\n                if (this.options.compatibilityAPI !== \"v1\") {\n                    res = this.options.parseMissingKeyHandler(this.options.appendNamespaceToMissingKey ? `${namespace}:${key}` : key, usedDefault ? res : undefined);\n                } else {\n                    res = this.options.parseMissingKeyHandler(res);\n                }\n            }\n        }\n        if (returnDetails) {\n            resolved.res = res;\n            resolved.usedParams = this.getUsedParamsDetails(options);\n            return resolved;\n        }\n        return res;\n    }\n    extendTranslation(res, key, options, resolved, lastKey) {\n        var _this = this;\n        if (this.i18nFormat && this.i18nFormat.parse) {\n            res = this.i18nFormat.parse(res, {\n                ...this.options.interpolation.defaultVariables,\n                ...options\n            }, options.lng || this.language || resolved.usedLng, resolved.usedNS, resolved.usedKey, {\n                resolved\n            });\n        } else if (!options.skipInterpolation) {\n            if (options.interpolation) this.interpolator.init({\n                ...options,\n                ...{\n                    interpolation: {\n                        ...this.options.interpolation,\n                        ...options.interpolation\n                    }\n                }\n            });\n            const skipOnVariables = typeof res === \"string\" && (options && options.interpolation && options.interpolation.skipOnVariables !== undefined ? options.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables);\n            let nestBef;\n            if (skipOnVariables) {\n                const nb = res.match(this.interpolator.nestingRegexp);\n                nestBef = nb && nb.length;\n            }\n            let data = options.replace && typeof options.replace !== \"string\" ? options.replace : options;\n            if (this.options.interpolation.defaultVariables) data = {\n                ...this.options.interpolation.defaultVariables,\n                ...data\n            };\n            res = this.interpolator.interpolate(res, data, options.lng || this.language, options);\n            if (skipOnVariables) {\n                const na = res.match(this.interpolator.nestingRegexp);\n                const nestAft = na && na.length;\n                if (nestBef < nestAft) options.nest = false;\n            }\n            if (!options.lng && this.options.compatibilityAPI !== \"v1\" && resolved && resolved.res) options.lng = resolved.usedLng;\n            if (options.nest !== false) res = this.interpolator.nest(res, function() {\n                for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                    args[_key] = arguments[_key];\n                }\n                if (lastKey && lastKey[0] === args[0] && !options.context) {\n                    _this.logger.warn(`It seems you are nesting recursively key: ${args[0]} in key: ${key[0]}`);\n                    return null;\n                }\n                return _this.translate(...args, key);\n            }, options);\n            if (options.interpolation) this.interpolator.reset();\n        }\n        const postProcess = options.postProcess || this.options.postProcess;\n        const postProcessorNames = typeof postProcess === \"string\" ? [\n            postProcess\n        ] : postProcess;\n        if (res !== undefined && res !== null && postProcessorNames && postProcessorNames.length && options.applyPostProcessor !== false) {\n            res = postProcessor.handle(postProcessorNames, res, key, this.options && this.options.postProcessPassResolved ? {\n                i18nResolved: {\n                    ...resolved,\n                    usedParams: this.getUsedParamsDetails(options)\n                },\n                ...options\n            } : options, this);\n        }\n        return res;\n    }\n    resolve(keys) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        let found;\n        let usedKey;\n        let exactUsedKey;\n        let usedLng;\n        let usedNS;\n        if (typeof keys === \"string\") keys = [\n            keys\n        ];\n        keys.forEach((k)=>{\n            if (this.isValidLookup(found)) return;\n            const extracted = this.extractFromKey(k, options);\n            const key = extracted.key;\n            usedKey = key;\n            let namespaces = extracted.namespaces;\n            if (this.options.fallbackNS) namespaces = namespaces.concat(this.options.fallbackNS);\n            const needsPluralHandling = options.count !== undefined && typeof options.count !== \"string\";\n            const needsZeroSuffixLookup = needsPluralHandling && !options.ordinal && options.count === 0 && this.pluralResolver.shouldUseIntlApi();\n            const needsContextHandling = options.context !== undefined && (typeof options.context === \"string\" || typeof options.context === \"number\") && options.context !== \"\";\n            const codes = options.lngs ? options.lngs : this.languageUtils.toResolveHierarchy(options.lng || this.language, options.fallbackLng);\n            namespaces.forEach((ns)=>{\n                if (this.isValidLookup(found)) return;\n                usedNS = ns;\n                if (!checkedLoadedFor[`${codes[0]}-${ns}`] && this.utils && this.utils.hasLoadedNamespace && !this.utils.hasLoadedNamespace(usedNS)) {\n                    checkedLoadedFor[`${codes[0]}-${ns}`] = true;\n                    this.logger.warn(`key \"${usedKey}\" for languages \"${codes.join(\", \")}\" won't get resolved as namespace \"${usedNS}\" was not yet loaded`, \"This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!\");\n                }\n                codes.forEach((code)=>{\n                    if (this.isValidLookup(found)) return;\n                    usedLng = code;\n                    const finalKeys = [\n                        key\n                    ];\n                    if (this.i18nFormat && this.i18nFormat.addLookupKeys) {\n                        this.i18nFormat.addLookupKeys(finalKeys, key, code, ns, options);\n                    } else {\n                        let pluralSuffix;\n                        if (needsPluralHandling) pluralSuffix = this.pluralResolver.getSuffix(code, options.count, options);\n                        const zeroSuffix = `${this.options.pluralSeparator}zero`;\n                        const ordinalPrefix = `${this.options.pluralSeparator}ordinal${this.options.pluralSeparator}`;\n                        if (needsPluralHandling) {\n                            finalKeys.push(key + pluralSuffix);\n                            if (options.ordinal && pluralSuffix.indexOf(ordinalPrefix) === 0) {\n                                finalKeys.push(key + pluralSuffix.replace(ordinalPrefix, this.options.pluralSeparator));\n                            }\n                            if (needsZeroSuffixLookup) {\n                                finalKeys.push(key + zeroSuffix);\n                            }\n                        }\n                        if (needsContextHandling) {\n                            const contextKey = `${key}${this.options.contextSeparator}${options.context}`;\n                            finalKeys.push(contextKey);\n                            if (needsPluralHandling) {\n                                finalKeys.push(contextKey + pluralSuffix);\n                                if (options.ordinal && pluralSuffix.indexOf(ordinalPrefix) === 0) {\n                                    finalKeys.push(contextKey + pluralSuffix.replace(ordinalPrefix, this.options.pluralSeparator));\n                                }\n                                if (needsZeroSuffixLookup) {\n                                    finalKeys.push(contextKey + zeroSuffix);\n                                }\n                            }\n                        }\n                    }\n                    let possibleKey;\n                    while(possibleKey = finalKeys.pop()){\n                        if (!this.isValidLookup(found)) {\n                            exactUsedKey = possibleKey;\n                            found = this.getResource(code, ns, possibleKey, options);\n                        }\n                    }\n                });\n            });\n        });\n        return {\n            res: found,\n            usedKey,\n            exactUsedKey,\n            usedLng,\n            usedNS\n        };\n    }\n    isValidLookup(res) {\n        return res !== undefined && !(!this.options.returnNull && res === null) && !(!this.options.returnEmptyString && res === \"\");\n    }\n    getResource(code, ns, key) {\n        let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n        if (this.i18nFormat && this.i18nFormat.getResource) return this.i18nFormat.getResource(code, ns, key, options);\n        return this.resourceStore.getResource(code, ns, key, options);\n    }\n    getUsedParamsDetails() {\n        let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        const optionsKeys = [\n            \"defaultValue\",\n            \"ordinal\",\n            \"context\",\n            \"replace\",\n            \"lng\",\n            \"lngs\",\n            \"fallbackLng\",\n            \"ns\",\n            \"keySeparator\",\n            \"nsSeparator\",\n            \"returnObjects\",\n            \"returnDetails\",\n            \"joinArrays\",\n            \"postProcess\",\n            \"interpolation\"\n        ];\n        const useOptionsReplaceForData = options.replace && typeof options.replace !== \"string\";\n        let data = useOptionsReplaceForData ? options.replace : options;\n        if (useOptionsReplaceForData && typeof options.count !== \"undefined\") {\n            data.count = options.count;\n        }\n        if (this.options.interpolation.defaultVariables) {\n            data = {\n                ...this.options.interpolation.defaultVariables,\n                ...data\n            };\n        }\n        if (!useOptionsReplaceForData) {\n            data = {\n                ...data\n            };\n            for (const key of optionsKeys){\n                delete data[key];\n            }\n        }\n        return data;\n    }\n    static hasDefaultValue(options) {\n        const prefix = \"defaultValue\";\n        for(const option in options){\n            if (Object.prototype.hasOwnProperty.call(options, option) && prefix === option.substring(0, prefix.length) && undefined !== options[option]) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\nfunction capitalize(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\nclass LanguageUtil {\n    constructor(options){\n        this.options = options;\n        this.supportedLngs = this.options.supportedLngs || false;\n        this.logger = baseLogger.create(\"languageUtils\");\n    }\n    getScriptPartFromCode(code) {\n        code = getCleanedCode(code);\n        if (!code || code.indexOf(\"-\") < 0) return null;\n        const p = code.split(\"-\");\n        if (p.length === 2) return null;\n        p.pop();\n        if (p[p.length - 1].toLowerCase() === \"x\") return null;\n        return this.formatLanguageCode(p.join(\"-\"));\n    }\n    getLanguagePartFromCode(code) {\n        code = getCleanedCode(code);\n        if (!code || code.indexOf(\"-\") < 0) return code;\n        const p = code.split(\"-\");\n        return this.formatLanguageCode(p[0]);\n    }\n    formatLanguageCode(code) {\n        if (typeof code === \"string\" && code.indexOf(\"-\") > -1) {\n            const specialCases = [\n                \"hans\",\n                \"hant\",\n                \"latn\",\n                \"cyrl\",\n                \"cans\",\n                \"mong\",\n                \"arab\"\n            ];\n            let p = code.split(\"-\");\n            if (this.options.lowerCaseLng) {\n                p = p.map((part)=>part.toLowerCase());\n            } else if (p.length === 2) {\n                p[0] = p[0].toLowerCase();\n                p[1] = p[1].toUpperCase();\n                if (specialCases.indexOf(p[1].toLowerCase()) > -1) p[1] = capitalize(p[1].toLowerCase());\n            } else if (p.length === 3) {\n                p[0] = p[0].toLowerCase();\n                if (p[1].length === 2) p[1] = p[1].toUpperCase();\n                if (p[0] !== \"sgn\" && p[2].length === 2) p[2] = p[2].toUpperCase();\n                if (specialCases.indexOf(p[1].toLowerCase()) > -1) p[1] = capitalize(p[1].toLowerCase());\n                if (specialCases.indexOf(p[2].toLowerCase()) > -1) p[2] = capitalize(p[2].toLowerCase());\n            }\n            return p.join(\"-\");\n        }\n        return this.options.cleanCode || this.options.lowerCaseLng ? code.toLowerCase() : code;\n    }\n    isSupportedCode(code) {\n        if (this.options.load === \"languageOnly\" || this.options.nonExplicitSupportedLngs) {\n            code = this.getLanguagePartFromCode(code);\n        }\n        return !this.supportedLngs || !this.supportedLngs.length || this.supportedLngs.indexOf(code) > -1;\n    }\n    getBestMatchFromCodes(codes) {\n        if (!codes) return null;\n        let found;\n        codes.forEach((code)=>{\n            if (found) return;\n            const cleanedLng = this.formatLanguageCode(code);\n            if (!this.options.supportedLngs || this.isSupportedCode(cleanedLng)) found = cleanedLng;\n        });\n        if (!found && this.options.supportedLngs) {\n            codes.forEach((code)=>{\n                if (found) return;\n                const lngOnly = this.getLanguagePartFromCode(code);\n                if (this.isSupportedCode(lngOnly)) return found = lngOnly;\n                found = this.options.supportedLngs.find((supportedLng)=>{\n                    if (supportedLng === lngOnly) return supportedLng;\n                    if (supportedLng.indexOf(\"-\") < 0 && lngOnly.indexOf(\"-\") < 0) return;\n                    if (supportedLng.indexOf(lngOnly) === 0) return supportedLng;\n                });\n            });\n        }\n        if (!found) found = this.getFallbackCodes(this.options.fallbackLng)[0];\n        return found;\n    }\n    getFallbackCodes(fallbacks, code) {\n        if (!fallbacks) return [];\n        if (typeof fallbacks === \"function\") fallbacks = fallbacks(code);\n        if (typeof fallbacks === \"string\") fallbacks = [\n            fallbacks\n        ];\n        if (Object.prototype.toString.apply(fallbacks) === \"[object Array]\") return fallbacks;\n        if (!code) return fallbacks.default || [];\n        let found = fallbacks[code];\n        if (!found) found = fallbacks[this.getScriptPartFromCode(code)];\n        if (!found) found = fallbacks[this.formatLanguageCode(code)];\n        if (!found) found = fallbacks[this.getLanguagePartFromCode(code)];\n        if (!found) found = fallbacks.default;\n        return found || [];\n    }\n    toResolveHierarchy(code, fallbackCode) {\n        const fallbackCodes = this.getFallbackCodes(fallbackCode || this.options.fallbackLng || [], code);\n        const codes = [];\n        const addCode = (c)=>{\n            if (!c) return;\n            if (this.isSupportedCode(c)) {\n                codes.push(c);\n            } else {\n                this.logger.warn(`rejecting language code not found in supportedLngs: ${c}`);\n            }\n        };\n        if (typeof code === \"string\" && (code.indexOf(\"-\") > -1 || code.indexOf(\"_\") > -1)) {\n            if (this.options.load !== \"languageOnly\") addCode(this.formatLanguageCode(code));\n            if (this.options.load !== \"languageOnly\" && this.options.load !== \"currentOnly\") addCode(this.getScriptPartFromCode(code));\n            if (this.options.load !== \"currentOnly\") addCode(this.getLanguagePartFromCode(code));\n        } else if (typeof code === \"string\") {\n            addCode(this.formatLanguageCode(code));\n        }\n        fallbackCodes.forEach((fc)=>{\n            if (codes.indexOf(fc) < 0) addCode(this.formatLanguageCode(fc));\n        });\n        return codes;\n    }\n}\nlet sets = [\n    {\n        lngs: [\n            \"ach\",\n            \"ak\",\n            \"am\",\n            \"arn\",\n            \"br\",\n            \"fil\",\n            \"gun\",\n            \"ln\",\n            \"mfe\",\n            \"mg\",\n            \"mi\",\n            \"oc\",\n            \"pt\",\n            \"pt-BR\",\n            \"tg\",\n            \"tl\",\n            \"ti\",\n            \"tr\",\n            \"uz\",\n            \"wa\"\n        ],\n        nr: [\n            1,\n            2\n        ],\n        fc: 1\n    },\n    {\n        lngs: [\n            \"af\",\n            \"an\",\n            \"ast\",\n            \"az\",\n            \"bg\",\n            \"bn\",\n            \"ca\",\n            \"da\",\n            \"de\",\n            \"dev\",\n            \"el\",\n            \"en\",\n            \"eo\",\n            \"es\",\n            \"et\",\n            \"eu\",\n            \"fi\",\n            \"fo\",\n            \"fur\",\n            \"fy\",\n            \"gl\",\n            \"gu\",\n            \"ha\",\n            \"hi\",\n            \"hu\",\n            \"hy\",\n            \"ia\",\n            \"it\",\n            \"kk\",\n            \"kn\",\n            \"ku\",\n            \"lb\",\n            \"mai\",\n            \"ml\",\n            \"mn\",\n            \"mr\",\n            \"nah\",\n            \"nap\",\n            \"nb\",\n            \"ne\",\n            \"nl\",\n            \"nn\",\n            \"no\",\n            \"nso\",\n            \"pa\",\n            \"pap\",\n            \"pms\",\n            \"ps\",\n            \"pt-PT\",\n            \"rm\",\n            \"sco\",\n            \"se\",\n            \"si\",\n            \"so\",\n            \"son\",\n            \"sq\",\n            \"sv\",\n            \"sw\",\n            \"ta\",\n            \"te\",\n            \"tk\",\n            \"ur\",\n            \"yo\"\n        ],\n        nr: [\n            1,\n            2\n        ],\n        fc: 2\n    },\n    {\n        lngs: [\n            \"ay\",\n            \"bo\",\n            \"cgg\",\n            \"fa\",\n            \"ht\",\n            \"id\",\n            \"ja\",\n            \"jbo\",\n            \"ka\",\n            \"km\",\n            \"ko\",\n            \"ky\",\n            \"lo\",\n            \"ms\",\n            \"sah\",\n            \"su\",\n            \"th\",\n            \"tt\",\n            \"ug\",\n            \"vi\",\n            \"wo\",\n            \"zh\"\n        ],\n        nr: [\n            1\n        ],\n        fc: 3\n    },\n    {\n        lngs: [\n            \"be\",\n            \"bs\",\n            \"cnr\",\n            \"dz\",\n            \"hr\",\n            \"ru\",\n            \"sr\",\n            \"uk\"\n        ],\n        nr: [\n            1,\n            2,\n            5\n        ],\n        fc: 4\n    },\n    {\n        lngs: [\n            \"ar\"\n        ],\n        nr: [\n            0,\n            1,\n            2,\n            3,\n            11,\n            100\n        ],\n        fc: 5\n    },\n    {\n        lngs: [\n            \"cs\",\n            \"sk\"\n        ],\n        nr: [\n            1,\n            2,\n            5\n        ],\n        fc: 6\n    },\n    {\n        lngs: [\n            \"csb\",\n            \"pl\"\n        ],\n        nr: [\n            1,\n            2,\n            5\n        ],\n        fc: 7\n    },\n    {\n        lngs: [\n            \"cy\"\n        ],\n        nr: [\n            1,\n            2,\n            3,\n            8\n        ],\n        fc: 8\n    },\n    {\n        lngs: [\n            \"fr\"\n        ],\n        nr: [\n            1,\n            2\n        ],\n        fc: 9\n    },\n    {\n        lngs: [\n            \"ga\"\n        ],\n        nr: [\n            1,\n            2,\n            3,\n            7,\n            11\n        ],\n        fc: 10\n    },\n    {\n        lngs: [\n            \"gd\"\n        ],\n        nr: [\n            1,\n            2,\n            3,\n            20\n        ],\n        fc: 11\n    },\n    {\n        lngs: [\n            \"is\"\n        ],\n        nr: [\n            1,\n            2\n        ],\n        fc: 12\n    },\n    {\n        lngs: [\n            \"jv\"\n        ],\n        nr: [\n            0,\n            1\n        ],\n        fc: 13\n    },\n    {\n        lngs: [\n            \"kw\"\n        ],\n        nr: [\n            1,\n            2,\n            3,\n            4\n        ],\n        fc: 14\n    },\n    {\n        lngs: [\n            \"lt\"\n        ],\n        nr: [\n            1,\n            2,\n            10\n        ],\n        fc: 15\n    },\n    {\n        lngs: [\n            \"lv\"\n        ],\n        nr: [\n            1,\n            2,\n            0\n        ],\n        fc: 16\n    },\n    {\n        lngs: [\n            \"mk\"\n        ],\n        nr: [\n            1,\n            2\n        ],\n        fc: 17\n    },\n    {\n        lngs: [\n            \"mnk\"\n        ],\n        nr: [\n            0,\n            1,\n            2\n        ],\n        fc: 18\n    },\n    {\n        lngs: [\n            \"mt\"\n        ],\n        nr: [\n            1,\n            2,\n            11,\n            20\n        ],\n        fc: 19\n    },\n    {\n        lngs: [\n            \"or\"\n        ],\n        nr: [\n            2,\n            1\n        ],\n        fc: 2\n    },\n    {\n        lngs: [\n            \"ro\"\n        ],\n        nr: [\n            1,\n            2,\n            20\n        ],\n        fc: 20\n    },\n    {\n        lngs: [\n            \"sl\"\n        ],\n        nr: [\n            5,\n            1,\n            2,\n            3\n        ],\n        fc: 21\n    },\n    {\n        lngs: [\n            \"he\",\n            \"iw\"\n        ],\n        nr: [\n            1,\n            2,\n            20,\n            21\n        ],\n        fc: 22\n    }\n];\nlet _rulesPluralsTypes = {\n    1: function(n) {\n        return Number(n > 1);\n    },\n    2: function(n) {\n        return Number(n != 1);\n    },\n    3: function(n) {\n        return 0;\n    },\n    4: function(n) {\n        return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);\n    },\n    5: function(n) {\n        return Number(n == 0 ? 0 : n == 1 ? 1 : n == 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5);\n    },\n    6: function(n) {\n        return Number(n == 1 ? 0 : n >= 2 && n <= 4 ? 1 : 2);\n    },\n    7: function(n) {\n        return Number(n == 1 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);\n    },\n    8: function(n) {\n        return Number(n == 1 ? 0 : n == 2 ? 1 : n != 8 && n != 11 ? 2 : 3);\n    },\n    9: function(n) {\n        return Number(n >= 2);\n    },\n    10: function(n) {\n        return Number(n == 1 ? 0 : n == 2 ? 1 : n < 7 ? 2 : n < 11 ? 3 : 4);\n    },\n    11: function(n) {\n        return Number(n == 1 || n == 11 ? 0 : n == 2 || n == 12 ? 1 : n > 2 && n < 20 ? 2 : 3);\n    },\n    12: function(n) {\n        return Number(n % 10 != 1 || n % 100 == 11);\n    },\n    13: function(n) {\n        return Number(n !== 0);\n    },\n    14: function(n) {\n        return Number(n == 1 ? 0 : n == 2 ? 1 : n == 3 ? 2 : 3);\n    },\n    15: function(n) {\n        return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);\n    },\n    16: function(n) {\n        return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n !== 0 ? 1 : 2);\n    },\n    17: function(n) {\n        return Number(n == 1 || n % 10 == 1 && n % 100 != 11 ? 0 : 1);\n    },\n    18: function(n) {\n        return Number(n == 0 ? 0 : n == 1 ? 1 : 2);\n    },\n    19: function(n) {\n        return Number(n == 1 ? 0 : n == 0 || n % 100 > 1 && n % 100 < 11 ? 1 : n % 100 > 10 && n % 100 < 20 ? 2 : 3);\n    },\n    20: function(n) {\n        return Number(n == 1 ? 0 : n == 0 || n % 100 > 0 && n % 100 < 20 ? 1 : 2);\n    },\n    21: function(n) {\n        return Number(n % 100 == 1 ? 1 : n % 100 == 2 ? 2 : n % 100 == 3 || n % 100 == 4 ? 3 : 0);\n    },\n    22: function(n) {\n        return Number(n == 1 ? 0 : n == 2 ? 1 : (n < 0 || n > 10) && n % 10 == 0 ? 2 : 3);\n    }\n};\nconst nonIntlVersions = [\n    \"v1\",\n    \"v2\",\n    \"v3\"\n];\nconst intlVersions = [\n    \"v4\"\n];\nconst suffixesOrder = {\n    zero: 0,\n    one: 1,\n    two: 2,\n    few: 3,\n    many: 4,\n    other: 5\n};\nfunction createRules() {\n    const rules = {};\n    sets.forEach((set)=>{\n        set.lngs.forEach((l)=>{\n            rules[l] = {\n                numbers: set.nr,\n                plurals: _rulesPluralsTypes[set.fc]\n            };\n        });\n    });\n    return rules;\n}\nclass PluralResolver {\n    constructor(languageUtils){\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        this.languageUtils = languageUtils;\n        this.options = options;\n        this.logger = baseLogger.create(\"pluralResolver\");\n        if ((!this.options.compatibilityJSON || intlVersions.includes(this.options.compatibilityJSON)) && (typeof Intl === \"undefined\" || !Intl.PluralRules)) {\n            this.options.compatibilityJSON = \"v3\";\n            this.logger.error(\"Your environment seems not to be Intl API compatible, use an Intl.PluralRules polyfill. Will fallback to the compatibilityJSON v3 format handling.\");\n        }\n        this.rules = createRules();\n    }\n    addRule(lng, obj) {\n        this.rules[lng] = obj;\n    }\n    getRule(code) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        if (this.shouldUseIntlApi()) {\n            try {\n                return new Intl.PluralRules(getCleanedCode(code), {\n                    type: options.ordinal ? \"ordinal\" : \"cardinal\"\n                });\n            } catch (err) {\n                return;\n            }\n        }\n        return this.rules[code] || this.rules[this.languageUtils.getLanguagePartFromCode(code)];\n    }\n    needsPlural(code) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        const rule = this.getRule(code, options);\n        if (this.shouldUseIntlApi()) {\n            return rule && rule.resolvedOptions().pluralCategories.length > 1;\n        }\n        return rule && rule.numbers.length > 1;\n    }\n    getPluralFormsOfKey(code, key) {\n        let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        return this.getSuffixes(code, options).map((suffix)=>`${key}${suffix}`);\n    }\n    getSuffixes(code) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        const rule = this.getRule(code, options);\n        if (!rule) {\n            return [];\n        }\n        if (this.shouldUseIntlApi()) {\n            return rule.resolvedOptions().pluralCategories.sort((pluralCategory1, pluralCategory2)=>suffixesOrder[pluralCategory1] - suffixesOrder[pluralCategory2]).map((pluralCategory)=>`${this.options.prepend}${options.ordinal ? `ordinal${this.options.prepend}` : \"\"}${pluralCategory}`);\n        }\n        return rule.numbers.map((number)=>this.getSuffix(code, number, options));\n    }\n    getSuffix(code, count) {\n        let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        const rule = this.getRule(code, options);\n        if (rule) {\n            if (this.shouldUseIntlApi()) {\n                return `${this.options.prepend}${options.ordinal ? `ordinal${this.options.prepend}` : \"\"}${rule.select(count)}`;\n            }\n            return this.getSuffixRetroCompatible(rule, count);\n        }\n        this.logger.warn(`no plural rule found for: ${code}`);\n        return \"\";\n    }\n    getSuffixRetroCompatible(rule, count) {\n        const idx = rule.noAbs ? rule.plurals(count) : rule.plurals(Math.abs(count));\n        let suffix = rule.numbers[idx];\n        if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {\n            if (suffix === 2) {\n                suffix = \"plural\";\n            } else if (suffix === 1) {\n                suffix = \"\";\n            }\n        }\n        const returnSuffix = ()=>this.options.prepend && suffix.toString() ? this.options.prepend + suffix.toString() : suffix.toString();\n        if (this.options.compatibilityJSON === \"v1\") {\n            if (suffix === 1) return \"\";\n            if (typeof suffix === \"number\") return `_plural_${suffix.toString()}`;\n            return returnSuffix();\n        } else if (this.options.compatibilityJSON === \"v2\") {\n            return returnSuffix();\n        } else if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {\n            return returnSuffix();\n        }\n        return this.options.prepend && idx.toString() ? this.options.prepend + idx.toString() : idx.toString();\n    }\n    shouldUseIntlApi() {\n        return !nonIntlVersions.includes(this.options.compatibilityJSON);\n    }\n}\nfunction deepFindWithDefaults(data, defaultData, key) {\n    let keySeparator = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \".\";\n    let ignoreJSONStructure = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n    let path = getPathWithDefaults(data, defaultData, key);\n    if (!path && ignoreJSONStructure && typeof key === \"string\") {\n        path = deepFind(data, key, keySeparator);\n        if (path === undefined) path = deepFind(defaultData, key, keySeparator);\n    }\n    return path;\n}\nclass Interpolator {\n    constructor(){\n        let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        this.logger = baseLogger.create(\"interpolator\");\n        this.options = options;\n        this.format = options.interpolation && options.interpolation.format || ((value)=>value);\n        this.init(options);\n    }\n    init() {\n        let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        if (!options.interpolation) options.interpolation = {\n            escapeValue: true\n        };\n        const iOpts = options.interpolation;\n        this.escape = iOpts.escape !== undefined ? iOpts.escape : escape;\n        this.escapeValue = iOpts.escapeValue !== undefined ? iOpts.escapeValue : true;\n        this.useRawValueToEscape = iOpts.useRawValueToEscape !== undefined ? iOpts.useRawValueToEscape : false;\n        this.prefix = iOpts.prefix ? regexEscape(iOpts.prefix) : iOpts.prefixEscaped || \"{{\";\n        this.suffix = iOpts.suffix ? regexEscape(iOpts.suffix) : iOpts.suffixEscaped || \"}}\";\n        this.formatSeparator = iOpts.formatSeparator ? iOpts.formatSeparator : iOpts.formatSeparator || \",\";\n        this.unescapePrefix = iOpts.unescapeSuffix ? \"\" : iOpts.unescapePrefix || \"-\";\n        this.unescapeSuffix = this.unescapePrefix ? \"\" : iOpts.unescapeSuffix || \"\";\n        this.nestingPrefix = iOpts.nestingPrefix ? regexEscape(iOpts.nestingPrefix) : iOpts.nestingPrefixEscaped || regexEscape(\"$t(\");\n        this.nestingSuffix = iOpts.nestingSuffix ? regexEscape(iOpts.nestingSuffix) : iOpts.nestingSuffixEscaped || regexEscape(\")\");\n        this.nestingOptionsSeparator = iOpts.nestingOptionsSeparator ? iOpts.nestingOptionsSeparator : iOpts.nestingOptionsSeparator || \",\";\n        this.maxReplaces = iOpts.maxReplaces ? iOpts.maxReplaces : 1000;\n        this.alwaysFormat = iOpts.alwaysFormat !== undefined ? iOpts.alwaysFormat : false;\n        this.resetRegExp();\n    }\n    reset() {\n        if (this.options) this.init(this.options);\n    }\n    resetRegExp() {\n        const regexpStr = `${this.prefix}(.+?)${this.suffix}`;\n        this.regexp = new RegExp(regexpStr, \"g\");\n        const regexpUnescapeStr = `${this.prefix}${this.unescapePrefix}(.+?)${this.unescapeSuffix}${this.suffix}`;\n        this.regexpUnescape = new RegExp(regexpUnescapeStr, \"g\");\n        const nestingRegexpStr = `${this.nestingPrefix}(.+?)${this.nestingSuffix}`;\n        this.nestingRegexp = new RegExp(nestingRegexpStr, \"g\");\n    }\n    interpolate(str, data, lng, options) {\n        let match;\n        let value;\n        let replaces;\n        const defaultData = this.options && this.options.interpolation && this.options.interpolation.defaultVariables || {};\n        function regexSafe(val) {\n            return val.replace(/\\$/g, \"$$$$\");\n        }\n        const handleFormat = (key)=>{\n            if (key.indexOf(this.formatSeparator) < 0) {\n                const path = deepFindWithDefaults(data, defaultData, key, this.options.keySeparator, this.options.ignoreJSONStructure);\n                return this.alwaysFormat ? this.format(path, undefined, lng, {\n                    ...options,\n                    ...data,\n                    interpolationkey: key\n                }) : path;\n            }\n            const p = key.split(this.formatSeparator);\n            const k = p.shift().trim();\n            const f = p.join(this.formatSeparator).trim();\n            return this.format(deepFindWithDefaults(data, defaultData, k, this.options.keySeparator, this.options.ignoreJSONStructure), f, lng, {\n                ...options,\n                ...data,\n                interpolationkey: k\n            });\n        };\n        this.resetRegExp();\n        const missingInterpolationHandler = options && options.missingInterpolationHandler || this.options.missingInterpolationHandler;\n        const skipOnVariables = options && options.interpolation && options.interpolation.skipOnVariables !== undefined ? options.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables;\n        const todos = [\n            {\n                regex: this.regexpUnescape,\n                safeValue: (val)=>regexSafe(val)\n            },\n            {\n                regex: this.regexp,\n                safeValue: (val)=>this.escapeValue ? regexSafe(this.escape(val)) : regexSafe(val)\n            }\n        ];\n        todos.forEach((todo)=>{\n            replaces = 0;\n            while(match = todo.regex.exec(str)){\n                const matchedVar = match[1].trim();\n                value = handleFormat(matchedVar);\n                if (value === undefined) {\n                    if (typeof missingInterpolationHandler === \"function\") {\n                        const temp = missingInterpolationHandler(str, match, options);\n                        value = typeof temp === \"string\" ? temp : \"\";\n                    } else if (options && Object.prototype.hasOwnProperty.call(options, matchedVar)) {\n                        value = \"\";\n                    } else if (skipOnVariables) {\n                        value = match[0];\n                        continue;\n                    } else {\n                        this.logger.warn(`missed to pass in variable ${matchedVar} for interpolating ${str}`);\n                        value = \"\";\n                    }\n                } else if (typeof value !== \"string\" && !this.useRawValueToEscape) {\n                    value = makeString(value);\n                }\n                const safeValue = todo.safeValue(value);\n                str = str.replace(match[0], safeValue);\n                if (skipOnVariables) {\n                    todo.regex.lastIndex += value.length;\n                    todo.regex.lastIndex -= match[0].length;\n                } else {\n                    todo.regex.lastIndex = 0;\n                }\n                replaces++;\n                if (replaces >= this.maxReplaces) {\n                    break;\n                }\n            }\n        });\n        return str;\n    }\n    nest(str, fc) {\n        let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        let match;\n        let value;\n        let clonedOptions;\n        function handleHasOptions(key, inheritedOptions) {\n            const sep = this.nestingOptionsSeparator;\n            if (key.indexOf(sep) < 0) return key;\n            const c = key.split(new RegExp(`${sep}[ ]*{`));\n            let optionsString = `{${c[1]}`;\n            key = c[0];\n            optionsString = this.interpolate(optionsString, clonedOptions);\n            const matchedSingleQuotes = optionsString.match(/'/g);\n            const matchedDoubleQuotes = optionsString.match(/\"/g);\n            if (matchedSingleQuotes && matchedSingleQuotes.length % 2 === 0 && !matchedDoubleQuotes || matchedDoubleQuotes.length % 2 !== 0) {\n                optionsString = optionsString.replace(/'/g, '\"');\n            }\n            try {\n                clonedOptions = JSON.parse(optionsString);\n                if (inheritedOptions) clonedOptions = {\n                    ...inheritedOptions,\n                    ...clonedOptions\n                };\n            } catch (e) {\n                this.logger.warn(`failed parsing options string in nesting for key ${key}`, e);\n                return `${key}${sep}${optionsString}`;\n            }\n            delete clonedOptions.defaultValue;\n            return key;\n        }\n        while(match = this.nestingRegexp.exec(str)){\n            let formatters = [];\n            clonedOptions = {\n                ...options\n            };\n            clonedOptions = clonedOptions.replace && typeof clonedOptions.replace !== \"string\" ? clonedOptions.replace : clonedOptions;\n            clonedOptions.applyPostProcessor = false;\n            delete clonedOptions.defaultValue;\n            let doReduce = false;\n            if (match[0].indexOf(this.formatSeparator) !== -1 && !/{.*}/.test(match[1])) {\n                const r = match[1].split(this.formatSeparator).map((elem)=>elem.trim());\n                match[1] = r.shift();\n                formatters = r;\n                doReduce = true;\n            }\n            value = fc(handleHasOptions.call(this, match[1].trim(), clonedOptions), clonedOptions);\n            if (value && match[0] === str && typeof value !== \"string\") return value;\n            if (typeof value !== \"string\") value = makeString(value);\n            if (!value) {\n                this.logger.warn(`missed to resolve ${match[1]} for nesting ${str}`);\n                value = \"\";\n            }\n            if (doReduce) {\n                value = formatters.reduce((v, f)=>this.format(v, f, options.lng, {\n                        ...options,\n                        interpolationkey: match[1].trim()\n                    }), value.trim());\n            }\n            str = str.replace(match[0], value);\n            this.regexp.lastIndex = 0;\n        }\n        return str;\n    }\n}\nfunction parseFormatStr(formatStr) {\n    let formatName = formatStr.toLowerCase().trim();\n    const formatOptions = {};\n    if (formatStr.indexOf(\"(\") > -1) {\n        const p = formatStr.split(\"(\");\n        formatName = p[0].toLowerCase().trim();\n        const optStr = p[1].substring(0, p[1].length - 1);\n        if (formatName === \"currency\" && optStr.indexOf(\":\") < 0) {\n            if (!formatOptions.currency) formatOptions.currency = optStr.trim();\n        } else if (formatName === \"relativetime\" && optStr.indexOf(\":\") < 0) {\n            if (!formatOptions.range) formatOptions.range = optStr.trim();\n        } else {\n            const opts = optStr.split(\";\");\n            opts.forEach((opt)=>{\n                if (!opt) return;\n                const [key, ...rest] = opt.split(\":\");\n                const val = rest.join(\":\").trim().replace(/^'+|'+$/g, \"\");\n                if (!formatOptions[key.trim()]) formatOptions[key.trim()] = val;\n                if (val === \"false\") formatOptions[key.trim()] = false;\n                if (val === \"true\") formatOptions[key.trim()] = true;\n                if (!isNaN(val)) formatOptions[key.trim()] = parseInt(val, 10);\n            });\n        }\n    }\n    return {\n        formatName,\n        formatOptions\n    };\n}\nfunction createCachedFormatter(fn) {\n    const cache = {};\n    return function invokeFormatter(val, lng, options) {\n        const key = lng + JSON.stringify(options);\n        let formatter = cache[key];\n        if (!formatter) {\n            formatter = fn(getCleanedCode(lng), options);\n            cache[key] = formatter;\n        }\n        return formatter(val);\n    };\n}\nclass Formatter {\n    constructor(){\n        let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        this.logger = baseLogger.create(\"formatter\");\n        this.options = options;\n        this.formats = {\n            number: createCachedFormatter((lng, opt)=>{\n                const formatter = new Intl.NumberFormat(lng, {\n                    ...opt\n                });\n                return (val)=>formatter.format(val);\n            }),\n            currency: createCachedFormatter((lng, opt)=>{\n                const formatter = new Intl.NumberFormat(lng, {\n                    ...opt,\n                    style: \"currency\"\n                });\n                return (val)=>formatter.format(val);\n            }),\n            datetime: createCachedFormatter((lng, opt)=>{\n                const formatter = new Intl.DateTimeFormat(lng, {\n                    ...opt\n                });\n                return (val)=>formatter.format(val);\n            }),\n            relativetime: createCachedFormatter((lng, opt)=>{\n                const formatter = new Intl.RelativeTimeFormat(lng, {\n                    ...opt\n                });\n                return (val)=>formatter.format(val, opt.range || \"day\");\n            }),\n            list: createCachedFormatter((lng, opt)=>{\n                const formatter = new Intl.ListFormat(lng, {\n                    ...opt\n                });\n                return (val)=>formatter.format(val);\n            })\n        };\n        this.init(options);\n    }\n    init(services) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n            interpolation: {}\n        };\n        const iOpts = options.interpolation;\n        this.formatSeparator = iOpts.formatSeparator ? iOpts.formatSeparator : iOpts.formatSeparator || \",\";\n    }\n    add(name, fc) {\n        this.formats[name.toLowerCase().trim()] = fc;\n    }\n    addCached(name, fc) {\n        this.formats[name.toLowerCase().trim()] = createCachedFormatter(fc);\n    }\n    format(value, format, lng) {\n        let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n        const formats = format.split(this.formatSeparator);\n        const result = formats.reduce((mem, f)=>{\n            const { formatName, formatOptions } = parseFormatStr(f);\n            if (this.formats[formatName]) {\n                let formatted = mem;\n                try {\n                    const valOptions = options && options.formatParams && options.formatParams[options.interpolationkey] || {};\n                    const l = valOptions.locale || valOptions.lng || options.locale || options.lng || lng;\n                    formatted = this.formats[formatName](mem, l, {\n                        ...formatOptions,\n                        ...options,\n                        ...valOptions\n                    });\n                } catch (error) {\n                    this.logger.warn(error);\n                }\n                return formatted;\n            } else {\n                this.logger.warn(`there was no format function for ${formatName}`);\n            }\n            return mem;\n        }, value);\n        return result;\n    }\n}\nfunction removePending(q, name) {\n    if (q.pending[name] !== undefined) {\n        delete q.pending[name];\n        q.pendingCount--;\n    }\n}\nclass Connector extends EventEmitter {\n    constructor(backend, store, services){\n        let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n        super();\n        this.backend = backend;\n        this.store = store;\n        this.services = services;\n        this.languageUtils = services.languageUtils;\n        this.options = options;\n        this.logger = baseLogger.create(\"backendConnector\");\n        this.waitingReads = [];\n        this.maxParallelReads = options.maxParallelReads || 10;\n        this.readingCalls = 0;\n        this.maxRetries = options.maxRetries >= 0 ? options.maxRetries : 5;\n        this.retryTimeout = options.retryTimeout >= 1 ? options.retryTimeout : 350;\n        this.state = {};\n        this.queue = [];\n        if (this.backend && this.backend.init) {\n            this.backend.init(services, options.backend, options);\n        }\n    }\n    queueLoad(languages, namespaces, options, callback) {\n        const toLoad = {};\n        const pending = {};\n        const toLoadLanguages = {};\n        const toLoadNamespaces = {};\n        languages.forEach((lng)=>{\n            let hasAllNamespaces = true;\n            namespaces.forEach((ns)=>{\n                const name = `${lng}|${ns}`;\n                if (!options.reload && this.store.hasResourceBundle(lng, ns)) {\n                    this.state[name] = 2;\n                } else if (this.state[name] < 0) ;\n                else if (this.state[name] === 1) {\n                    if (pending[name] === undefined) pending[name] = true;\n                } else {\n                    this.state[name] = 1;\n                    hasAllNamespaces = false;\n                    if (pending[name] === undefined) pending[name] = true;\n                    if (toLoad[name] === undefined) toLoad[name] = true;\n                    if (toLoadNamespaces[ns] === undefined) toLoadNamespaces[ns] = true;\n                }\n            });\n            if (!hasAllNamespaces) toLoadLanguages[lng] = true;\n        });\n        if (Object.keys(toLoad).length || Object.keys(pending).length) {\n            this.queue.push({\n                pending,\n                pendingCount: Object.keys(pending).length,\n                loaded: {},\n                errors: [],\n                callback\n            });\n        }\n        return {\n            toLoad: Object.keys(toLoad),\n            pending: Object.keys(pending),\n            toLoadLanguages: Object.keys(toLoadLanguages),\n            toLoadNamespaces: Object.keys(toLoadNamespaces)\n        };\n    }\n    loaded(name, err, data) {\n        const s = name.split(\"|\");\n        const lng = s[0];\n        const ns = s[1];\n        if (err) this.emit(\"failedLoading\", lng, ns, err);\n        if (data) {\n            this.store.addResourceBundle(lng, ns, data);\n        }\n        this.state[name] = err ? -1 : 2;\n        const loaded = {};\n        this.queue.forEach((q)=>{\n            pushPath(q.loaded, [\n                lng\n            ], ns);\n            removePending(q, name);\n            if (err) q.errors.push(err);\n            if (q.pendingCount === 0 && !q.done) {\n                Object.keys(q.loaded).forEach((l)=>{\n                    if (!loaded[l]) loaded[l] = {};\n                    const loadedKeys = q.loaded[l];\n                    if (loadedKeys.length) {\n                        loadedKeys.forEach((n)=>{\n                            if (loaded[l][n] === undefined) loaded[l][n] = true;\n                        });\n                    }\n                });\n                q.done = true;\n                if (q.errors.length) {\n                    q.callback(q.errors);\n                } else {\n                    q.callback();\n                }\n            }\n        });\n        this.emit(\"loaded\", loaded);\n        this.queue = this.queue.filter((q)=>!q.done);\n    }\n    read(lng, ns, fcName) {\n        let tried = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n        let wait = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : this.retryTimeout;\n        let callback = arguments.length > 5 ? arguments[5] : undefined;\n        if (!lng.length) return callback(null, {});\n        if (this.readingCalls >= this.maxParallelReads) {\n            this.waitingReads.push({\n                lng,\n                ns,\n                fcName,\n                tried,\n                wait,\n                callback\n            });\n            return;\n        }\n        this.readingCalls++;\n        const resolver = (err, data)=>{\n            this.readingCalls--;\n            if (this.waitingReads.length > 0) {\n                const next = this.waitingReads.shift();\n                this.read(next.lng, next.ns, next.fcName, next.tried, next.wait, next.callback);\n            }\n            if (err && data && tried < this.maxRetries) {\n                setTimeout(()=>{\n                    this.read.call(this, lng, ns, fcName, tried + 1, wait * 2, callback);\n                }, wait);\n                return;\n            }\n            callback(err, data);\n        };\n        const fc = this.backend[fcName].bind(this.backend);\n        if (fc.length === 2) {\n            try {\n                const r = fc(lng, ns);\n                if (r && typeof r.then === \"function\") {\n                    r.then((data)=>resolver(null, data)).catch(resolver);\n                } else {\n                    resolver(null, r);\n                }\n            } catch (err) {\n                resolver(err);\n            }\n            return;\n        }\n        return fc(lng, ns, resolver);\n    }\n    prepareLoading(languages, namespaces) {\n        let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        let callback = arguments.length > 3 ? arguments[3] : undefined;\n        if (!this.backend) {\n            this.logger.warn(\"No backend was added via i18next.use. Will not load resources.\");\n            return callback && callback();\n        }\n        if (typeof languages === \"string\") languages = this.languageUtils.toResolveHierarchy(languages);\n        if (typeof namespaces === \"string\") namespaces = [\n            namespaces\n        ];\n        const toLoad = this.queueLoad(languages, namespaces, options, callback);\n        if (!toLoad.toLoad.length) {\n            if (!toLoad.pending.length) callback();\n            return null;\n        }\n        toLoad.toLoad.forEach((name)=>{\n            this.loadOne(name);\n        });\n    }\n    load(languages, namespaces, callback) {\n        this.prepareLoading(languages, namespaces, {}, callback);\n    }\n    reload(languages, namespaces, callback) {\n        this.prepareLoading(languages, namespaces, {\n            reload: true\n        }, callback);\n    }\n    loadOne(name) {\n        let prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n        const s = name.split(\"|\");\n        const lng = s[0];\n        const ns = s[1];\n        this.read(lng, ns, \"read\", undefined, undefined, (err, data)=>{\n            if (err) this.logger.warn(`${prefix}loading namespace ${ns} for language ${lng} failed`, err);\n            if (!err && data) this.logger.log(`${prefix}loaded namespace ${ns} for language ${lng}`, data);\n            this.loaded(name, err, data);\n        });\n    }\n    saveMissing(languages, namespace, key, fallbackValue, isUpdate) {\n        let options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n        let clb = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : ()=>{};\n        if (this.services.utils && this.services.utils.hasLoadedNamespace && !this.services.utils.hasLoadedNamespace(namespace)) {\n            this.logger.warn(`did not save key \"${key}\" as the namespace \"${namespace}\" was not yet loaded`, \"This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!\");\n            return;\n        }\n        if (key === undefined || key === null || key === \"\") return;\n        if (this.backend && this.backend.create) {\n            const opts = {\n                ...options,\n                isUpdate\n            };\n            const fc = this.backend.create.bind(this.backend);\n            if (fc.length < 6) {\n                try {\n                    let r;\n                    if (fc.length === 5) {\n                        r = fc(languages, namespace, key, fallbackValue, opts);\n                    } else {\n                        r = fc(languages, namespace, key, fallbackValue);\n                    }\n                    if (r && typeof r.then === \"function\") {\n                        r.then((data)=>clb(null, data)).catch(clb);\n                    } else {\n                        clb(null, r);\n                    }\n                } catch (err) {\n                    clb(err);\n                }\n            } else {\n                fc(languages, namespace, key, fallbackValue, clb, opts);\n            }\n        }\n        if (!languages || !languages[0]) return;\n        this.store.addResource(languages[0], namespace, key, fallbackValue);\n    }\n}\nfunction get() {\n    return {\n        debug: false,\n        initImmediate: true,\n        ns: [\n            \"translation\"\n        ],\n        defaultNS: [\n            \"translation\"\n        ],\n        fallbackLng: [\n            \"dev\"\n        ],\n        fallbackNS: false,\n        supportedLngs: false,\n        nonExplicitSupportedLngs: false,\n        load: \"all\",\n        preload: false,\n        simplifyPluralSuffix: true,\n        keySeparator: \".\",\n        nsSeparator: \":\",\n        pluralSeparator: \"_\",\n        contextSeparator: \"_\",\n        partialBundledLanguages: false,\n        saveMissing: false,\n        updateMissing: false,\n        saveMissingTo: \"fallback\",\n        saveMissingPlurals: true,\n        missingKeyHandler: false,\n        missingInterpolationHandler: false,\n        postProcess: false,\n        postProcessPassResolved: false,\n        returnNull: false,\n        returnEmptyString: true,\n        returnObjects: false,\n        joinArrays: false,\n        returnedObjectHandler: false,\n        parseMissingKeyHandler: false,\n        appendNamespaceToMissingKey: false,\n        appendNamespaceToCIMode: false,\n        overloadTranslationOptionHandler: function handle(args) {\n            let ret = {};\n            if (typeof args[1] === \"object\") ret = args[1];\n            if (typeof args[1] === \"string\") ret.defaultValue = args[1];\n            if (typeof args[2] === \"string\") ret.tDescription = args[2];\n            if (typeof args[2] === \"object\" || typeof args[3] === \"object\") {\n                const options = args[3] || args[2];\n                Object.keys(options).forEach((key)=>{\n                    ret[key] = options[key];\n                });\n            }\n            return ret;\n        },\n        interpolation: {\n            escapeValue: true,\n            format: (value, format, lng, options)=>value,\n            prefix: \"{{\",\n            suffix: \"}}\",\n            formatSeparator: \",\",\n            unescapePrefix: \"-\",\n            nestingPrefix: \"$t(\",\n            nestingSuffix: \")\",\n            nestingOptionsSeparator: \",\",\n            maxReplaces: 1000,\n            skipOnVariables: true\n        }\n    };\n}\nfunction transformOptions(options) {\n    if (typeof options.ns === \"string\") options.ns = [\n        options.ns\n    ];\n    if (typeof options.fallbackLng === \"string\") options.fallbackLng = [\n        options.fallbackLng\n    ];\n    if (typeof options.fallbackNS === \"string\") options.fallbackNS = [\n        options.fallbackNS\n    ];\n    if (options.supportedLngs && options.supportedLngs.indexOf(\"cimode\") < 0) {\n        options.supportedLngs = options.supportedLngs.concat([\n            \"cimode\"\n        ]);\n    }\n    return options;\n}\nfunction noop() {}\nfunction bindMemberFunctions(inst) {\n    const mems = Object.getOwnPropertyNames(Object.getPrototypeOf(inst));\n    mems.forEach((mem)=>{\n        if (typeof inst[mem] === \"function\") {\n            inst[mem] = inst[mem].bind(inst);\n        }\n    });\n}\nclass I18n extends EventEmitter {\n    constructor(){\n        let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        let callback = arguments.length > 1 ? arguments[1] : undefined;\n        super();\n        this.options = transformOptions(options);\n        this.services = {};\n        this.logger = baseLogger;\n        this.modules = {\n            external: []\n        };\n        bindMemberFunctions(this);\n        if (callback && !this.isInitialized && !options.isClone) {\n            if (!this.options.initImmediate) {\n                this.init(options, callback);\n                return this;\n            }\n            setTimeout(()=>{\n                this.init(options, callback);\n            }, 0);\n        }\n    }\n    init() {\n        var _this = this;\n        let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        let callback = arguments.length > 1 ? arguments[1] : undefined;\n        if (typeof options === \"function\") {\n            callback = options;\n            options = {};\n        }\n        if (!options.defaultNS && options.defaultNS !== false && options.ns) {\n            if (typeof options.ns === \"string\") {\n                options.defaultNS = options.ns;\n            } else if (options.ns.indexOf(\"translation\") < 0) {\n                options.defaultNS = options.ns[0];\n            }\n        }\n        const defOpts = get();\n        this.options = {\n            ...defOpts,\n            ...this.options,\n            ...transformOptions(options)\n        };\n        if (this.options.compatibilityAPI !== \"v1\") {\n            this.options.interpolation = {\n                ...defOpts.interpolation,\n                ...this.options.interpolation\n            };\n        }\n        if (options.keySeparator !== undefined) {\n            this.options.userDefinedKeySeparator = options.keySeparator;\n        }\n        if (options.nsSeparator !== undefined) {\n            this.options.userDefinedNsSeparator = options.nsSeparator;\n        }\n        function createClassOnDemand(ClassOrObject) {\n            if (!ClassOrObject) return null;\n            if (typeof ClassOrObject === \"function\") return new ClassOrObject();\n            return ClassOrObject;\n        }\n        if (!this.options.isClone) {\n            if (this.modules.logger) {\n                baseLogger.init(createClassOnDemand(this.modules.logger), this.options);\n            } else {\n                baseLogger.init(null, this.options);\n            }\n            let formatter;\n            if (this.modules.formatter) {\n                formatter = this.modules.formatter;\n            } else if (typeof Intl !== \"undefined\") {\n                formatter = Formatter;\n            }\n            const lu = new LanguageUtil(this.options);\n            this.store = new ResourceStore(this.options.resources, this.options);\n            const s = this.services;\n            s.logger = baseLogger;\n            s.resourceStore = this.store;\n            s.languageUtils = lu;\n            s.pluralResolver = new PluralResolver(lu, {\n                prepend: this.options.pluralSeparator,\n                compatibilityJSON: this.options.compatibilityJSON,\n                simplifyPluralSuffix: this.options.simplifyPluralSuffix\n            });\n            if (formatter && (!this.options.interpolation.format || this.options.interpolation.format === defOpts.interpolation.format)) {\n                s.formatter = createClassOnDemand(formatter);\n                s.formatter.init(s, this.options);\n                this.options.interpolation.format = s.formatter.format.bind(s.formatter);\n            }\n            s.interpolator = new Interpolator(this.options);\n            s.utils = {\n                hasLoadedNamespace: this.hasLoadedNamespace.bind(this)\n            };\n            s.backendConnector = new Connector(createClassOnDemand(this.modules.backend), s.resourceStore, s, this.options);\n            s.backendConnector.on(\"*\", function(event) {\n                for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n                    args[_key - 1] = arguments[_key];\n                }\n                _this.emit(event, ...args);\n            });\n            if (this.modules.languageDetector) {\n                s.languageDetector = createClassOnDemand(this.modules.languageDetector);\n                if (s.languageDetector.init) s.languageDetector.init(s, this.options.detection, this.options);\n            }\n            if (this.modules.i18nFormat) {\n                s.i18nFormat = createClassOnDemand(this.modules.i18nFormat);\n                if (s.i18nFormat.init) s.i18nFormat.init(this);\n            }\n            this.translator = new Translator(this.services, this.options);\n            this.translator.on(\"*\", function(event) {\n                for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){\n                    args[_key2 - 1] = arguments[_key2];\n                }\n                _this.emit(event, ...args);\n            });\n            this.modules.external.forEach((m)=>{\n                if (m.init) m.init(this);\n            });\n        }\n        this.format = this.options.interpolation.format;\n        if (!callback) callback = noop;\n        if (this.options.fallbackLng && !this.services.languageDetector && !this.options.lng) {\n            const codes = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);\n            if (codes.length > 0 && codes[0] !== \"dev\") this.options.lng = codes[0];\n        }\n        if (!this.services.languageDetector && !this.options.lng) {\n            this.logger.warn(\"init: no languageDetector is used and no lng is defined\");\n        }\n        const storeApi = [\n            \"getResource\",\n            \"hasResourceBundle\",\n            \"getResourceBundle\",\n            \"getDataByLanguage\"\n        ];\n        storeApi.forEach((fcName)=>{\n            this[fcName] = function() {\n                return _this.store[fcName](...arguments);\n            };\n        });\n        const storeApiChained = [\n            \"addResource\",\n            \"addResources\",\n            \"addResourceBundle\",\n            \"removeResourceBundle\"\n        ];\n        storeApiChained.forEach((fcName)=>{\n            this[fcName] = function() {\n                _this.store[fcName](...arguments);\n                return _this;\n            };\n        });\n        const deferred = defer();\n        const load = ()=>{\n            const finish = (err, t)=>{\n                if (this.isInitialized && !this.initializedStoreOnce) this.logger.warn(\"init: i18next is already initialized. You should call init just once!\");\n                this.isInitialized = true;\n                if (!this.options.isClone) this.logger.log(\"initialized\", this.options);\n                this.emit(\"initialized\", this.options);\n                deferred.resolve(t);\n                callback(err, t);\n            };\n            if (this.languages && this.options.compatibilityAPI !== \"v1\" && !this.isInitialized) return finish(null, this.t.bind(this));\n            this.changeLanguage(this.options.lng, finish);\n        };\n        if (this.options.resources || !this.options.initImmediate) {\n            load();\n        } else {\n            setTimeout(load, 0);\n        }\n        return deferred;\n    }\n    loadResources(language) {\n        let callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;\n        let usedCallback = callback;\n        const usedLng = typeof language === \"string\" ? language : this.language;\n        if (typeof language === \"function\") usedCallback = language;\n        if (!this.options.resources || this.options.partialBundledLanguages) {\n            if (usedLng && usedLng.toLowerCase() === \"cimode\" && (!this.options.preload || this.options.preload.length === 0)) return usedCallback();\n            const toLoad = [];\n            const append = (lng)=>{\n                if (!lng) return;\n                if (lng === \"cimode\") return;\n                const lngs = this.services.languageUtils.toResolveHierarchy(lng);\n                lngs.forEach((l)=>{\n                    if (l === \"cimode\") return;\n                    if (toLoad.indexOf(l) < 0) toLoad.push(l);\n                });\n            };\n            if (!usedLng) {\n                const fallbacks = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);\n                fallbacks.forEach((l)=>append(l));\n            } else {\n                append(usedLng);\n            }\n            if (this.options.preload) {\n                this.options.preload.forEach((l)=>append(l));\n            }\n            this.services.backendConnector.load(toLoad, this.options.ns, (e)=>{\n                if (!e && !this.resolvedLanguage && this.language) this.setResolvedLanguage(this.language);\n                usedCallback(e);\n            });\n        } else {\n            usedCallback(null);\n        }\n    }\n    reloadResources(lngs, ns, callback) {\n        const deferred = defer();\n        if (!lngs) lngs = this.languages;\n        if (!ns) ns = this.options.ns;\n        if (!callback) callback = noop;\n        this.services.backendConnector.reload(lngs, ns, (err)=>{\n            deferred.resolve();\n            callback(err);\n        });\n        return deferred;\n    }\n    use(module) {\n        if (!module) throw new Error(\"You are passing an undefined module! Please check the object you are passing to i18next.use()\");\n        if (!module.type) throw new Error(\"You are passing a wrong module! Please check the object you are passing to i18next.use()\");\n        if (module.type === \"backend\") {\n            this.modules.backend = module;\n        }\n        if (module.type === \"logger\" || module.log && module.warn && module.error) {\n            this.modules.logger = module;\n        }\n        if (module.type === \"languageDetector\") {\n            this.modules.languageDetector = module;\n        }\n        if (module.type === \"i18nFormat\") {\n            this.modules.i18nFormat = module;\n        }\n        if (module.type === \"postProcessor\") {\n            postProcessor.addPostProcessor(module);\n        }\n        if (module.type === \"formatter\") {\n            this.modules.formatter = module;\n        }\n        if (module.type === \"3rdParty\") {\n            this.modules.external.push(module);\n        }\n        return this;\n    }\n    setResolvedLanguage(l) {\n        if (!l || !this.languages) return;\n        if ([\n            \"cimode\",\n            \"dev\"\n        ].indexOf(l) > -1) return;\n        for(let li = 0; li < this.languages.length; li++){\n            const lngInLngs = this.languages[li];\n            if ([\n                \"cimode\",\n                \"dev\"\n            ].indexOf(lngInLngs) > -1) continue;\n            if (this.store.hasLanguageSomeTranslations(lngInLngs)) {\n                this.resolvedLanguage = lngInLngs;\n                break;\n            }\n        }\n    }\n    changeLanguage(lng, callback) {\n        var _this2 = this;\n        this.isLanguageChangingTo = lng;\n        const deferred = defer();\n        this.emit(\"languageChanging\", lng);\n        const setLngProps = (l)=>{\n            this.language = l;\n            this.languages = this.services.languageUtils.toResolveHierarchy(l);\n            this.resolvedLanguage = undefined;\n            this.setResolvedLanguage(l);\n        };\n        const done = (err, l)=>{\n            if (l) {\n                setLngProps(l);\n                this.translator.changeLanguage(l);\n                this.isLanguageChangingTo = undefined;\n                this.emit(\"languageChanged\", l);\n                this.logger.log(\"languageChanged\", l);\n            } else {\n                this.isLanguageChangingTo = undefined;\n            }\n            deferred.resolve(function() {\n                return _this2.t(...arguments);\n            });\n            if (callback) callback(err, function() {\n                return _this2.t(...arguments);\n            });\n        };\n        const setLng = (lngs)=>{\n            if (!lng && !lngs && this.services.languageDetector) lngs = [];\n            const l = typeof lngs === \"string\" ? lngs : this.services.languageUtils.getBestMatchFromCodes(lngs);\n            if (l) {\n                if (!this.language) {\n                    setLngProps(l);\n                }\n                if (!this.translator.language) this.translator.changeLanguage(l);\n                if (this.services.languageDetector && this.services.languageDetector.cacheUserLanguage) this.services.languageDetector.cacheUserLanguage(l);\n            }\n            this.loadResources(l, (err)=>{\n                done(err, l);\n            });\n        };\n        if (!lng && this.services.languageDetector && !this.services.languageDetector.async) {\n            setLng(this.services.languageDetector.detect());\n        } else if (!lng && this.services.languageDetector && this.services.languageDetector.async) {\n            if (this.services.languageDetector.detect.length === 0) {\n                this.services.languageDetector.detect().then(setLng);\n            } else {\n                this.services.languageDetector.detect(setLng);\n            }\n        } else {\n            setLng(lng);\n        }\n        return deferred;\n    }\n    getFixedT(lng, ns, keyPrefix) {\n        var _this3 = this;\n        const fixedT = function(key, opts) {\n            let options;\n            if (typeof opts !== \"object\") {\n                for(var _len3 = arguments.length, rest = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++){\n                    rest[_key3 - 2] = arguments[_key3];\n                }\n                options = _this3.options.overloadTranslationOptionHandler([\n                    key,\n                    opts\n                ].concat(rest));\n            } else {\n                options = {\n                    ...opts\n                };\n            }\n            options.lng = options.lng || fixedT.lng;\n            options.lngs = options.lngs || fixedT.lngs;\n            options.ns = options.ns || fixedT.ns;\n            options.keyPrefix = options.keyPrefix || keyPrefix || fixedT.keyPrefix;\n            const keySeparator = _this3.options.keySeparator || \".\";\n            let resultKey;\n            if (options.keyPrefix && Array.isArray(key)) {\n                resultKey = key.map((k)=>`${options.keyPrefix}${keySeparator}${k}`);\n            } else {\n                resultKey = options.keyPrefix ? `${options.keyPrefix}${keySeparator}${key}` : key;\n            }\n            return _this3.t(resultKey, options);\n        };\n        if (typeof lng === \"string\") {\n            fixedT.lng = lng;\n        } else {\n            fixedT.lngs = lng;\n        }\n        fixedT.ns = ns;\n        fixedT.keyPrefix = keyPrefix;\n        return fixedT;\n    }\n    t() {\n        return this.translator && this.translator.translate(...arguments);\n    }\n    exists() {\n        return this.translator && this.translator.exists(...arguments);\n    }\n    setDefaultNamespace(ns) {\n        this.options.defaultNS = ns;\n    }\n    hasLoadedNamespace(ns) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        if (!this.isInitialized) {\n            this.logger.warn(\"hasLoadedNamespace: i18next was not initialized\", this.languages);\n            return false;\n        }\n        if (!this.languages || !this.languages.length) {\n            this.logger.warn(\"hasLoadedNamespace: i18n.languages were undefined or empty\", this.languages);\n            return false;\n        }\n        const lng = options.lng || this.resolvedLanguage || this.languages[0];\n        const fallbackLng = this.options ? this.options.fallbackLng : false;\n        const lastLng = this.languages[this.languages.length - 1];\n        if (lng.toLowerCase() === \"cimode\") return true;\n        const loadNotPending = (l, n)=>{\n            const loadState = this.services.backendConnector.state[`${l}|${n}`];\n            return loadState === -1 || loadState === 2;\n        };\n        if (options.precheck) {\n            const preResult = options.precheck(this, loadNotPending);\n            if (preResult !== undefined) return preResult;\n        }\n        if (this.hasResourceBundle(lng, ns)) return true;\n        if (!this.services.backendConnector.backend || this.options.resources && !this.options.partialBundledLanguages) return true;\n        if (loadNotPending(lng, ns) && (!fallbackLng || loadNotPending(lastLng, ns))) return true;\n        return false;\n    }\n    loadNamespaces(ns, callback) {\n        const deferred = defer();\n        if (!this.options.ns) {\n            if (callback) callback();\n            return Promise.resolve();\n        }\n        if (typeof ns === \"string\") ns = [\n            ns\n        ];\n        ns.forEach((n)=>{\n            if (this.options.ns.indexOf(n) < 0) this.options.ns.push(n);\n        });\n        this.loadResources((err)=>{\n            deferred.resolve();\n            if (callback) callback(err);\n        });\n        return deferred;\n    }\n    loadLanguages(lngs, callback) {\n        const deferred = defer();\n        if (typeof lngs === \"string\") lngs = [\n            lngs\n        ];\n        const preloaded = this.options.preload || [];\n        const newLngs = lngs.filter((lng)=>preloaded.indexOf(lng) < 0);\n        if (!newLngs.length) {\n            if (callback) callback();\n            return Promise.resolve();\n        }\n        this.options.preload = preloaded.concat(newLngs);\n        this.loadResources((err)=>{\n            deferred.resolve();\n            if (callback) callback(err);\n        });\n        return deferred;\n    }\n    dir(lng) {\n        if (!lng) lng = this.resolvedLanguage || (this.languages && this.languages.length > 0 ? this.languages[0] : this.language);\n        if (!lng) return \"rtl\";\n        const rtlLngs = [\n            \"ar\",\n            \"shu\",\n            \"sqr\",\n            \"ssh\",\n            \"xaa\",\n            \"yhd\",\n            \"yud\",\n            \"aao\",\n            \"abh\",\n            \"abv\",\n            \"acm\",\n            \"acq\",\n            \"acw\",\n            \"acx\",\n            \"acy\",\n            \"adf\",\n            \"ads\",\n            \"aeb\",\n            \"aec\",\n            \"afb\",\n            \"ajp\",\n            \"apc\",\n            \"apd\",\n            \"arb\",\n            \"arq\",\n            \"ars\",\n            \"ary\",\n            \"arz\",\n            \"auz\",\n            \"avl\",\n            \"ayh\",\n            \"ayl\",\n            \"ayn\",\n            \"ayp\",\n            \"bbz\",\n            \"pga\",\n            \"he\",\n            \"iw\",\n            \"ps\",\n            \"pbt\",\n            \"pbu\",\n            \"pst\",\n            \"prp\",\n            \"prd\",\n            \"ug\",\n            \"ur\",\n            \"ydd\",\n            \"yds\",\n            \"yih\",\n            \"ji\",\n            \"yi\",\n            \"hbo\",\n            \"men\",\n            \"xmn\",\n            \"fa\",\n            \"jpr\",\n            \"peo\",\n            \"pes\",\n            \"prs\",\n            \"dv\",\n            \"sam\",\n            \"ckb\"\n        ];\n        const languageUtils = this.services && this.services.languageUtils || new LanguageUtil(get());\n        return rtlLngs.indexOf(languageUtils.getLanguagePartFromCode(lng)) > -1 || lng.toLowerCase().indexOf(\"-arab\") > 1 ? \"rtl\" : \"ltr\";\n    }\n    static createInstance() {\n        let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        let callback = arguments.length > 1 ? arguments[1] : undefined;\n        return new I18n(options, callback);\n    }\n    cloneInstance() {\n        let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        let callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;\n        const forkResourceStore = options.forkResourceStore;\n        if (forkResourceStore) delete options.forkResourceStore;\n        const mergedOptions = {\n            ...this.options,\n            ...options,\n            ...{\n                isClone: true\n            }\n        };\n        const clone = new I18n(mergedOptions);\n        if (options.debug !== undefined || options.prefix !== undefined) {\n            clone.logger = clone.logger.clone(options);\n        }\n        const membersToCopy = [\n            \"store\",\n            \"services\",\n            \"language\"\n        ];\n        membersToCopy.forEach((m)=>{\n            clone[m] = this[m];\n        });\n        clone.services = {\n            ...this.services\n        };\n        clone.services.utils = {\n            hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)\n        };\n        if (forkResourceStore) {\n            clone.store = new ResourceStore(this.store.data, mergedOptions);\n            clone.services.resourceStore = clone.store;\n        }\n        clone.translator = new Translator(clone.services, mergedOptions);\n        clone.translator.on(\"*\", function(event) {\n            for(var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++){\n                args[_key4 - 1] = arguments[_key4];\n            }\n            clone.emit(event, ...args);\n        });\n        clone.init(mergedOptions, callback);\n        clone.translator.options = mergedOptions;\n        clone.translator.backendConnector.services.utils = {\n            hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)\n        };\n        return clone;\n    }\n    toJSON() {\n        return {\n            options: this.options,\n            store: this.store,\n            language: this.language,\n            languages: this.languages,\n            resolvedLanguage: this.resolvedLanguage\n        };\n    }\n}\nconst instance = I18n.createInstance();\ninstance.createInstance = I18n.createInstance;\nconst createInstance = instance.createInstance;\nconst dir = instance.dir;\nconst init = instance.init;\nconst loadResources = instance.loadResources;\nconst reloadResources = instance.reloadResources;\nconst use = instance.use;\nconst changeLanguage = instance.changeLanguage;\nconst getFixedT = instance.getFixedT;\nconst t = instance.t;\nconst exists = instance.exists;\nconst setDefaultNamespace = instance.setDefaultNamespace;\nconst hasLoadedNamespace = instance.hasLoadedNamespace;\nconst loadNamespaces = instance.loadNamespaces;\nconst loadLanguages = instance.loadLanguages;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaTE4bmV4dC9kaXN0L2VzbS9pMThuZXh0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLE1BQU1BLGdCQUFnQjtJQUNwQkMsTUFBTTtJQUNOQyxLQUFJQyxJQUFJO1FBQ04sSUFBSSxDQUFDQyxNQUFNLENBQUMsT0FBT0Q7SUFDckI7SUFDQUUsTUFBS0YsSUFBSTtRQUNQLElBQUksQ0FBQ0MsTUFBTSxDQUFDLFFBQVFEO0lBQ3RCO0lBQ0FHLE9BQU1ILElBQUk7UUFDUixJQUFJLENBQUNDLE1BQU0sQ0FBQyxTQUFTRDtJQUN2QjtJQUNBQyxRQUFPSCxJQUFJLEVBQUVFLElBQUk7UUFDZixJQUFJSSxXQUFXQSxPQUFPLENBQUNOLEtBQUssRUFBRU0sT0FBTyxDQUFDTixLQUFLLENBQUNPLEtBQUssQ0FBQ0QsU0FBU0o7SUFDN0Q7QUFDRjtBQUNBLE1BQU1NO0lBQ0pDLFlBQVlDLGNBQWMsQ0FBRTtRQUMxQixJQUFJQyxVQUFVQyxVQUFVQyxNQUFNLEdBQUcsS0FBS0QsU0FBUyxDQUFDLEVBQUUsS0FBS0UsWUFBWUYsU0FBUyxDQUFDLEVBQUUsR0FBRyxDQUFDO1FBQ25GLElBQUksQ0FBQ0csSUFBSSxDQUFDTCxnQkFBZ0JDO0lBQzVCO0lBQ0FJLEtBQUtMLGNBQWMsRUFBRTtRQUNuQixJQUFJQyxVQUFVQyxVQUFVQyxNQUFNLEdBQUcsS0FBS0QsU0FBUyxDQUFDLEVBQUUsS0FBS0UsWUFBWUYsU0FBUyxDQUFDLEVBQUUsR0FBRyxDQUFDO1FBQ25GLElBQUksQ0FBQ0ksTUFBTSxHQUFHTCxRQUFRSyxNQUFNLElBQUk7UUFDaEMsSUFBSSxDQUFDQyxNQUFNLEdBQUdQLGtCQUFrQlg7UUFDaEMsSUFBSSxDQUFDWSxPQUFPLEdBQUdBO1FBQ2YsSUFBSSxDQUFDTyxLQUFLLEdBQUdQLFFBQVFPLEtBQUs7SUFDNUI7SUFDQWpCLE1BQU07UUFDSixJQUFLLElBQUlrQixPQUFPUCxVQUFVQyxNQUFNLEVBQUVYLE9B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QjtBQUN0RCxNQUFNa1IsaUJBQWlCVyxTQUFTWCxjQUFjO0FBQzlDLE1BQU1DLGdCQUFnQlUsU0FBU1YsYUFBYTtBQUVpSyIsInNvdXJjZXMiOlsid2VicGFjazovL21vZGVybml6ZS1tYWluLy4vbm9kZV9tb2R1bGVzL2kxOG5leHQvZGlzdC9lc20vaTE4bmV4dC5qcz82OGU1Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGNvbnNvbGVMb2dnZXIgPSB7XG4gIHR5cGU6ICdsb2dnZXInLFxuICBsb2coYXJncykge1xuICAgIHRoaXMub3V0cHV0KCdsb2cnLCBhcmdzKTtcbiAgfSxcbiAgd2FybihhcmdzKSB7XG4gICAgdGhpcy5vdXRwdXQoJ3dhcm4nLCBhcmdzKTtcbiAgfSxcbiAgZXJyb3IoYXJncykge1xuICAgIHRoaXMub3V0cHV0KCdlcnJvcicsIGFyZ3MpO1xuICB9LFxuICBvdXRwdXQodHlwZSwgYXJncykge1xuICAgIGlmIChjb25zb2xlICYmIGNvbnNvbGVbdHlwZV0pIGNvbnNvbGVbdHlwZV0uYXBwbHkoY29uc29sZSwgYXJncyk7XG4gIH1cbn07XG5jbGFzcyBMb2dnZXIge1xuICBjb25zdHJ1Y3Rvcihjb25jcmV0ZUxvZ2dlcikge1xuICAgIGxldCBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICB0aGlzLmluaXQoY29uY3JldGVMb2dnZXIsIG9wdGlvbnMpO1xuICB9XG4gIGluaXQoY29uY3JldGVMb2dnZXIpIHtcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgdGhpcy5wcmVmaXggPSBvcHRpb25zLnByZWZpeCB8fCAnaTE4bmV4dDonO1xuICAgIHRoaXMubG9nZ2VyID0gY29uY3JldGVMb2dnZXIgfHwgY29uc29sZUxvZ2dlcjtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMuZGVidWcgPSBvcHRpb25zLmRlYnVnO1xuICB9XG4gIGxvZygpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmZvcndhcmQoYXJncywgJ2xvZycsICcnLCB0cnVlKTtcbiAgfVxuICB3YXJuKCkge1xuICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5mb3J3YXJkKGFyZ3MsICd3YXJuJywgJycsIHRydWUpO1xuICB9XG4gIGVycm9yKCkge1xuICAgIGZvciAodmFyIF9sZW4zID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMyksIF9rZXkzID0gMDsgX2tleTMgPCBfbGVuMzsgX2tleTMrKykge1xuICAgICAgYXJnc1tfa2V5M10gPSBhcmd1bWVudHNbX2tleTNdO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5mb3J3YXJkKGFyZ3MsICdlcnJvcicsICcnKTtcbiAgfVxuICBkZXByZWNhdGUoKSB7XG4gICAgZm9yICh2YXIgX2xlbjQgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW40KSwgX2tleTQgPSAwOyBfa2V5NCA8IF9sZW40OyBfa2V5NCsrKSB7XG4gICAgICBhcmdzW19rZXk0XSA9IGFyZ3VtZW50c1tfa2V5NF07XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmZvcndhcmQoYXJncywgJ3dhcm4nLCAnV0FSTklORyBERVBSRUNBVEVEOiAnLCB0cnVlKTtcbiAgfVxuICBmb3J3YXJkKGFyZ3MsIGx2bCwgcHJlZml4LCBkZWJ1Z09ubHkpIHtcbiAgICBpZiAoZGVidWdPbmx5ICYmICF0aGlzLmRlYnVnKSByZXR1cm4gbnVsbDtcbiAgICBpZiAodHlwZW9mIGFyZ3NbMF0gPT09ICdzdHJpbmcnKSBhcmdzWzBdID0gYCR7cHJlZml4fSR7dGhpcy5wcmVmaXh9ICR7YXJnc1swXX1gO1xuICAgIHJldHVybiB0aGlzLmxvZ2dlcltsdmxdKGFyZ3MpO1xuICB9XG4gIGNyZWF0ZShtb2R1bGVOYW1lKSB7XG4gICAgcmV0dXJuIG5ldyBMb2dnZXIodGhpcy5sb2dnZXIsIHtcbiAgICAgIC4uLntcbiAgICAgICAgcHJlZml4OiBgJHt0aGlzLnByZWZpeH06JHttb2R1bGVOYW1lfTpgXG4gICAgICB9LFxuICAgICAgLi4udGhpcy5vcHRpb25zXG4gICAgfSk7XG4gIH1cbiAgY2xvbmUob3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHRoaXMub3B0aW9ucztcbiAgICBvcHRpb25zLnByZWZpeCA9IG9wdGlvbnMucHJlZml4IHx8IHRoaXMucHJlZml4O1xuICAgIHJldHVybiBuZXcgTG9nZ2VyKHRoaXMubG9nZ2VyLCBvcHRpb25zKTtcbiAgfVxufVxudmFyIGJhc2VMb2dnZXIgPSBuZXcgTG9nZ2VyKCk7XG5cbmNsYXNzIEV2ZW50RW1pdHRlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMub2JzZXJ2ZXJzID0ge307XG4gIH1cbiAgb24oZXZlbnRzLCBsaXN0ZW5lcikge1xuICAgIGV2ZW50cy5zcGxpdCgnICcpLmZvckVhY2goZXZlbnQgPT4ge1xuICAgICAgdGhpcy5vYnNlcnZlcnNbZXZlbnRdID0gdGhpcy5vYnNlcnZlcnNbZXZlbnRdIHx8IFtdO1xuICAgICAgdGhpcy5vYnNlcnZlcnNbZXZlbnRdLnB1c2gobGlzdGVuZXIpO1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIG9mZihldmVudCwgbGlzdGVuZXIpIHtcbiAgICBpZiAoIXRoaXMub2JzZXJ2ZXJzW2V2ZW50XSkgcmV0dXJuO1xuICAgIGlmICghbGlzdGVuZXIpIHtcbiAgICAgIGRlbGV0ZSB0aGlzLm9ic2VydmVyc1tldmVudF07XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMub2JzZXJ2ZXJzW2V2ZW50XSA9IHRoaXMub2JzZXJ2ZXJzW2V2ZW50XS5maWx0ZXIobCA9PiBsICE9PSBsaXN0ZW5lcik7XG4gIH1cbiAgZW1pdChldmVudCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cbiAgICBpZiAodGhpcy5vYnNlcnZlcnNbZXZlbnRdKSB7XG4gICAgICBjb25zdCBjbG9uZWQgPSBbXS5jb25jYXQodGhpcy5vYnNlcnZlcnNbZXZlbnRdKTtcbiAgICAgIGNsb25lZC5mb3JFYWNoKG9ic2VydmVyID0+IHtcbiAgICAgICAgb2JzZXJ2ZXIoLi4uYXJncyk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHRoaXMub2JzZXJ2ZXJzWycqJ10pIHtcbiAgICAgIGNvbnN0IGNsb25lZCA9IFtdLmNvbmNhdCh0aGlzLm9ic2VydmVyc1snKiddKTtcbiAgICAgIGNsb25lZC5mb3JFYWNoKG9ic2VydmVyID0+IHtcbiAgICAgICAgb2JzZXJ2ZXIuYXBwbHkob2JzZXJ2ZXIsIFtldmVudCwgLi4uYXJnc10pO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGRlZmVyKCkge1xuICBsZXQgcmVzO1xuICBsZXQgcmVqO1xuICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIHJlcyA9IHJlc29sdmU7XG4gICAgcmVqID0gcmVqZWN0O1xuICB9KTtcbiAgcHJvbWlzZS5yZXNvbHZlID0gcmVzO1xuICBwcm9taXNlLnJlamVjdCA9IHJlajtcbiAgcmV0dXJuIHByb21pc2U7XG59XG5mdW5jdGlvbiBtYWtlU3RyaW5nKG9iamVjdCkge1xuICBpZiAob2JqZWN0ID09IG51bGwpIHJldHVybiAnJztcbiAgcmV0dXJuICcnICsgb2JqZWN0O1xufVxuZnVuY3Rpb24gY29weShhLCBzLCB0KSB7XG4gIGEuZm9yRWFjaChtID0+IHtcbiAgICBpZiAoc1ttXSkgdFttXSA9IHNbbV07XG4gIH0pO1xufVxuZnVuY3Rpb24gZ2V0TGFzdE9mUGF0aChvYmplY3QsIHBhdGgsIEVtcHR5KSB7XG4gIGZ1bmN0aW9uIGNsZWFuS2V5KGtleSkge1xuICAgIHJldHVybiBrZXkgJiYga2V5LmluZGV4T2YoJyMjIycpID4gLTEgPyBrZXkucmVwbGFjZSgvIyMjL2csICcuJykgOiBrZXk7XG4gIH1cbiAgZnVuY3Rpb24gY2FuTm90VHJhdmVyc2VEZWVwZXIoKSB7XG4gICAgcmV0dXJuICFvYmplY3QgfHwgdHlwZW9mIG9iamVjdCA9PT0gJ3N0cmluZyc7XG4gIH1cbiAgY29uc3Qgc3RhY2sgPSB0eXBlb2YgcGF0aCAhPT0gJ3N0cmluZycgPyBbXS5jb25jYXQocGF0aCkgOiBwYXRoLnNwbGl0KCcuJyk7XG4gIHdoaWxlIChzdGFjay5sZW5ndGggPiAxKSB7XG4gICAgaWYgKGNhbk5vdFRyYXZlcnNlRGVlcGVyKCkpIHJldHVybiB7fTtcbiAgICBjb25zdCBrZXkgPSBjbGVhbktleShzdGFjay5zaGlmdCgpKTtcbiAgICBpZiAoIW9iamVjdFtrZXldICYmIEVtcHR5KSBvYmplY3Rba2V5XSA9IG5ldyBFbXB0eSgpO1xuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSB7XG4gICAgICBvYmplY3QgPSBvYmplY3Rba2V5XTtcbiAgICB9IGVsc2Uge1xuICAgICAgb2JqZWN0ID0ge307XG4gICAgfVxuICB9XG4gIGlmIChjYW5Ob3RUcmF2ZXJzZURlZXBlcigpKSByZXR1cm4ge307XG4gIHJldHVybiB7XG4gICAgb2JqOiBvYmplY3QsXG4gICAgazogY2xlYW5LZXkoc3RhY2suc2hpZnQoKSlcbiAgfTtcbn1cbmZ1bmN0aW9uIHNldFBhdGgob2JqZWN0LCBwYXRoLCBuZXdWYWx1ZSkge1xuICBjb25zdCB7XG4gICAgb2JqLFxuICAgIGtcbiAgfSA9IGdldExhc3RPZlBhdGgob2JqZWN0LCBwYXRoLCBPYmplY3QpO1xuICBvYmpba10gPSBuZXdWYWx1ZTtcbn1cbmZ1bmN0aW9uIHB1c2hQYXRoKG9iamVjdCwgcGF0aCwgbmV3VmFsdWUsIGNvbmNhdCkge1xuICBjb25zdCB7XG4gICAgb2JqLFxuICAgIGtcbiAgfSA9IGdldExhc3RPZlBhdGgob2JqZWN0LCBwYXRoLCBPYmplY3QpO1xuICBvYmpba10gPSBvYmpba10gfHwgW107XG4gIGlmIChjb25jYXQpIG9ialtrXSA9IG9ialtrXS5jb25jYXQobmV3VmFsdWUpO1xuICBpZiAoIWNvbmNhdCkgb2JqW2tdLnB1c2gobmV3VmFsdWUpO1xufVxuZnVuY3Rpb24gZ2V0UGF0aChvYmplY3QsIHBhdGgpIHtcbiAgY29uc3Qge1xuICAgIG9iaixcbiAgICBrXG4gIH0gPSBnZXRMYXN0T2ZQYXRoKG9iamVjdCwgcGF0aCk7XG4gIGlmICghb2JqKSByZXR1cm4gdW5kZWZpbmVkO1xuICByZXR1cm4gb2JqW2tdO1xufVxuZnVuY3Rpb24gZ2V0UGF0aFdpdGhEZWZhdWx0cyhkYXRhLCBkZWZhdWx0RGF0YSwga2V5KSB7XG4gIGNvbnN0IHZhbHVlID0gZ2V0UGF0aChkYXRhLCBrZXkpO1xuICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICByZXR1cm4gZ2V0UGF0aChkZWZhdWx0RGF0YSwga2V5KTtcbn1cbmZ1bmN0aW9uIGRlZXBFeHRlbmQodGFyZ2V0LCBzb3VyY2UsIG92ZXJ3cml0ZSkge1xuICBmb3IgKGNvbnN0IHByb3AgaW4gc291cmNlKSB7XG4gICAgaWYgKHByb3AgIT09ICdfX3Byb3RvX18nICYmIHByb3AgIT09ICdjb25zdHJ1Y3RvcicpIHtcbiAgICAgIGlmIChwcm9wIGluIHRhcmdldCkge1xuICAgICAgICBpZiAodHlwZW9mIHRhcmdldFtwcm9wXSA9PT0gJ3N0cmluZycgfHwgdGFyZ2V0W3Byb3BdIGluc3RhbmNlb2YgU3RyaW5nIHx8IHR5cGVvZiBzb3VyY2VbcHJvcF0gPT09ICdzdHJpbmcnIHx8IHNvdXJjZVtwcm9wXSBpbnN0YW5jZW9mIFN0cmluZykge1xuICAgICAgICAgIGlmIChvdmVyd3JpdGUpIHRhcmdldFtwcm9wXSA9IHNvdXJjZVtwcm9wXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkZWVwRXh0ZW5kKHRhcmdldFtwcm9wXSwgc291cmNlW3Byb3BdLCBvdmVyd3JpdGUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0YXJnZXRbcHJvcF0gPSBzb3VyY2VbcHJvcF07XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB0YXJnZXQ7XG59XG5mdW5jdGlvbiByZWdleEVzY2FwZShzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9bXFwtXFxbXFxdXFwvXFx7XFx9XFwoXFwpXFwqXFwrXFw/XFwuXFxcXFxcXlxcJFxcfF0vZywgJ1xcXFwkJicpO1xufVxudmFyIF9lbnRpdHlNYXAgPSB7XG4gICcmJzogJyZhbXA7JyxcbiAgJzwnOiAnJmx0OycsXG4gICc+JzogJyZndDsnLFxuICAnXCInOiAnJnF1b3Q7JyxcbiAgXCInXCI6ICcmIzM5OycsXG4gICcvJzogJyYjeDJGOydcbn07XG5mdW5jdGlvbiBlc2NhcGUoZGF0YSkge1xuICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGRhdGEucmVwbGFjZSgvWyY8PlwiJ1xcL10vZywgcyA9PiBfZW50aXR5TWFwW3NdKTtcbiAgfVxuICByZXR1cm4gZGF0YTtcbn1cbmNvbnN0IGNoYXJzID0gWycgJywgJywnLCAnPycsICchJywgJzsnXTtcbmZ1bmN0aW9uIGxvb2tzTGlrZU9iamVjdFBhdGgoa2V5LCBuc1NlcGFyYXRvciwga2V5U2VwYXJhdG9yKSB7XG4gIG5zU2VwYXJhdG9yID0gbnNTZXBhcmF0b3IgfHwgJyc7XG4gIGtleVNlcGFyYXRvciA9IGtleVNlcGFyYXRvciB8fCAnJztcbiAgY29uc3QgcG9zc2libGVDaGFycyA9IGNoYXJzLmZpbHRlcihjID0+IG5zU2VwYXJhdG9yLmluZGV4T2YoYykgPCAwICYmIGtleVNlcGFyYXRvci5pbmRleE9mKGMpIDwgMCk7XG4gIGlmIChwb3NzaWJsZUNoYXJzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHRydWU7XG4gIGNvbnN0IHIgPSBuZXcgUmVnRXhwKGAoJHtwb3NzaWJsZUNoYXJzLm1hcChjID0+IGMgPT09ICc/JyA/ICdcXFxcPycgOiBjKS5qb2luKCd8Jyl9KWApO1xuICBsZXQgbWF0Y2hlZCA9ICFyLnRlc3Qoa2V5KTtcbiAgaWYgKCFtYXRjaGVkKSB7XG4gICAgY29uc3Qga2kgPSBrZXkuaW5kZXhPZihrZXlTZXBhcmF0b3IpO1xuICAgIGlmIChraSA+IDAgJiYgIXIudGVzdChrZXkuc3Vic3RyaW5nKDAsIGtpKSkpIHtcbiAgICAgIG1hdGNoZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbWF0Y2hlZDtcbn1cbmZ1bmN0aW9uIGRlZXBGaW5kKG9iaiwgcGF0aCkge1xuICBsZXQga2V5U2VwYXJhdG9yID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAnLic7XG4gIGlmICghb2JqKSByZXR1cm4gdW5kZWZpbmVkO1xuICBpZiAob2JqW3BhdGhdKSByZXR1cm4gb2JqW3BhdGhdO1xuICBjb25zdCBwYXRocyA9IHBhdGguc3BsaXQoa2V5U2VwYXJhdG9yKTtcbiAgbGV0IGN1cnJlbnQgPSBvYmo7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcGF0aHMubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoIWN1cnJlbnQpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgaWYgKHR5cGVvZiBjdXJyZW50W3BhdGhzW2ldXSA9PT0gJ3N0cmluZycgJiYgaSArIDEgPCBwYXRocy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmIChjdXJyZW50W3BhdGhzW2ldXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBsZXQgaiA9IDI7XG4gICAgICBsZXQgcCA9IHBhdGhzLnNsaWNlKGksIGkgKyBqKS5qb2luKGtleVNlcGFyYXRvcik7XG4gICAgICBsZXQgbWl4ID0gY3VycmVudFtwXTtcbiAgICAgIHdoaWxlIChtaXggPT09IHVuZGVmaW5lZCAmJiBwYXRocy5sZW5ndGggPiBpICsgaikge1xuICAgICAgICBqKys7XG4gICAgICAgIHAgPSBwYXRocy5zbGljZShpLCBpICsgaikuam9pbihrZXlTZXBhcmF0b3IpO1xuICAgICAgICBtaXggPSBjdXJyZW50W3BdO1xuICAgICAgfVxuICAgICAgaWYgKG1peCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgaWYgKG1peCA9PT0gbnVsbCkgcmV0dXJuIG51bGw7XG4gICAgICBpZiAocGF0aC5lbmRzV2l0aChwKSkge1xuICAgICAgICBpZiAodHlwZW9mIG1peCA9PT0gJ3N0cmluZycpIHJldHVybiBtaXg7XG4gICAgICAgIGlmIChwICYmIHR5cGVvZiBtaXhbcF0gPT09ICdzdHJpbmcnKSByZXR1cm4gbWl4W3BdO1xuICAgICAgfVxuICAgICAgY29uc3Qgam9pbmVkUGF0aCA9IHBhdGhzLnNsaWNlKGkgKyBqKS5qb2luKGtleVNlcGFyYXRvcik7XG4gICAgICBpZiAoam9pbmVkUGF0aCkgcmV0dXJuIGRlZXBGaW5kKG1peCwgam9pbmVkUGF0aCwga2V5U2VwYXJhdG9yKTtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGN1cnJlbnQgPSBjdXJyZW50W3BhdGhzW2ldXTtcbiAgfVxuICByZXR1cm4gY3VycmVudDtcbn1cbmZ1bmN0aW9uIGdldENsZWFuZWRDb2RlKGNvZGUpIHtcbiAgaWYgKGNvZGUgJiYgY29kZS5pbmRleE9mKCdfJykgPiAwKSByZXR1cm4gY29kZS5yZXBsYWNlKCdfJywgJy0nKTtcbiAgcmV0dXJuIGNvZGU7XG59XG5cbmNsYXNzIFJlc291cmNlU3RvcmUgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICBjb25zdHJ1Y3RvcihkYXRhKSB7XG4gICAgbGV0IG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHtcbiAgICAgIG5zOiBbJ3RyYW5zbGF0aW9uJ10sXG4gICAgICBkZWZhdWx0TlM6ICd0cmFuc2xhdGlvbidcbiAgICB9O1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5kYXRhID0gZGF0YSB8fCB7fTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIGlmICh0aGlzLm9wdGlvbnMua2V5U2VwYXJhdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5rZXlTZXBhcmF0b3IgPSAnLic7XG4gICAgfVxuICAgIGlmICh0aGlzLm9wdGlvbnMuaWdub3JlSlNPTlN0cnVjdHVyZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLm9wdGlvbnMuaWdub3JlSlNPTlN0cnVjdHVyZSA9IHRydWU7XG4gICAgfVxuICB9XG4gIGFkZE5hbWVzcGFjZXMobnMpIHtcbiAgICBpZiAodGhpcy5vcHRpb25zLm5zLmluZGV4T2YobnMpIDwgMCkge1xuICAgICAgdGhpcy5vcHRpb25zLm5zLnB1c2gobnMpO1xuICAgIH1cbiAgfVxuICByZW1vdmVOYW1lc3BhY2VzKG5zKSB7XG4gICAgY29uc3QgaW5kZXggPSB0aGlzLm9wdGlvbnMubnMuaW5kZXhPZihucyk7XG4gICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5ucy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbiAgfVxuICBnZXRSZXNvdXJjZShsbmcsIG5zLCBrZXkpIHtcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDoge307XG4gICAgY29uc3Qga2V5U2VwYXJhdG9yID0gb3B0aW9ucy5rZXlTZXBhcmF0b3IgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMua2V5U2VwYXJhdG9yIDogdGhpcy5vcHRpb25zLmtleVNlcGFyYXRvcjtcbiAgICBjb25zdCBpZ25vcmVKU09OU3RydWN0dXJlID0gb3B0aW9ucy5pZ25vcmVKU09OU3RydWN0dXJlICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmlnbm9yZUpTT05TdHJ1Y3R1cmUgOiB0aGlzLm9wdGlvbnMuaWdub3JlSlNPTlN0cnVjdHVyZTtcbiAgICBsZXQgcGF0aCA9IFtsbmcsIG5zXTtcbiAgICBpZiAoa2V5ICYmIHR5cGVvZiBrZXkgIT09ICdzdHJpbmcnKSBwYXRoID0gcGF0aC5jb25jYXQoa2V5KTtcbiAgICBpZiAoa2V5ICYmIHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnKSBwYXRoID0gcGF0aC5jb25jYXQoa2V5U2VwYXJhdG9yID8ga2V5LnNwbGl0KGtleVNlcGFyYXRvcikgOiBrZXkpO1xuICAgIGlmIChsbmcuaW5kZXhPZignLicpID4gLTEpIHtcbiAgICAgIHBhdGggPSBsbmcuc3BsaXQoJy4nKTtcbiAgICB9XG4gICAgY29uc3QgcmVzdWx0ID0gZ2V0UGF0aCh0aGlzLmRhdGEsIHBhdGgpO1xuICAgIGlmIChyZXN1bHQgfHwgIWlnbm9yZUpTT05TdHJ1Y3R1cmUgfHwgdHlwZW9mIGtleSAhPT0gJ3N0cmluZycpIHJldHVybiByZXN1bHQ7XG4gICAgcmV0dXJuIGRlZXBGaW5kKHRoaXMuZGF0YSAmJiB0aGlzLmRhdGFbbG5nXSAmJiB0aGlzLmRhdGFbbG5nXVtuc10sIGtleSwga2V5U2VwYXJhdG9yKTtcbiAgfVxuICBhZGRSZXNvdXJjZShsbmcsIG5zLCBrZXksIHZhbHVlKSB7XG4gICAgbGV0IG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IHtcbiAgICAgIHNpbGVudDogZmFsc2VcbiAgICB9O1xuICAgIGNvbnN0IGtleVNlcGFyYXRvciA9IG9wdGlvbnMua2V5U2VwYXJhdG9yICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmtleVNlcGFyYXRvciA6IHRoaXMub3B0aW9ucy5rZXlTZXBhcmF0b3I7XG4gICAgbGV0IHBhdGggPSBbbG5nLCBuc107XG4gICAgaWYgKGtleSkgcGF0aCA9IHBhdGguY29uY2F0KGtleVNlcGFyYXRvciA/IGtleS5zcGxpdChrZXlTZXBhcmF0b3IpIDoga2V5KTtcbiAgICBpZiAobG5nLmluZGV4T2YoJy4nKSA+IC0xKSB7XG4gICAgICBwYXRoID0gbG5nLnNwbGl0KCcuJyk7XG4gICAgICB2YWx1ZSA9IG5zO1xuICAgICAgbnMgPSBwYXRoWzFdO1xuICAgIH1cbiAgICB0aGlzLmFkZE5hbWVzcGFjZXMobnMpO1xuICAgIHNldFBhdGgodGhpcy5kYXRhLCBwYXRoLCB2YWx1ZSk7XG4gICAgaWYgKCFvcHRpb25zLnNpbGVudCkgdGhpcy5lbWl0KCdhZGRlZCcsIGxuZywgbnMsIGtleSwgdmFsdWUpO1xuICB9XG4gIGFkZFJlc291cmNlcyhsbmcsIG5zLCByZXNvdXJjZXMpIHtcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDoge1xuICAgICAgc2lsZW50OiBmYWxzZVxuICAgIH07XG4gICAgZm9yIChjb25zdCBtIGluIHJlc291cmNlcykge1xuICAgICAgaWYgKHR5cGVvZiByZXNvdXJjZXNbbV0gPT09ICdzdHJpbmcnIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuYXBwbHkocmVzb3VyY2VzW21dKSA9PT0gJ1tvYmplY3QgQXJyYXldJykgdGhpcy5hZGRSZXNvdXJjZShsbmcsIG5zLCBtLCByZXNvdXJjZXNbbV0sIHtcbiAgICAgICAgc2lsZW50OiB0cnVlXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKCFvcHRpb25zLnNpbGVudCkgdGhpcy5lbWl0KCdhZGRlZCcsIGxuZywgbnMsIHJlc291cmNlcyk7XG4gIH1cbiAgYWRkUmVzb3VyY2VCdW5kbGUobG5nLCBucywgcmVzb3VyY2VzLCBkZWVwLCBvdmVyd3JpdGUpIHtcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiA1ICYmIGFyZ3VtZW50c1s1XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzVdIDoge1xuICAgICAgc2lsZW50OiBmYWxzZVxuICAgIH07XG4gICAgbGV0IHBhdGggPSBbbG5nLCBuc107XG4gICAgaWYgKGxuZy5pbmRleE9mKCcuJykgPiAtMSkge1xuICAgICAgcGF0aCA9IGxuZy5zcGxpdCgnLicpO1xuICAgICAgZGVlcCA9IHJlc291cmNlcztcbiAgICAgIHJlc291cmNlcyA9IG5zO1xuICAgICAgbnMgPSBwYXRoWzFdO1xuICAgIH1cbiAgICB0aGlzLmFkZE5hbWVzcGFjZXMobnMpO1xuICAgIGxldCBwYWNrID0gZ2V0UGF0aCh0aGlzLmRhdGEsIHBhdGgpIHx8IHt9O1xuICAgIGlmIChkZWVwKSB7XG4gICAgICBkZWVwRXh0ZW5kKHBhY2ssIHJlc291cmNlcywgb3ZlcndyaXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFjayA9IHtcbiAgICAgICAgLi4ucGFjayxcbiAgICAgICAgLi4ucmVzb3VyY2VzXG4gICAgICB9O1xuICAgIH1cbiAgICBzZXRQYXRoKHRoaXMuZGF0YSwgcGF0aCwgcGFjayk7XG4gICAgaWYgKCFvcHRpb25zLnNpbGVudCkgdGhpcy5lbWl0KCdhZGRlZCcsIGxuZywgbnMsIHJlc291cmNlcyk7XG4gIH1cbiAgcmVtb3ZlUmVzb3VyY2VCdW5kbGUobG5nLCBucykge1xuICAgIGlmICh0aGlzLmhhc1Jlc291cmNlQnVuZGxlKGxuZywgbnMpKSB7XG4gICAgICBkZWxldGUgdGhpcy5kYXRhW2xuZ11bbnNdO1xuICAgIH1cbiAgICB0aGlzLnJlbW92ZU5hbWVzcGFjZXMobnMpO1xuICAgIHRoaXMuZW1pdCgncmVtb3ZlZCcsIGxuZywgbnMpO1xuICB9XG4gIGhhc1Jlc291cmNlQnVuZGxlKGxuZywgbnMpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRSZXNvdXJjZShsbmcsIG5zKSAhPT0gdW5kZWZpbmVkO1xuICB9XG4gIGdldFJlc291cmNlQnVuZGxlKGxuZywgbnMpIHtcbiAgICBpZiAoIW5zKSBucyA9IHRoaXMub3B0aW9ucy5kZWZhdWx0TlM7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5jb21wYXRpYmlsaXR5QVBJID09PSAndjEnKSByZXR1cm4ge1xuICAgICAgLi4ue30sXG4gICAgICAuLi50aGlzLmdldFJlc291cmNlKGxuZywgbnMpXG4gICAgfTtcbiAgICByZXR1cm4gdGhpcy5nZXRSZXNvdXJjZShsbmcsIG5zKTtcbiAgfVxuICBnZXREYXRhQnlMYW5ndWFnZShsbmcpIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhW2xuZ107XG4gIH1cbiAgaGFzTGFuZ3VhZ2VTb21lVHJhbnNsYXRpb25zKGxuZykge1xuICAgIGNvbnN0IGRhdGEgPSB0aGlzLmdldERhdGFCeUxhbmd1YWdlKGxuZyk7XG4gICAgY29uc3QgbiA9IGRhdGEgJiYgT2JqZWN0LmtleXMoZGF0YSkgfHwgW107XG4gICAgcmV0dXJuICEhbi5maW5kKHYgPT4gZGF0YVt2XSAmJiBPYmplY3Qua2V5cyhkYXRhW3ZdKS5sZW5ndGggPiAwKTtcbiAgfVxuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YTtcbiAgfVxufVxuXG52YXIgcG9zdFByb2Nlc3NvciA9IHtcbiAgcHJvY2Vzc29yczoge30sXG4gIGFkZFBvc3RQcm9jZXNzb3IobW9kdWxlKSB7XG4gICAgdGhpcy5wcm9jZXNzb3JzW21vZHVsZS5uYW1lXSA9IG1vZHVsZTtcbiAgfSxcbiAgaGFuZGxlKHByb2Nlc3NvcnMsIHZhbHVlLCBrZXksIG9wdGlvbnMsIHRyYW5zbGF0b3IpIHtcbiAgICBwcm9jZXNzb3JzLmZvckVhY2gocHJvY2Vzc29yID0+IHtcbiAgICAgIGlmICh0aGlzLnByb2Nlc3NvcnNbcHJvY2Vzc29yXSkgdmFsdWUgPSB0aGlzLnByb2Nlc3NvcnNbcHJvY2Vzc29yXS5wcm9jZXNzKHZhbHVlLCBrZXksIG9wdGlvbnMsIHRyYW5zbGF0b3IpO1xuICAgIH0pO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufTtcblxuY29uc3QgY2hlY2tlZExvYWRlZEZvciA9IHt9O1xuY2xhc3MgVHJhbnNsYXRvciBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gIGNvbnN0cnVjdG9yKHNlcnZpY2VzKSB7XG4gICAgbGV0IG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIHN1cGVyKCk7XG4gICAgY29weShbJ3Jlc291cmNlU3RvcmUnLCAnbGFuZ3VhZ2VVdGlscycsICdwbHVyYWxSZXNvbHZlcicsICdpbnRlcnBvbGF0b3InLCAnYmFja2VuZENvbm5lY3RvcicsICdpMThuRm9ybWF0JywgJ3V0aWxzJ10sIHNlcnZpY2VzLCB0aGlzKTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIGlmICh0aGlzLm9wdGlvbnMua2V5U2VwYXJhdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5rZXlTZXBhcmF0b3IgPSAnLic7XG4gICAgfVxuICAgIHRoaXMubG9nZ2VyID0gYmFzZUxvZ2dlci5jcmVhdGUoJ3RyYW5zbGF0b3InKTtcbiAgfVxuICBjaGFuZ2VMYW5ndWFnZShsbmcpIHtcbiAgICBpZiAobG5nKSB0aGlzLmxhbmd1YWdlID0gbG5nO1xuICB9XG4gIGV4aXN0cyhrZXkpIHtcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge1xuICAgICAgaW50ZXJwb2xhdGlvbjoge31cbiAgICB9O1xuICAgIGlmIChrZXkgPT09IHVuZGVmaW5lZCB8fCBrZXkgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgcmVzb2x2ZWQgPSB0aGlzLnJlc29sdmUoa2V5LCBvcHRpb25zKTtcbiAgICByZXR1cm4gcmVzb2x2ZWQgJiYgcmVzb2x2ZWQucmVzICE9PSB1bmRlZmluZWQ7XG4gIH1cbiAgZXh0cmFjdEZyb21LZXkoa2V5LCBvcHRpb25zKSB7XG4gICAgbGV0IG5zU2VwYXJhdG9yID0gb3B0aW9ucy5uc1NlcGFyYXRvciAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5uc1NlcGFyYXRvciA6IHRoaXMub3B0aW9ucy5uc1NlcGFyYXRvcjtcbiAgICBpZiAobnNTZXBhcmF0b3IgPT09IHVuZGVmaW5lZCkgbnNTZXBhcmF0b3IgPSAnOic7XG4gICAgY29uc3Qga2V5U2VwYXJhdG9yID0gb3B0aW9ucy5rZXlTZXBhcmF0b3IgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMua2V5U2VwYXJhdG9yIDogdGhpcy5vcHRpb25zLmtleVNlcGFyYXRvcjtcbiAgICBsZXQgbmFtZXNwYWNlcyA9IG9wdGlvbnMubnMgfHwgdGhpcy5vcHRpb25zLmRlZmF1bHROUyB8fCBbXTtcbiAgICBjb25zdCB3b3VsZENoZWNrRm9yTnNJbktleSA9IG5zU2VwYXJhdG9yICYmIGtleS5pbmRleE9mKG5zU2VwYXJhdG9yKSA+IC0xO1xuICAgIGNvbnN0IHNlZW1zTmF0dXJhbExhbmd1YWdlID0gIXRoaXMub3B0aW9ucy51c2VyRGVmaW5lZEtleVNlcGFyYXRvciAmJiAhb3B0aW9ucy5rZXlTZXBhcmF0b3IgJiYgIXRoaXMub3B0aW9ucy51c2VyRGVmaW5lZE5zU2VwYXJhdG9yICYmICFvcHRpb25zLm5zU2VwYXJhdG9yICYmICFsb29rc0xpa2VPYmplY3RQYXRoKGtleSwgbnNTZXBhcmF0b3IsIGtleVNlcGFyYXRvcik7XG4gICAgaWYgKHdvdWxkQ2hlY2tGb3JOc0luS2V5ICYmICFzZWVtc05hdHVyYWxMYW5ndWFnZSkge1xuICAgICAgY29uc3QgbSA9IGtleS5tYXRjaCh0aGlzLmludGVycG9sYXRvci5uZXN0aW5nUmVnZXhwKTtcbiAgICAgIGlmIChtICYmIG0ubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGtleSxcbiAgICAgICAgICBuYW1lc3BhY2VzXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBjb25zdCBwYXJ0cyA9IGtleS5zcGxpdChuc1NlcGFyYXRvcik7XG4gICAgICBpZiAobnNTZXBhcmF0b3IgIT09IGtleVNlcGFyYXRvciB8fCBuc1NlcGFyYXRvciA9PT0ga2V5U2VwYXJhdG9yICYmIHRoaXMub3B0aW9ucy5ucy5pbmRleE9mKHBhcnRzWzBdKSA+IC0xKSBuYW1lc3BhY2VzID0gcGFydHMuc2hpZnQoKTtcbiAgICAgIGtleSA9IHBhcnRzLmpvaW4oa2V5U2VwYXJhdG9yKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBuYW1lc3BhY2VzID09PSAnc3RyaW5nJykgbmFtZXNwYWNlcyA9IFtuYW1lc3BhY2VzXTtcbiAgICByZXR1cm4ge1xuICAgICAga2V5LFxuICAgICAgbmFtZXNwYWNlc1xuICAgIH07XG4gIH1cbiAgdHJhbnNsYXRlKGtleXMsIG9wdGlvbnMsIGxhc3RLZXkpIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnICYmIHRoaXMub3B0aW9ucy5vdmVybG9hZFRyYW5zbGF0aW9uT3B0aW9uSGFuZGxlcikge1xuICAgICAgb3B0aW9ucyA9IHRoaXMub3B0aW9ucy5vdmVybG9hZFRyYW5zbGF0aW9uT3B0aW9uSGFuZGxlcihhcmd1bWVudHMpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdvYmplY3QnKSBvcHRpb25zID0ge1xuICAgICAgLi4ub3B0aW9uc1xuICAgIH07XG4gICAgaWYgKCFvcHRpb25zKSBvcHRpb25zID0ge307XG4gICAgaWYgKGtleXMgPT09IHVuZGVmaW5lZCB8fCBrZXlzID09PSBudWxsKSByZXR1cm4gJyc7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGtleXMpKSBrZXlzID0gW1N0cmluZyhrZXlzKV07XG4gICAgY29uc3QgcmV0dXJuRGV0YWlscyA9IG9wdGlvbnMucmV0dXJuRGV0YWlscyAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5yZXR1cm5EZXRhaWxzIDogdGhpcy5vcHRpb25zLnJldHVybkRldGFpbHM7XG4gICAgY29uc3Qga2V5U2VwYXJhdG9yID0gb3B0aW9ucy5rZXlTZXBhcmF0b3IgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMua2V5U2VwYXJhdG9yIDogdGhpcy5vcHRpb25zLmtleVNlcGFyYXRvcjtcbiAgICBjb25zdCB7XG4gICAgICBrZXksXG4gICAgICBuYW1lc3BhY2VzXG4gICAgfSA9IHRoaXMuZXh0cmFjdEZyb21LZXkoa2V5c1trZXlzLmxlbmd0aCAtIDFdLCBvcHRpb25zKTtcbiAgICBjb25zdCBuYW1lc3BhY2UgPSBuYW1lc3BhY2VzW25hbWVzcGFjZXMubGVuZ3RoIC0gMV07XG4gICAgY29uc3QgbG5nID0gb3B0aW9ucy5sbmcgfHwgdGhpcy5sYW5ndWFnZTtcbiAgICBjb25zdCBhcHBlbmROYW1lc3BhY2VUb0NJTW9kZSA9IG9wdGlvbnMuYXBwZW5kTmFtZXNwYWNlVG9DSU1vZGUgfHwgdGhpcy5vcHRpb25zLmFwcGVuZE5hbWVzcGFjZVRvQ0lNb2RlO1xuICAgIGlmIChsbmcgJiYgbG5nLnRvTG93ZXJDYXNlKCkgPT09ICdjaW1vZGUnKSB7XG4gICAgICBpZiAoYXBwZW5kTmFtZXNwYWNlVG9DSU1vZGUpIHtcbiAgICAgICAgY29uc3QgbnNTZXBhcmF0b3IgPSBvcHRpb25zLm5zU2VwYXJhdG9yIHx8IHRoaXMub3B0aW9ucy5uc1NlcGFyYXRvcjtcbiAgICAgICAgaWYgKHJldHVybkRldGFpbHMpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzOiBgJHtuYW1lc3BhY2V9JHtuc1NlcGFyYXRvcn0ke2tleX1gLFxuICAgICAgICAgICAgdXNlZEtleToga2V5LFxuICAgICAgICAgICAgZXhhY3RVc2VkS2V5OiBrZXksXG4gICAgICAgICAgICB1c2VkTG5nOiBsbmcsXG4gICAgICAgICAgICB1c2VkTlM6IG5hbWVzcGFjZSxcbiAgICAgICAgICAgIHVzZWRQYXJhbXM6IHRoaXMuZ2V0VXNlZFBhcmFtc0RldGFpbHMob3B0aW9ucylcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBgJHtuYW1lc3BhY2V9JHtuc1NlcGFyYXRvcn0ke2tleX1gO1xuICAgICAgfVxuICAgICAgaWYgKHJldHVybkRldGFpbHMpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICByZXM6IGtleSxcbiAgICAgICAgICB1c2VkS2V5OiBrZXksXG4gICAgICAgICAgZXhhY3RVc2VkS2V5OiBrZXksXG4gICAgICAgICAgdXNlZExuZzogbG5nLFxuICAgICAgICAgIHVzZWROUzogbmFtZXNwYWNlLFxuICAgICAgICAgIHVzZWRQYXJhbXM6IHRoaXMuZ2V0VXNlZFBhcmFtc0RldGFpbHMob3B0aW9ucylcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuICAgIGNvbnN0IHJlc29sdmVkID0gdGhpcy5yZXNvbHZlKGtleXMsIG9wdGlvbnMpO1xuICAgIGxldCByZXMgPSByZXNvbHZlZCAmJiByZXNvbHZlZC5yZXM7XG4gICAgY29uc3QgcmVzVXNlZEtleSA9IHJlc29sdmVkICYmIHJlc29sdmVkLnVzZWRLZXkgfHwga2V5O1xuICAgIGNvbnN0IHJlc0V4YWN0VXNlZEtleSA9IHJlc29sdmVkICYmIHJlc29sdmVkLmV4YWN0VXNlZEtleSB8fCBrZXk7XG4gICAgY29uc3QgcmVzVHlwZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuYXBwbHkocmVzKTtcbiAgICBjb25zdCBub09iamVjdCA9IFsnW29iamVjdCBOdW1iZXJdJywgJ1tvYmplY3QgRnVuY3Rpb25dJywgJ1tvYmplY3QgUmVnRXhwXSddO1xuICAgIGNvbnN0IGpvaW5BcnJheXMgPSBvcHRpb25zLmpvaW5BcnJheXMgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuam9pbkFycmF5cyA6IHRoaXMub3B0aW9ucy5qb2luQXJyYXlzO1xuICAgIGNvbnN0IGhhbmRsZUFzT2JqZWN0SW5JMThuRm9ybWF0ID0gIXRoaXMuaTE4bkZvcm1hdCB8fCB0aGlzLmkxOG5Gb3JtYXQuaGFuZGxlQXNPYmplY3Q7XG4gICAgY29uc3QgaGFuZGxlQXNPYmplY3QgPSB0eXBlb2YgcmVzICE9PSAnc3RyaW5nJyAmJiB0eXBlb2YgcmVzICE9PSAnYm9vbGVhbicgJiYgdHlwZW9mIHJlcyAhPT0gJ251bWJlcic7XG4gICAgaWYgKGhhbmRsZUFzT2JqZWN0SW5JMThuRm9ybWF0ICYmIHJlcyAmJiBoYW5kbGVBc09iamVjdCAmJiBub09iamVjdC5pbmRleE9mKHJlc1R5cGUpIDwgMCAmJiAhKHR5cGVvZiBqb2luQXJyYXlzID09PSAnc3RyaW5nJyAmJiByZXNUeXBlID09PSAnW29iamVjdCBBcnJheV0nKSkge1xuICAgICAgaWYgKCFvcHRpb25zLnJldHVybk9iamVjdHMgJiYgIXRoaXMub3B0aW9ucy5yZXR1cm5PYmplY3RzKSB7XG4gICAgICAgIGlmICghdGhpcy5vcHRpb25zLnJldHVybmVkT2JqZWN0SGFuZGxlcikge1xuICAgICAgICAgIHRoaXMubG9nZ2VyLndhcm4oJ2FjY2Vzc2luZyBhbiBvYmplY3QgLSBidXQgcmV0dXJuT2JqZWN0cyBvcHRpb25zIGlzIG5vdCBlbmFibGVkIScpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHIgPSB0aGlzLm9wdGlvbnMucmV0dXJuZWRPYmplY3RIYW5kbGVyID8gdGhpcy5vcHRpb25zLnJldHVybmVkT2JqZWN0SGFuZGxlcihyZXNVc2VkS2V5LCByZXMsIHtcbiAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgIG5zOiBuYW1lc3BhY2VzXG4gICAgICAgIH0pIDogYGtleSAnJHtrZXl9ICgke3RoaXMubGFuZ3VhZ2V9KScgcmV0dXJuZWQgYW4gb2JqZWN0IGluc3RlYWQgb2Ygc3RyaW5nLmA7XG4gICAgICAgIGlmIChyZXR1cm5EZXRhaWxzKSB7XG4gICAgICAgICAgcmVzb2x2ZWQucmVzID0gcjtcbiAgICAgICAgICByZXNvbHZlZC51c2VkUGFyYW1zID0gdGhpcy5nZXRVc2VkUGFyYW1zRGV0YWlscyhvcHRpb25zKTtcbiAgICAgICAgICByZXR1cm4gcmVzb2x2ZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHI7XG4gICAgICB9XG4gICAgICBpZiAoa2V5U2VwYXJhdG9yKSB7XG4gICAgICAgIGNvbnN0IHJlc1R5cGVJc0FycmF5ID0gcmVzVHlwZSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbiAgICAgICAgY29uc3QgY29weSA9IHJlc1R5cGVJc0FycmF5ID8gW10gOiB7fTtcbiAgICAgICAgY29uc3QgbmV3S2V5VG9Vc2UgPSByZXNUeXBlSXNBcnJheSA/IHJlc0V4YWN0VXNlZEtleSA6IHJlc1VzZWRLZXk7XG4gICAgICAgIGZvciAoY29uc3QgbSBpbiByZXMpIHtcbiAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHJlcywgbSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGRlZXBLZXkgPSBgJHtuZXdLZXlUb1VzZX0ke2tleVNlcGFyYXRvcn0ke219YDtcbiAgICAgICAgICAgIGNvcHlbbV0gPSB0aGlzLnRyYW5zbGF0ZShkZWVwS2V5LCB7XG4gICAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICAgIC4uLntcbiAgICAgICAgICAgICAgICBqb2luQXJyYXlzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBuczogbmFtZXNwYWNlc1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChjb3B5W21dID09PSBkZWVwS2V5KSBjb3B5W21dID0gcmVzW21dO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXMgPSBjb3B5O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaGFuZGxlQXNPYmplY3RJbkkxOG5Gb3JtYXQgJiYgdHlwZW9mIGpvaW5BcnJheXMgPT09ICdzdHJpbmcnICYmIHJlc1R5cGUgPT09ICdbb2JqZWN0IEFycmF5XScpIHtcbiAgICAgIHJlcyA9IHJlcy5qb2luKGpvaW5BcnJheXMpO1xuICAgICAgaWYgKHJlcykgcmVzID0gdGhpcy5leHRlbmRUcmFuc2xhdGlvbihyZXMsIGtleXMsIG9wdGlvbnMsIGxhc3RLZXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgdXNlZERlZmF1bHQgPSBmYWxzZTtcbiAgICAgIGxldCB1c2VkS2V5ID0gZmFsc2U7XG4gICAgICBjb25zdCBuZWVkc1BsdXJhbEhhbmRsaW5nID0gb3B0aW9ucy5jb3VudCAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvcHRpb25zLmNvdW50ICE9PSAnc3RyaW5nJztcbiAgICAgIGNvbnN0IGhhc0RlZmF1bHRWYWx1ZSA9IFRyYW5zbGF0b3IuaGFzRGVmYXVsdFZhbHVlKG9wdGlvbnMpO1xuICAgICAgY29uc3QgZGVmYXVsdFZhbHVlU3VmZml4ID0gbmVlZHNQbHVyYWxIYW5kbGluZyA/IHRoaXMucGx1cmFsUmVzb2x2ZXIuZ2V0U3VmZml4KGxuZywgb3B0aW9ucy5jb3VudCwgb3B0aW9ucykgOiAnJztcbiAgICAgIGNvbnN0IGRlZmF1bHRWYWx1ZVN1ZmZpeE9yZGluYWxGYWxsYmFjayA9IG9wdGlvbnMub3JkaW5hbCAmJiBuZWVkc1BsdXJhbEhhbmRsaW5nID8gdGhpcy5wbHVyYWxSZXNvbHZlci5nZXRTdWZmaXgobG5nLCBvcHRpb25zLmNvdW50LCB7XG4gICAgICAgIG9yZGluYWw6IGZhbHNlXG4gICAgICB9KSA6ICcnO1xuICAgICAgY29uc3QgZGVmYXVsdFZhbHVlID0gb3B0aW9uc1tgZGVmYXVsdFZhbHVlJHtkZWZhdWx0VmFsdWVTdWZmaXh9YF0gfHwgb3B0aW9uc1tgZGVmYXVsdFZhbHVlJHtkZWZhdWx0VmFsdWVTdWZmaXhPcmRpbmFsRmFsbGJhY2t9YF0gfHwgb3B0aW9ucy5kZWZhdWx0VmFsdWU7XG4gICAgICBpZiAoIXRoaXMuaXNWYWxpZExvb2t1cChyZXMpICYmIGhhc0RlZmF1bHRWYWx1ZSkge1xuICAgICAgICB1c2VkRGVmYXVsdCA9IHRydWU7XG4gICAgICAgIHJlcyA9IGRlZmF1bHRWYWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmICghdGhpcy5pc1ZhbGlkTG9va3VwKHJlcykpIHtcbiAgICAgICAgdXNlZEtleSA9IHRydWU7XG4gICAgICAgIHJlcyA9IGtleTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG1pc3NpbmdLZXlOb1ZhbHVlRmFsbGJhY2tUb0tleSA9IG9wdGlvbnMubWlzc2luZ0tleU5vVmFsdWVGYWxsYmFja1RvS2V5IHx8IHRoaXMub3B0aW9ucy5taXNzaW5nS2V5Tm9WYWx1ZUZhbGxiYWNrVG9LZXk7XG4gICAgICBjb25zdCByZXNGb3JNaXNzaW5nID0gbWlzc2luZ0tleU5vVmFsdWVGYWxsYmFja1RvS2V5ICYmIHVzZWRLZXkgPyB1bmRlZmluZWQgOiByZXM7XG4gICAgICBjb25zdCB1cGRhdGVNaXNzaW5nID0gaGFzRGVmYXVsdFZhbHVlICYmIGRlZmF1bHRWYWx1ZSAhPT0gcmVzICYmIHRoaXMub3B0aW9ucy51cGRhdGVNaXNzaW5nO1xuICAgICAgaWYgKHVzZWRLZXkgfHwgdXNlZERlZmF1bHQgfHwgdXBkYXRlTWlzc2luZykge1xuICAgICAgICB0aGlzLmxvZ2dlci5sb2codXBkYXRlTWlzc2luZyA/ICd1cGRhdGVLZXknIDogJ21pc3NpbmdLZXknLCBsbmcsIG5hbWVzcGFjZSwga2V5LCB1cGRhdGVNaXNzaW5nID8gZGVmYXVsdFZhbHVlIDogcmVzKTtcbiAgICAgICAgaWYgKGtleVNlcGFyYXRvcikge1xuICAgICAgICAgIGNvbnN0IGZrID0gdGhpcy5yZXNvbHZlKGtleSwge1xuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGtleVNlcGFyYXRvcjogZmFsc2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBpZiAoZmsgJiYgZmsucmVzKSB0aGlzLmxvZ2dlci53YXJuKCdTZWVtcyB0aGUgbG9hZGVkIHRyYW5zbGF0aW9ucyB3ZXJlIGluIGZsYXQgSlNPTiBmb3JtYXQgaW5zdGVhZCBvZiBuZXN0ZWQuIEVpdGhlciBzZXQga2V5U2VwYXJhdG9yOiBmYWxzZSBvbiBpbml0IG9yIG1ha2Ugc3VyZSB5b3VyIHRyYW5zbGF0aW9ucyBhcmUgcHVibGlzaGVkIGluIG5lc3RlZCBmb3JtYXQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGxuZ3MgPSBbXTtcbiAgICAgICAgY29uc3QgZmFsbGJhY2tMbmdzID0gdGhpcy5sYW5ndWFnZVV0aWxzLmdldEZhbGxiYWNrQ29kZXModGhpcy5vcHRpb25zLmZhbGxiYWNrTG5nLCBvcHRpb25zLmxuZyB8fCB0aGlzLmxhbmd1YWdlKTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zYXZlTWlzc2luZ1RvID09PSAnZmFsbGJhY2snICYmIGZhbGxiYWNrTG5ncyAmJiBmYWxsYmFja0xuZ3NbMF0pIHtcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZhbGxiYWNrTG5ncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbG5ncy5wdXNoKGZhbGxiYWNrTG5nc1tpXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMub3B0aW9ucy5zYXZlTWlzc2luZ1RvID09PSAnYWxsJykge1xuICAgICAgICAgIGxuZ3MgPSB0aGlzLmxhbmd1YWdlVXRpbHMudG9SZXNvbHZlSGllcmFyY2h5KG9wdGlvbnMubG5nIHx8IHRoaXMubGFuZ3VhZ2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxuZ3MucHVzaChvcHRpb25zLmxuZyB8fCB0aGlzLmxhbmd1YWdlKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzZW5kID0gKGwsIGssIHNwZWNpZmljRGVmYXVsdFZhbHVlKSA9PiB7XG4gICAgICAgICAgY29uc3QgZGVmYXVsdEZvck1pc3NpbmcgPSBoYXNEZWZhdWx0VmFsdWUgJiYgc3BlY2lmaWNEZWZhdWx0VmFsdWUgIT09IHJlcyA/IHNwZWNpZmljRGVmYXVsdFZhbHVlIDogcmVzRm9yTWlzc2luZztcbiAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLm1pc3NpbmdLZXlIYW5kbGVyKSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMubWlzc2luZ0tleUhhbmRsZXIobCwgbmFtZXNwYWNlLCBrLCBkZWZhdWx0Rm9yTWlzc2luZywgdXBkYXRlTWlzc2luZywgb3B0aW9ucyk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmJhY2tlbmRDb25uZWN0b3IgJiYgdGhpcy5iYWNrZW5kQ29ubmVjdG9yLnNhdmVNaXNzaW5nKSB7XG4gICAgICAgICAgICB0aGlzLmJhY2tlbmRDb25uZWN0b3Iuc2F2ZU1pc3NpbmcobCwgbmFtZXNwYWNlLCBrLCBkZWZhdWx0Rm9yTWlzc2luZywgdXBkYXRlTWlzc2luZywgb3B0aW9ucyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuZW1pdCgnbWlzc2luZ0tleScsIGwsIG5hbWVzcGFjZSwgaywgcmVzKTtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zYXZlTWlzc2luZykge1xuICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2F2ZU1pc3NpbmdQbHVyYWxzICYmIG5lZWRzUGx1cmFsSGFuZGxpbmcpIHtcbiAgICAgICAgICAgIGxuZ3MuZm9yRWFjaChsYW5ndWFnZSA9PiB7XG4gICAgICAgICAgICAgIHRoaXMucGx1cmFsUmVzb2x2ZXIuZ2V0U3VmZml4ZXMobGFuZ3VhZ2UsIG9wdGlvbnMpLmZvckVhY2goc3VmZml4ID0+IHtcbiAgICAgICAgICAgICAgICBzZW5kKFtsYW5ndWFnZV0sIGtleSArIHN1ZmZpeCwgb3B0aW9uc1tgZGVmYXVsdFZhbHVlJHtzdWZmaXh9YF0gfHwgZGVmYXVsdFZhbHVlKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VuZChsbmdzLCBrZXksIGRlZmF1bHRWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXMgPSB0aGlzLmV4dGVuZFRyYW5zbGF0aW9uKHJlcywga2V5cywgb3B0aW9ucywgcmVzb2x2ZWQsIGxhc3RLZXkpO1xuICAgICAgaWYgKHVzZWRLZXkgJiYgcmVzID09PSBrZXkgJiYgdGhpcy5vcHRpb25zLmFwcGVuZE5hbWVzcGFjZVRvTWlzc2luZ0tleSkgcmVzID0gYCR7bmFtZXNwYWNlfToke2tleX1gO1xuICAgICAgaWYgKCh1c2VkS2V5IHx8IHVzZWREZWZhdWx0KSAmJiB0aGlzLm9wdGlvbnMucGFyc2VNaXNzaW5nS2V5SGFuZGxlcikge1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmNvbXBhdGliaWxpdHlBUEkgIT09ICd2MScpIHtcbiAgICAgICAgICByZXMgPSB0aGlzLm9wdGlvbnMucGFyc2VNaXNzaW5nS2V5SGFuZGxlcih0aGlzLm9wdGlvbnMuYXBwZW5kTmFtZXNwYWNlVG9NaXNzaW5nS2V5ID8gYCR7bmFtZXNwYWNlfToke2tleX1gIDoga2V5LCB1c2VkRGVmYXVsdCA/IHJlcyA6IHVuZGVmaW5lZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzID0gdGhpcy5vcHRpb25zLnBhcnNlTWlzc2luZ0tleUhhbmRsZXIocmVzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAocmV0dXJuRGV0YWlscykge1xuICAgICAgcmVzb2x2ZWQucmVzID0gcmVzO1xuICAgICAgcmVzb2x2ZWQudXNlZFBhcmFtcyA9IHRoaXMuZ2V0VXNlZFBhcmFtc0RldGFpbHMob3B0aW9ucyk7XG4gICAgICByZXR1cm4gcmVzb2x2ZWQ7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH1cbiAgZXh0ZW5kVHJhbnNsYXRpb24ocmVzLCBrZXksIG9wdGlvbnMsIHJlc29sdmVkLCBsYXN0S2V5KSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICBpZiAodGhpcy5pMThuRm9ybWF0ICYmIHRoaXMuaTE4bkZvcm1hdC5wYXJzZSkge1xuICAgICAgcmVzID0gdGhpcy5pMThuRm9ybWF0LnBhcnNlKHJlcywge1xuICAgICAgICAuLi50aGlzLm9wdGlvbnMuaW50ZXJwb2xhdGlvbi5kZWZhdWx0VmFyaWFibGVzLFxuICAgICAgICAuLi5vcHRpb25zXG4gICAgICB9LCBvcHRpb25zLmxuZyB8fCB0aGlzLmxhbmd1YWdlIHx8IHJlc29sdmVkLnVzZWRMbmcsIHJlc29sdmVkLnVzZWROUywgcmVzb2x2ZWQudXNlZEtleSwge1xuICAgICAgICByZXNvbHZlZFxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICghb3B0aW9ucy5za2lwSW50ZXJwb2xhdGlvbikge1xuICAgICAgaWYgKG9wdGlvbnMuaW50ZXJwb2xhdGlvbikgdGhpcy5pbnRlcnBvbGF0b3IuaW5pdCh7XG4gICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIC4uLntcbiAgICAgICAgICBpbnRlcnBvbGF0aW9uOiB7XG4gICAgICAgICAgICAuLi50aGlzLm9wdGlvbnMuaW50ZXJwb2xhdGlvbixcbiAgICAgICAgICAgIC4uLm9wdGlvbnMuaW50ZXJwb2xhdGlvblxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBjb25zdCBza2lwT25WYXJpYWJsZXMgPSB0eXBlb2YgcmVzID09PSAnc3RyaW5nJyAmJiAob3B0aW9ucyAmJiBvcHRpb25zLmludGVycG9sYXRpb24gJiYgb3B0aW9ucy5pbnRlcnBvbGF0aW9uLnNraXBPblZhcmlhYmxlcyAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5pbnRlcnBvbGF0aW9uLnNraXBPblZhcmlhYmxlcyA6IHRoaXMub3B0aW9ucy5pbnRlcnBvbGF0aW9uLnNraXBPblZhcmlhYmxlcyk7XG4gICAgICBsZXQgbmVzdEJlZjtcbiAgICAgIGlmIChza2lwT25WYXJpYWJsZXMpIHtcbiAgICAgICAgY29uc3QgbmIgPSByZXMubWF0Y2godGhpcy5pbnRlcnBvbGF0b3IubmVzdGluZ1JlZ2V4cCk7XG4gICAgICAgIG5lc3RCZWYgPSBuYiAmJiBuYi5sZW5ndGg7XG4gICAgICB9XG4gICAgICBsZXQgZGF0YSA9IG9wdGlvbnMucmVwbGFjZSAmJiB0eXBlb2Ygb3B0aW9ucy5yZXBsYWNlICE9PSAnc3RyaW5nJyA/IG9wdGlvbnMucmVwbGFjZSA6IG9wdGlvbnM7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmludGVycG9sYXRpb24uZGVmYXVsdFZhcmlhYmxlcykgZGF0YSA9IHtcbiAgICAgICAgLi4udGhpcy5vcHRpb25zLmludGVycG9sYXRpb24uZGVmYXVsdFZhcmlhYmxlcyxcbiAgICAgICAgLi4uZGF0YVxuICAgICAgfTtcbiAgICAgIHJlcyA9IHRoaXMuaW50ZXJwb2xhdG9yLmludGVycG9sYXRlKHJlcywgZGF0YSwgb3B0aW9ucy5sbmcgfHwgdGhpcy5sYW5ndWFnZSwgb3B0aW9ucyk7XG4gICAgICBpZiAoc2tpcE9uVmFyaWFibGVzKSB7XG4gICAgICAgIGNvbnN0IG5hID0gcmVzLm1hdGNoKHRoaXMuaW50ZXJwb2xhdG9yLm5lc3RpbmdSZWdleHApO1xuICAgICAgICBjb25zdCBuZXN0QWZ0ID0gbmEgJiYgbmEubGVuZ3RoO1xuICAgICAgICBpZiAobmVzdEJlZiA8IG5lc3RBZnQpIG9wdGlvbnMubmVzdCA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKCFvcHRpb25zLmxuZyAmJiB0aGlzLm9wdGlvbnMuY29tcGF0aWJpbGl0eUFQSSAhPT0gJ3YxJyAmJiByZXNvbHZlZCAmJiByZXNvbHZlZC5yZXMpIG9wdGlvbnMubG5nID0gcmVzb2x2ZWQudXNlZExuZztcbiAgICAgIGlmIChvcHRpb25zLm5lc3QgIT09IGZhbHNlKSByZXMgPSB0aGlzLmludGVycG9sYXRvci5uZXN0KHJlcywgZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsYXN0S2V5ICYmIGxhc3RLZXlbMF0gPT09IGFyZ3NbMF0gJiYgIW9wdGlvbnMuY29udGV4dCkge1xuICAgICAgICAgIF90aGlzLmxvZ2dlci53YXJuKGBJdCBzZWVtcyB5b3UgYXJlIG5lc3RpbmcgcmVjdXJzaXZlbHkga2V5OiAke2FyZ3NbMF19IGluIGtleTogJHtrZXlbMF19YCk7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF90aGlzLnRyYW5zbGF0ZSguLi5hcmdzLCBrZXkpO1xuICAgICAgfSwgb3B0aW9ucyk7XG4gICAgICBpZiAob3B0aW9ucy5pbnRlcnBvbGF0aW9uKSB0aGlzLmludGVycG9sYXRvci5yZXNldCgpO1xuICAgIH1cbiAgICBjb25zdCBwb3N0UHJvY2VzcyA9IG9wdGlvbnMucG9zdFByb2Nlc3MgfHwgdGhpcy5vcHRpb25zLnBvc3RQcm9jZXNzO1xuICAgIGNvbnN0IHBvc3RQcm9jZXNzb3JOYW1lcyA9IHR5cGVvZiBwb3N0UHJvY2VzcyA9PT0gJ3N0cmluZycgPyBbcG9zdFByb2Nlc3NdIDogcG9zdFByb2Nlc3M7XG4gICAgaWYgKHJlcyAhPT0gdW5kZWZpbmVkICYmIHJlcyAhPT0gbnVsbCAmJiBwb3N0UHJvY2Vzc29yTmFtZXMgJiYgcG9zdFByb2Nlc3Nvck5hbWVzLmxlbmd0aCAmJiBvcHRpb25zLmFwcGx5UG9zdFByb2Nlc3NvciAhPT0gZmFsc2UpIHtcbiAgICAgIHJlcyA9IHBvc3RQcm9jZXNzb3IuaGFuZGxlKHBvc3RQcm9jZXNzb3JOYW1lcywgcmVzLCBrZXksIHRoaXMub3B0aW9ucyAmJiB0aGlzLm9wdGlvbnMucG9zdFByb2Nlc3NQYXNzUmVzb2x2ZWQgPyB7XG4gICAgICAgIGkxOG5SZXNvbHZlZDoge1xuICAgICAgICAgIC4uLnJlc29sdmVkLFxuICAgICAgICAgIHVzZWRQYXJhbXM6IHRoaXMuZ2V0VXNlZFBhcmFtc0RldGFpbHMob3B0aW9ucylcbiAgICAgICAgfSxcbiAgICAgICAgLi4ub3B0aW9uc1xuICAgICAgfSA6IG9wdGlvbnMsIHRoaXMpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9XG4gIHJlc29sdmUoa2V5cykge1xuICAgIGxldCBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICBsZXQgZm91bmQ7XG4gICAgbGV0IHVzZWRLZXk7XG4gICAgbGV0IGV4YWN0VXNlZEtleTtcbiAgICBsZXQgdXNlZExuZztcbiAgICBsZXQgdXNlZE5TO1xuICAgIGlmICh0eXBlb2Yga2V5cyA9PT0gJ3N0cmluZycpIGtleXMgPSBba2V5c107XG4gICAga2V5cy5mb3JFYWNoKGsgPT4ge1xuICAgICAgaWYgKHRoaXMuaXNWYWxpZExvb2t1cChmb3VuZCkpIHJldHVybjtcbiAgICAgIGNvbnN0IGV4dHJhY3RlZCA9IHRoaXMuZXh0cmFjdEZyb21LZXkoaywgb3B0aW9ucyk7XG4gICAgICBjb25zdCBrZXkgPSBleHRyYWN0ZWQua2V5O1xuICAgICAgdXNlZEtleSA9IGtleTtcbiAgICAgIGxldCBuYW1lc3BhY2VzID0gZXh0cmFjdGVkLm5hbWVzcGFjZXM7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmZhbGxiYWNrTlMpIG5hbWVzcGFjZXMgPSBuYW1lc3BhY2VzLmNvbmNhdCh0aGlzLm9wdGlvbnMuZmFsbGJhY2tOUyk7XG4gICAgICBjb25zdCBuZWVkc1BsdXJhbEhhbmRsaW5nID0gb3B0aW9ucy5jb3VudCAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvcHRpb25zLmNvdW50ICE9PSAnc3RyaW5nJztcbiAgICAgIGNvbnN0IG5lZWRzWmVyb1N1ZmZpeExvb2t1cCA9IG5lZWRzUGx1cmFsSGFuZGxpbmcgJiYgIW9wdGlvbnMub3JkaW5hbCAmJiBvcHRpb25zLmNvdW50ID09PSAwICYmIHRoaXMucGx1cmFsUmVzb2x2ZXIuc2hvdWxkVXNlSW50bEFwaSgpO1xuICAgICAgY29uc3QgbmVlZHNDb250ZXh0SGFuZGxpbmcgPSBvcHRpb25zLmNvbnRleHQgIT09IHVuZGVmaW5lZCAmJiAodHlwZW9mIG9wdGlvbnMuY29udGV4dCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIG9wdGlvbnMuY29udGV4dCA9PT0gJ251bWJlcicpICYmIG9wdGlvbnMuY29udGV4dCAhPT0gJyc7XG4gICAgICBjb25zdCBjb2RlcyA9IG9wdGlvbnMubG5ncyA/IG9wdGlvbnMubG5ncyA6IHRoaXMubGFuZ3VhZ2VVdGlscy50b1Jlc29sdmVIaWVyYXJjaHkob3B0aW9ucy5sbmcgfHwgdGhpcy5sYW5ndWFnZSwgb3B0aW9ucy5mYWxsYmFja0xuZyk7XG4gICAgICBuYW1lc3BhY2VzLmZvckVhY2gobnMgPT4ge1xuICAgICAgICBpZiAodGhpcy5pc1ZhbGlkTG9va3VwKGZvdW5kKSkgcmV0dXJuO1xuICAgICAgICB1c2VkTlMgPSBucztcbiAgICAgICAgaWYgKCFjaGVja2VkTG9hZGVkRm9yW2Ake2NvZGVzWzBdfS0ke25zfWBdICYmIHRoaXMudXRpbHMgJiYgdGhpcy51dGlscy5oYXNMb2FkZWROYW1lc3BhY2UgJiYgIXRoaXMudXRpbHMuaGFzTG9hZGVkTmFtZXNwYWNlKHVzZWROUykpIHtcbiAgICAgICAgICBjaGVja2VkTG9hZGVkRm9yW2Ake2NvZGVzWzBdfS0ke25zfWBdID0gdHJ1ZTtcbiAgICAgICAgICB0aGlzLmxvZ2dlci53YXJuKGBrZXkgXCIke3VzZWRLZXl9XCIgZm9yIGxhbmd1YWdlcyBcIiR7Y29kZXMuam9pbignLCAnKX1cIiB3b24ndCBnZXQgcmVzb2x2ZWQgYXMgbmFtZXNwYWNlIFwiJHt1c2VkTlN9XCIgd2FzIG5vdCB5ZXQgbG9hZGVkYCwgJ1RoaXMgbWVhbnMgc29tZXRoaW5nIElTIFdST05HIGluIHlvdXIgc2V0dXAuIFlvdSBhY2Nlc3MgdGhlIHQgZnVuY3Rpb24gYmVmb3JlIGkxOG5leHQuaW5pdCAvIGkxOG5leHQubG9hZE5hbWVzcGFjZSAvIGkxOG5leHQuY2hhbmdlTGFuZ3VhZ2Ugd2FzIGRvbmUuIFdhaXQgZm9yIHRoZSBjYWxsYmFjayBvciBQcm9taXNlIHRvIHJlc29sdmUgYmVmb3JlIGFjY2Vzc2luZyBpdCEhIScpO1xuICAgICAgICB9XG4gICAgICAgIGNvZGVzLmZvckVhY2goY29kZSA9PiB7XG4gICAgICAgICAgaWYgKHRoaXMuaXNWYWxpZExvb2t1cChmb3VuZCkpIHJldHVybjtcbiAgICAgICAgICB1c2VkTG5nID0gY29kZTtcbiAgICAgICAgICBjb25zdCBmaW5hbEtleXMgPSBba2V5XTtcbiAgICAgICAgICBpZiAodGhpcy5pMThuRm9ybWF0ICYmIHRoaXMuaTE4bkZvcm1hdC5hZGRMb29rdXBLZXlzKSB7XG4gICAgICAgICAgICB0aGlzLmkxOG5Gb3JtYXQuYWRkTG9va3VwS2V5cyhmaW5hbEtleXMsIGtleSwgY29kZSwgbnMsIG9wdGlvbnMpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgcGx1cmFsU3VmZml4O1xuICAgICAgICAgICAgaWYgKG5lZWRzUGx1cmFsSGFuZGxpbmcpIHBsdXJhbFN1ZmZpeCA9IHRoaXMucGx1cmFsUmVzb2x2ZXIuZ2V0U3VmZml4KGNvZGUsIG9wdGlvbnMuY291bnQsIG9wdGlvbnMpO1xuICAgICAgICAgICAgY29uc3QgemVyb1N1ZmZpeCA9IGAke3RoaXMub3B0aW9ucy5wbHVyYWxTZXBhcmF0b3J9emVyb2A7XG4gICAgICAgICAgICBjb25zdCBvcmRpbmFsUHJlZml4ID0gYCR7dGhpcy5vcHRpb25zLnBsdXJhbFNlcGFyYXRvcn1vcmRpbmFsJHt0aGlzLm9wdGlvbnMucGx1cmFsU2VwYXJhdG9yfWA7XG4gICAgICAgICAgICBpZiAobmVlZHNQbHVyYWxIYW5kbGluZykge1xuICAgICAgICAgICAgICBmaW5hbEtleXMucHVzaChrZXkgKyBwbHVyYWxTdWZmaXgpO1xuICAgICAgICAgICAgICBpZiAob3B0aW9ucy5vcmRpbmFsICYmIHBsdXJhbFN1ZmZpeC5pbmRleE9mKG9yZGluYWxQcmVmaXgpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgZmluYWxLZXlzLnB1c2goa2V5ICsgcGx1cmFsU3VmZml4LnJlcGxhY2Uob3JkaW5hbFByZWZpeCwgdGhpcy5vcHRpb25zLnBsdXJhbFNlcGFyYXRvcikpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChuZWVkc1plcm9TdWZmaXhMb29rdXApIHtcbiAgICAgICAgICAgICAgICBmaW5hbEtleXMucHVzaChrZXkgKyB6ZXJvU3VmZml4KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5lZWRzQ29udGV4dEhhbmRsaW5nKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGNvbnRleHRLZXkgPSBgJHtrZXl9JHt0aGlzLm9wdGlvbnMuY29udGV4dFNlcGFyYXRvcn0ke29wdGlvbnMuY29udGV4dH1gO1xuICAgICAgICAgICAgICBmaW5hbEtleXMucHVzaChjb250ZXh0S2V5KTtcbiAgICAgICAgICAgICAgaWYgKG5lZWRzUGx1cmFsSGFuZGxpbmcpIHtcbiAgICAgICAgICAgICAgICBmaW5hbEtleXMucHVzaChjb250ZXh0S2V5ICsgcGx1cmFsU3VmZml4KTtcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5vcmRpbmFsICYmIHBsdXJhbFN1ZmZpeC5pbmRleE9mKG9yZGluYWxQcmVmaXgpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICBmaW5hbEtleXMucHVzaChjb250ZXh0S2V5ICsgcGx1cmFsU3VmZml4LnJlcGxhY2Uob3JkaW5hbFByZWZpeCwgdGhpcy5vcHRpb25zLnBsdXJhbFNlcGFyYXRvcikpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobmVlZHNaZXJvU3VmZml4TG9va3VwKSB7XG4gICAgICAgICAgICAgICAgICBmaW5hbEtleXMucHVzaChjb250ZXh0S2V5ICsgemVyb1N1ZmZpeCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGxldCBwb3NzaWJsZUtleTtcbiAgICAgICAgICB3aGlsZSAocG9zc2libGVLZXkgPSBmaW5hbEtleXMucG9wKCkpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5pc1ZhbGlkTG9va3VwKGZvdW5kKSkge1xuICAgICAgICAgICAgICBleGFjdFVzZWRLZXkgPSBwb3NzaWJsZUtleTtcbiAgICAgICAgICAgICAgZm91bmQgPSB0aGlzLmdldFJlc291cmNlKGNvZGUsIG5zLCBwb3NzaWJsZUtleSwgb3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICByZXM6IGZvdW5kLFxuICAgICAgdXNlZEtleSxcbiAgICAgIGV4YWN0VXNlZEtleSxcbiAgICAgIHVzZWRMbmcsXG4gICAgICB1c2VkTlNcbiAgICB9O1xuICB9XG4gIGlzVmFsaWRMb29rdXAocmVzKSB7XG4gICAgcmV0dXJuIHJlcyAhPT0gdW5kZWZpbmVkICYmICEoIXRoaXMub3B0aW9ucy5yZXR1cm5OdWxsICYmIHJlcyA9PT0gbnVsbCkgJiYgISghdGhpcy5vcHRpb25zLnJldHVybkVtcHR5U3RyaW5nICYmIHJlcyA9PT0gJycpO1xuICB9XG4gIGdldFJlc291cmNlKGNvZGUsIG5zLCBrZXkpIHtcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDoge307XG4gICAgaWYgKHRoaXMuaTE4bkZvcm1hdCAmJiB0aGlzLmkxOG5Gb3JtYXQuZ2V0UmVzb3VyY2UpIHJldHVybiB0aGlzLmkxOG5Gb3JtYXQuZ2V0UmVzb3VyY2UoY29kZSwgbnMsIGtleSwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIHRoaXMucmVzb3VyY2VTdG9yZS5nZXRSZXNvdXJjZShjb2RlLCBucywga2V5LCBvcHRpb25zKTtcbiAgfVxuICBnZXRVc2VkUGFyYW1zRGV0YWlscygpIHtcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgY29uc3Qgb3B0aW9uc0tleXMgPSBbJ2RlZmF1bHRWYWx1ZScsICdvcmRpbmFsJywgJ2NvbnRleHQnLCAncmVwbGFjZScsICdsbmcnLCAnbG5ncycsICdmYWxsYmFja0xuZycsICducycsICdrZXlTZXBhcmF0b3InLCAnbnNTZXBhcmF0b3InLCAncmV0dXJuT2JqZWN0cycsICdyZXR1cm5EZXRhaWxzJywgJ2pvaW5BcnJheXMnLCAncG9zdFByb2Nlc3MnLCAnaW50ZXJwb2xhdGlvbiddO1xuICAgIGNvbnN0IHVzZU9wdGlvbnNSZXBsYWNlRm9yRGF0YSA9IG9wdGlvbnMucmVwbGFjZSAmJiB0eXBlb2Ygb3B0aW9ucy5yZXBsYWNlICE9PSAnc3RyaW5nJztcbiAgICBsZXQgZGF0YSA9IHVzZU9wdGlvbnNSZXBsYWNlRm9yRGF0YSA/IG9wdGlvbnMucmVwbGFjZSA6IG9wdGlvbnM7XG4gICAgaWYgKHVzZU9wdGlvbnNSZXBsYWNlRm9yRGF0YSAmJiB0eXBlb2Ygb3B0aW9ucy5jb3VudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGRhdGEuY291bnQgPSBvcHRpb25zLmNvdW50O1xuICAgIH1cbiAgICBpZiAodGhpcy5vcHRpb25zLmludGVycG9sYXRpb24uZGVmYXVsdFZhcmlhYmxlcykge1xuICAgICAgZGF0YSA9IHtcbiAgICAgICAgLi4udGhpcy5vcHRpb25zLmludGVycG9sYXRpb24uZGVmYXVsdFZhcmlhYmxlcyxcbiAgICAgICAgLi4uZGF0YVxuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKCF1c2VPcHRpb25zUmVwbGFjZUZvckRhdGEpIHtcbiAgICAgIGRhdGEgPSB7XG4gICAgICAgIC4uLmRhdGFcbiAgICAgIH07XG4gICAgICBmb3IgKGNvbnN0IGtleSBvZiBvcHRpb25zS2V5cykge1xuICAgICAgICBkZWxldGUgZGF0YVtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuICBzdGF0aWMgaGFzRGVmYXVsdFZhbHVlKG9wdGlvbnMpIHtcbiAgICBjb25zdCBwcmVmaXggPSAnZGVmYXVsdFZhbHVlJztcbiAgICBmb3IgKGNvbnN0IG9wdGlvbiBpbiBvcHRpb25zKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9wdGlvbnMsIG9wdGlvbikgJiYgcHJlZml4ID09PSBvcHRpb24uc3Vic3RyaW5nKDAsIHByZWZpeC5sZW5ndGgpICYmIHVuZGVmaW5lZCAhPT0gb3B0aW9uc1tvcHRpb25dKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FwaXRhbGl6ZShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0cmluZy5zbGljZSgxKTtcbn1cbmNsYXNzIExhbmd1YWdlVXRpbCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMuc3VwcG9ydGVkTG5ncyA9IHRoaXMub3B0aW9ucy5zdXBwb3J0ZWRMbmdzIHx8IGZhbHNlO1xuICAgIHRoaXMubG9nZ2VyID0gYmFzZUxvZ2dlci5jcmVhdGUoJ2xhbmd1YWdlVXRpbHMnKTtcbiAgfVxuICBnZXRTY3JpcHRQYXJ0RnJvbUNvZGUoY29kZSkge1xuICAgIGNvZGUgPSBnZXRDbGVhbmVkQ29kZShjb2RlKTtcbiAgICBpZiAoIWNvZGUgfHwgY29kZS5pbmRleE9mKCctJykgPCAwKSByZXR1cm4gbnVsbDtcbiAgICBjb25zdCBwID0gY29kZS5zcGxpdCgnLScpO1xuICAgIGlmIChwLmxlbmd0aCA9PT0gMikgcmV0dXJuIG51bGw7XG4gICAgcC5wb3AoKTtcbiAgICBpZiAocFtwLmxlbmd0aCAtIDFdLnRvTG93ZXJDYXNlKCkgPT09ICd4JykgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIHRoaXMuZm9ybWF0TGFuZ3VhZ2VDb2RlKHAuam9pbignLScpKTtcbiAgfVxuICBnZXRMYW5ndWFnZVBhcnRGcm9tQ29kZShjb2RlKSB7XG4gICAgY29kZSA9IGdldENsZWFuZWRDb2RlKGNvZGUpO1xuICAgIGlmICghY29kZSB8fCBjb2RlLmluZGV4T2YoJy0nKSA8IDApIHJldHVybiBjb2RlO1xuICAgIGNvbnN0IHAgPSBjb2RlLnNwbGl0KCctJyk7XG4gICAgcmV0dXJuIHRoaXMuZm9ybWF0TGFuZ3VhZ2VDb2RlKHBbMF0pO1xuICB9XG4gIGZvcm1hdExhbmd1YWdlQ29kZShjb2RlKSB7XG4gICAgaWYgKHR5cGVvZiBjb2RlID09PSAnc3RyaW5nJyAmJiBjb2RlLmluZGV4T2YoJy0nKSA+IC0xKSB7XG4gICAgICBjb25zdCBzcGVjaWFsQ2FzZXMgPSBbJ2hhbnMnLCAnaGFudCcsICdsYXRuJywgJ2N5cmwnLCAnY2FucycsICdtb25nJywgJ2FyYWInXTtcbiAgICAgIGxldCBwID0gY29kZS5zcGxpdCgnLScpO1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5sb3dlckNhc2VMbmcpIHtcbiAgICAgICAgcCA9IHAubWFwKHBhcnQgPT4gcGFydC50b0xvd2VyQ2FzZSgpKTtcbiAgICAgIH0gZWxzZSBpZiAocC5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgcFswXSA9IHBbMF0udG9Mb3dlckNhc2UoKTtcbiAgICAgICAgcFsxXSA9IHBbMV0udG9VcHBlckNhc2UoKTtcbiAgICAgICAgaWYgKHNwZWNpYWxDYXNlcy5pbmRleE9mKHBbMV0udG9Mb3dlckNhc2UoKSkgPiAtMSkgcFsxXSA9IGNhcGl0YWxpemUocFsxXS50b0xvd2VyQ2FzZSgpKTtcbiAgICAgIH0gZWxzZSBpZiAocC5sZW5ndGggPT09IDMpIHtcbiAgICAgICAgcFswXSA9IHBbMF0udG9Mb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKHBbMV0ubGVuZ3RoID09PSAyKSBwWzFdID0gcFsxXS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICBpZiAocFswXSAhPT0gJ3NnbicgJiYgcFsyXS5sZW5ndGggPT09IDIpIHBbMl0gPSBwWzJdLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgIGlmIChzcGVjaWFsQ2FzZXMuaW5kZXhPZihwWzFdLnRvTG93ZXJDYXNlKCkpID4gLTEpIHBbMV0gPSBjYXBpdGFsaXplKHBbMV0udG9Mb3dlckNhc2UoKSk7XG4gICAgICAgIGlmIChzcGVjaWFsQ2FzZXMuaW5kZXhPZihwWzJdLnRvTG93ZXJDYXNlKCkpID4gLTEpIHBbMl0gPSBjYXBpdGFsaXplKHBbMl0udG9Mb3dlckNhc2UoKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcC5qb2luKCctJyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLm9wdGlvbnMuY2xlYW5Db2RlIHx8IHRoaXMub3B0aW9ucy5sb3dlckNhc2VMbmcgPyBjb2RlLnRvTG93ZXJDYXNlKCkgOiBjb2RlO1xuICB9XG4gIGlzU3VwcG9ydGVkQ29kZShjb2RlKSB7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5sb2FkID09PSAnbGFuZ3VhZ2VPbmx5JyB8fCB0aGlzLm9wdGlvbnMubm9uRXhwbGljaXRTdXBwb3J0ZWRMbmdzKSB7XG4gICAgICBjb2RlID0gdGhpcy5nZXRMYW5ndWFnZVBhcnRGcm9tQ29kZShjb2RlKTtcbiAgICB9XG4gICAgcmV0dXJuICF0aGlzLnN1cHBvcnRlZExuZ3MgfHwgIXRoaXMuc3VwcG9ydGVkTG5ncy5sZW5ndGggfHwgdGhpcy5zdXBwb3J0ZWRMbmdzLmluZGV4T2YoY29kZSkgPiAtMTtcbiAgfVxuICBnZXRCZXN0TWF0Y2hGcm9tQ29kZXMoY29kZXMpIHtcbiAgICBpZiAoIWNvZGVzKSByZXR1cm4gbnVsbDtcbiAgICBsZXQgZm91bmQ7XG4gICAgY29kZXMuZm9yRWFjaChjb2RlID0+IHtcbiAgICAgIGlmIChmb3VuZCkgcmV0dXJuO1xuICAgICAgY29uc3QgY2xlYW5lZExuZyA9IHRoaXMuZm9ybWF0TGFuZ3VhZ2VDb2RlKGNvZGUpO1xuICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuc3VwcG9ydGVkTG5ncyB8fCB0aGlzLmlzU3VwcG9ydGVkQ29kZShjbGVhbmVkTG5nKSkgZm91bmQgPSBjbGVhbmVkTG5nO1xuICAgIH0pO1xuICAgIGlmICghZm91bmQgJiYgdGhpcy5vcHRpb25zLnN1cHBvcnRlZExuZ3MpIHtcbiAgICAgIGNvZGVzLmZvckVhY2goY29kZSA9PiB7XG4gICAgICAgIGlmIChmb3VuZCkgcmV0dXJuO1xuICAgICAgICBjb25zdCBsbmdPbmx5ID0gdGhpcy5nZXRMYW5ndWFnZVBhcnRGcm9tQ29kZShjb2RlKTtcbiAgICAgICAgaWYgKHRoaXMuaXNTdXBwb3J0ZWRDb2RlKGxuZ09ubHkpKSByZXR1cm4gZm91bmQgPSBsbmdPbmx5O1xuICAgICAgICBmb3VuZCA9IHRoaXMub3B0aW9ucy5zdXBwb3J0ZWRMbmdzLmZpbmQoc3VwcG9ydGVkTG5nID0+IHtcbiAgICAgICAgICBpZiAoc3VwcG9ydGVkTG5nID09PSBsbmdPbmx5KSByZXR1cm4gc3VwcG9ydGVkTG5nO1xuICAgICAgICAgIGlmIChzdXBwb3J0ZWRMbmcuaW5kZXhPZignLScpIDwgMCAmJiBsbmdPbmx5LmluZGV4T2YoJy0nKSA8IDApIHJldHVybjtcbiAgICAgICAgICBpZiAoc3VwcG9ydGVkTG5nLmluZGV4T2YobG5nT25seSkgPT09IDApIHJldHVybiBzdXBwb3J0ZWRMbmc7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGlmICghZm91bmQpIGZvdW5kID0gdGhpcy5nZXRGYWxsYmFja0NvZGVzKHRoaXMub3B0aW9ucy5mYWxsYmFja0xuZylbMF07XG4gICAgcmV0dXJuIGZvdW5kO1xuICB9XG4gIGdldEZhbGxiYWNrQ29kZXMoZmFsbGJhY2tzLCBjb2RlKSB7XG4gICAgaWYgKCFmYWxsYmFja3MpIHJldHVybiBbXTtcbiAgICBpZiAodHlwZW9mIGZhbGxiYWNrcyA9PT0gJ2Z1bmN0aW9uJykgZmFsbGJhY2tzID0gZmFsbGJhY2tzKGNvZGUpO1xuICAgIGlmICh0eXBlb2YgZmFsbGJhY2tzID09PSAnc3RyaW5nJykgZmFsbGJhY2tzID0gW2ZhbGxiYWNrc107XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuYXBwbHkoZmFsbGJhY2tzKSA9PT0gJ1tvYmplY3QgQXJyYXldJykgcmV0dXJuIGZhbGxiYWNrcztcbiAgICBpZiAoIWNvZGUpIHJldHVybiBmYWxsYmFja3MuZGVmYXVsdCB8fCBbXTtcbiAgICBsZXQgZm91bmQgPSBmYWxsYmFja3NbY29kZV07XG4gICAgaWYgKCFmb3VuZCkgZm91bmQgPSBmYWxsYmFja3NbdGhpcy5nZXRTY3JpcHRQYXJ0RnJvbUNvZGUoY29kZSldO1xuICAgIGlmICghZm91bmQpIGZvdW5kID0gZmFsbGJhY2tzW3RoaXMuZm9ybWF0TGFuZ3VhZ2VDb2RlKGNvZGUpXTtcbiAgICBpZiAoIWZvdW5kKSBmb3VuZCA9IGZhbGxiYWNrc1t0aGlzLmdldExhbmd1YWdlUGFydEZyb21Db2RlKGNvZGUpXTtcbiAgICBpZiAoIWZvdW5kKSBmb3VuZCA9IGZhbGxiYWNrcy5kZWZhdWx0O1xuICAgIHJldHVybiBmb3VuZCB8fCBbXTtcbiAgfVxuICB0b1Jlc29sdmVIaWVyYXJjaHkoY29kZSwgZmFsbGJhY2tDb2RlKSB7XG4gICAgY29uc3QgZmFsbGJhY2tDb2RlcyA9IHRoaXMuZ2V0RmFsbGJhY2tDb2RlcyhmYWxsYmFja0NvZGUgfHwgdGhpcy5vcHRpb25zLmZhbGxiYWNrTG5nIHx8IFtdLCBjb2RlKTtcbiAgICBjb25zdCBjb2RlcyA9IFtdO1xuICAgIGNvbnN0IGFkZENvZGUgPSBjID0+IHtcbiAgICAgIGlmICghYykgcmV0dXJuO1xuICAgICAgaWYgKHRoaXMuaXNTdXBwb3J0ZWRDb2RlKGMpKSB7XG4gICAgICAgIGNvZGVzLnB1c2goYyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmxvZ2dlci53YXJuKGByZWplY3RpbmcgbGFuZ3VhZ2UgY29kZSBub3QgZm91bmQgaW4gc3VwcG9ydGVkTG5nczogJHtjfWApO1xuICAgICAgfVxuICAgIH07XG4gICAgaWYgKHR5cGVvZiBjb2RlID09PSAnc3RyaW5nJyAmJiAoY29kZS5pbmRleE9mKCctJykgPiAtMSB8fCBjb2RlLmluZGV4T2YoJ18nKSA+IC0xKSkge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5sb2FkICE9PSAnbGFuZ3VhZ2VPbmx5JykgYWRkQ29kZSh0aGlzLmZvcm1hdExhbmd1YWdlQ29kZShjb2RlKSk7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmxvYWQgIT09ICdsYW5ndWFnZU9ubHknICYmIHRoaXMub3B0aW9ucy5sb2FkICE9PSAnY3VycmVudE9ubHknKSBhZGRDb2RlKHRoaXMuZ2V0U2NyaXB0UGFydEZyb21Db2RlKGNvZGUpKTtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMubG9hZCAhPT0gJ2N1cnJlbnRPbmx5JykgYWRkQ29kZSh0aGlzLmdldExhbmd1YWdlUGFydEZyb21Db2RlKGNvZGUpKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb2RlID09PSAnc3RyaW5nJykge1xuICAgICAgYWRkQ29kZSh0aGlzLmZvcm1hdExhbmd1YWdlQ29kZShjb2RlKSk7XG4gICAgfVxuICAgIGZhbGxiYWNrQ29kZXMuZm9yRWFjaChmYyA9PiB7XG4gICAgICBpZiAoY29kZXMuaW5kZXhPZihmYykgPCAwKSBhZGRDb2RlKHRoaXMuZm9ybWF0TGFuZ3VhZ2VDb2RlKGZjKSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGNvZGVzO1xuICB9XG59XG5cbmxldCBzZXRzID0gW3tcbiAgbG5nczogWydhY2gnLCAnYWsnLCAnYW0nLCAnYXJuJywgJ2JyJywgJ2ZpbCcsICdndW4nLCAnbG4nLCAnbWZlJywgJ21nJywgJ21pJywgJ29jJywgJ3B0JywgJ3B0LUJSJywgJ3RnJywgJ3RsJywgJ3RpJywgJ3RyJywgJ3V6JywgJ3dhJ10sXG4gIG5yOiBbMSwgMl0sXG4gIGZjOiAxXG59LCB7XG4gIGxuZ3M6IFsnYWYnLCAnYW4nLCAnYXN0JywgJ2F6JywgJ2JnJywgJ2JuJywgJ2NhJywgJ2RhJywgJ2RlJywgJ2RldicsICdlbCcsICdlbicsICdlbycsICdlcycsICdldCcsICdldScsICdmaScsICdmbycsICdmdXInLCAnZnknLCAnZ2wnLCAnZ3UnLCAnaGEnLCAnaGknLCAnaHUnLCAnaHknLCAnaWEnLCAnaXQnLCAna2snLCAna24nLCAna3UnLCAnbGInLCAnbWFpJywgJ21sJywgJ21uJywgJ21yJywgJ25haCcsICduYXAnLCAnbmInLCAnbmUnLCAnbmwnLCAnbm4nLCAnbm8nLCAnbnNvJywgJ3BhJywgJ3BhcCcsICdwbXMnLCAncHMnLCAncHQtUFQnLCAncm0nLCAnc2NvJywgJ3NlJywgJ3NpJywgJ3NvJywgJ3NvbicsICdzcScsICdzdicsICdzdycsICd0YScsICd0ZScsICd0aycsICd1cicsICd5byddLFxuICBucjogWzEsIDJdLFxuICBmYzogMlxufSwge1xuICBsbmdzOiBbJ2F5JywgJ2JvJywgJ2NnZycsICdmYScsICdodCcsICdpZCcsICdqYScsICdqYm8nLCAna2EnLCAna20nLCAna28nLCAna3knLCAnbG8nLCAnbXMnLCAnc2FoJywgJ3N1JywgJ3RoJywgJ3R0JywgJ3VnJywgJ3ZpJywgJ3dvJywgJ3poJ10sXG4gIG5yOiBbMV0sXG4gIGZjOiAzXG59LCB7XG4gIGxuZ3M6IFsnYmUnLCAnYnMnLCAnY25yJywgJ2R6JywgJ2hyJywgJ3J1JywgJ3NyJywgJ3VrJ10sXG4gIG5yOiBbMSwgMiwgNV0sXG4gIGZjOiA0XG59LCB7XG4gIGxuZ3M6IFsnYXInXSxcbiAgbnI6IFswLCAxLCAyLCAzLCAxMSwgMTAwXSxcbiAgZmM6IDVcbn0sIHtcbiAgbG5nczogWydjcycsICdzayddLFxuICBucjogWzEsIDIsIDVdLFxuICBmYzogNlxufSwge1xuICBsbmdzOiBbJ2NzYicsICdwbCddLFxuICBucjogWzEsIDIsIDVdLFxuICBmYzogN1xufSwge1xuICBsbmdzOiBbJ2N5J10sXG4gIG5yOiBbMSwgMiwgMywgOF0sXG4gIGZjOiA4XG59LCB7XG4gIGxuZ3M6IFsnZnInXSxcbiAgbnI6IFsxLCAyXSxcbiAgZmM6IDlcbn0sIHtcbiAgbG5nczogWydnYSddLFxuICBucjogWzEsIDIsIDMsIDcsIDExXSxcbiAgZmM6IDEwXG59LCB7XG4gIGxuZ3M6IFsnZ2QnXSxcbiAgbnI6IFsxLCAyLCAzLCAyMF0sXG4gIGZjOiAxMVxufSwge1xuICBsbmdzOiBbJ2lzJ10sXG4gIG5yOiBbMSwgMl0sXG4gIGZjOiAxMlxufSwge1xuICBsbmdzOiBbJ2p2J10sXG4gIG5yOiBbMCwgMV0sXG4gIGZjOiAxM1xufSwge1xuICBsbmdzOiBbJ2t3J10sXG4gIG5yOiBbMSwgMiwgMywgNF0sXG4gIGZjOiAxNFxufSwge1xuICBsbmdzOiBbJ2x0J10sXG4gIG5yOiBbMSwgMiwgMTBdLFxuICBmYzogMTVcbn0sIHtcbiAgbG5nczogWydsdiddLFxuICBucjogWzEsIDIsIDBdLFxuICBmYzogMTZcbn0sIHtcbiAgbG5nczogWydtayddLFxuICBucjogWzEsIDJdLFxuICBmYzogMTdcbn0sIHtcbiAgbG5nczogWydtbmsnXSxcbiAgbnI6IFswLCAxLCAyXSxcbiAgZmM6IDE4XG59LCB7XG4gIGxuZ3M6IFsnbXQnXSxcbiAgbnI6IFsxLCAyLCAxMSwgMjBdLFxuICBmYzogMTlcbn0sIHtcbiAgbG5nczogWydvciddLFxuICBucjogWzIsIDFdLFxuICBmYzogMlxufSwge1xuICBsbmdzOiBbJ3JvJ10sXG4gIG5yOiBbMSwgMiwgMjBdLFxuICBmYzogMjBcbn0sIHtcbiAgbG5nczogWydzbCddLFxuICBucjogWzUsIDEsIDIsIDNdLFxuICBmYzogMjFcbn0sIHtcbiAgbG5nczogWydoZScsICdpdyddLFxuICBucjogWzEsIDIsIDIwLCAyMV0sXG4gIGZjOiAyMlxufV07XG5sZXQgX3J1bGVzUGx1cmFsc1R5cGVzID0ge1xuICAxOiBmdW5jdGlvbiAobikge1xuICAgIHJldHVybiBOdW1iZXIobiA+IDEpO1xuICB9LFxuICAyOiBmdW5jdGlvbiAobikge1xuICAgIHJldHVybiBOdW1iZXIobiAhPSAxKTtcbiAgfSxcbiAgMzogZnVuY3Rpb24gKG4pIHtcbiAgICByZXR1cm4gMDtcbiAgfSxcbiAgNDogZnVuY3Rpb24gKG4pIHtcbiAgICByZXR1cm4gTnVtYmVyKG4gJSAxMCA9PSAxICYmIG4gJSAxMDAgIT0gMTEgPyAwIDogbiAlIDEwID49IDIgJiYgbiAlIDEwIDw9IDQgJiYgKG4gJSAxMDAgPCAxMCB8fCBuICUgMTAwID49IDIwKSA/IDEgOiAyKTtcbiAgfSxcbiAgNTogZnVuY3Rpb24gKG4pIHtcbiAgICByZXR1cm4gTnVtYmVyKG4gPT0gMCA/IDAgOiBuID09IDEgPyAxIDogbiA9PSAyID8gMiA6IG4gJSAxMDAgPj0gMyAmJiBuICUgMTAwIDw9IDEwID8gMyA6IG4gJSAxMDAgPj0gMTEgPyA0IDogNSk7XG4gIH0sXG4gIDY6IGZ1bmN0aW9uIChuKSB7XG4gICAgcmV0dXJuIE51bWJlcihuID09IDEgPyAwIDogbiA+PSAyICYmIG4gPD0gNCA/IDEgOiAyKTtcbiAgfSxcbiAgNzogZnVuY3Rpb24gKG4pIHtcbiAgICByZXR1cm4gTnVtYmVyKG4gPT0gMSA/IDAgOiBuICUgMTAgPj0gMiAmJiBuICUgMTAgPD0gNCAmJiAobiAlIDEwMCA8IDEwIHx8IG4gJSAxMDAgPj0gMjApID8gMSA6IDIpO1xuICB9LFxuICA4OiBmdW5jdGlvbiAobikge1xuICAgIHJldHVybiBOdW1iZXIobiA9PSAxID8gMCA6IG4gPT0gMiA/IDEgOiBuICE9IDggJiYgbiAhPSAxMSA/IDIgOiAzKTtcbiAgfSxcbiAgOTogZnVuY3Rpb24gKG4pIHtcbiAgICByZXR1cm4gTnVtYmVyKG4gPj0gMik7XG4gIH0sXG4gIDEwOiBmdW5jdGlvbiAobikge1xuICAgIHJldHVybiBOdW1iZXIobiA9PSAxID8gMCA6IG4gPT0gMiA/IDEgOiBuIDwgNyA/IDIgOiBuIDwgMTEgPyAzIDogNCk7XG4gIH0sXG4gIDExOiBmdW5jdGlvbiAobikge1xuICAgIHJldHVybiBOdW1iZXIobiA9PSAxIHx8IG4gPT0gMTEgPyAwIDogbiA9PSAyIHx8IG4gPT0gMTIgPyAxIDogbiA+IDIgJiYgbiA8IDIwID8gMiA6IDMpO1xuICB9LFxuICAxMjogZnVuY3Rpb24gKG4pIHtcbiAgICByZXR1cm4gTnVtYmVyKG4gJSAxMCAhPSAxIHx8IG4gJSAxMDAgPT0gMTEpO1xuICB9LFxuICAxMzogZnVuY3Rpb24gKG4pIHtcbiAgICByZXR1cm4gTnVtYmVyKG4gIT09IDApO1xuICB9LFxuICAxNDogZnVuY3Rpb24gKG4pIHtcbiAgICByZXR1cm4gTnVtYmVyKG4gPT0gMSA/IDAgOiBuID09IDIgPyAxIDogbiA9PSAzID8gMiA6IDMpO1xuICB9LFxuICAxNTogZnVuY3Rpb24gKG4pIHtcbiAgICByZXR1cm4gTnVtYmVyKG4gJSAxMCA9PSAxICYmIG4gJSAxMDAgIT0gMTEgPyAwIDogbiAlIDEwID49IDIgJiYgKG4gJSAxMDAgPCAxMCB8fCBuICUgMTAwID49IDIwKSA/IDEgOiAyKTtcbiAgfSxcbiAgMTY6IGZ1bmN0aW9uIChuKSB7XG4gICAgcmV0dXJuIE51bWJlcihuICUgMTAgPT0gMSAmJiBuICUgMTAwICE9IDExID8gMCA6IG4gIT09IDAgPyAxIDogMik7XG4gIH0sXG4gIDE3OiBmdW5jdGlvbiAobikge1xuICAgIHJldHVybiBOdW1iZXIobiA9PSAxIHx8IG4gJSAxMCA9PSAxICYmIG4gJSAxMDAgIT0gMTEgPyAwIDogMSk7XG4gIH0sXG4gIDE4OiBmdW5jdGlvbiAobikge1xuICAgIHJldHVybiBOdW1iZXIobiA9PSAwID8gMCA6IG4gPT0gMSA/IDEgOiAyKTtcbiAgfSxcbiAgMTk6IGZ1bmN0aW9uIChuKSB7XG4gICAgcmV0dXJuIE51bWJlcihuID09IDEgPyAwIDogbiA9PSAwIHx8IG4gJSAxMDAgPiAxICYmIG4gJSAxMDAgPCAxMSA/IDEgOiBuICUgMTAwID4gMTAgJiYgbiAlIDEwMCA8IDIwID8gMiA6IDMpO1xuICB9LFxuICAyMDogZnVuY3Rpb24gKG4pIHtcbiAgICByZXR1cm4gTnVtYmVyKG4gPT0gMSA/IDAgOiBuID09IDAgfHwgbiAlIDEwMCA+IDAgJiYgbiAlIDEwMCA8IDIwID8gMSA6IDIpO1xuICB9LFxuICAyMTogZnVuY3Rpb24gKG4pIHtcbiAgICByZXR1cm4gTnVtYmVyKG4gJSAxMDAgPT0gMSA/IDEgOiBuICUgMTAwID09IDIgPyAyIDogbiAlIDEwMCA9PSAzIHx8IG4gJSAxMDAgPT0gNCA/IDMgOiAwKTtcbiAgfSxcbiAgMjI6IGZ1bmN0aW9uIChuKSB7XG4gICAgcmV0dXJuIE51bWJlcihuID09IDEgPyAwIDogbiA9PSAyID8gMSA6IChuIDwgMCB8fCBuID4gMTApICYmIG4gJSAxMCA9PSAwID8gMiA6IDMpO1xuICB9XG59O1xuY29uc3Qgbm9uSW50bFZlcnNpb25zID0gWyd2MScsICd2MicsICd2MyddO1xuY29uc3QgaW50bFZlcnNpb25zID0gWyd2NCddO1xuY29uc3Qgc3VmZml4ZXNPcmRlciA9IHtcbiAgemVybzogMCxcbiAgb25lOiAxLFxuICB0d286IDIsXG4gIGZldzogMyxcbiAgbWFueTogNCxcbiAgb3RoZXI6IDVcbn07XG5mdW5jdGlvbiBjcmVhdGVSdWxlcygpIHtcbiAgY29uc3QgcnVsZXMgPSB7fTtcbiAgc2V0cy5mb3JFYWNoKHNldCA9PiB7XG4gICAgc2V0LmxuZ3MuZm9yRWFjaChsID0+IHtcbiAgICAgIHJ1bGVzW2xdID0ge1xuICAgICAgICBudW1iZXJzOiBzZXQubnIsXG4gICAgICAgIHBsdXJhbHM6IF9ydWxlc1BsdXJhbHNUeXBlc1tzZXQuZmNdXG4gICAgICB9O1xuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIHJ1bGVzO1xufVxuY2xhc3MgUGx1cmFsUmVzb2x2ZXIge1xuICBjb25zdHJ1Y3RvcihsYW5ndWFnZVV0aWxzKSB7XG4gICAgbGV0IG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIHRoaXMubGFuZ3VhZ2VVdGlscyA9IGxhbmd1YWdlVXRpbHM7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLmxvZ2dlciA9IGJhc2VMb2dnZXIuY3JlYXRlKCdwbHVyYWxSZXNvbHZlcicpO1xuICAgIGlmICgoIXRoaXMub3B0aW9ucy5jb21wYXRpYmlsaXR5SlNPTiB8fCBpbnRsVmVyc2lvbnMuaW5jbHVkZXModGhpcy5vcHRpb25zLmNvbXBhdGliaWxpdHlKU09OKSkgJiYgKHR5cGVvZiBJbnRsID09PSAndW5kZWZpbmVkJyB8fCAhSW50bC5QbHVyYWxSdWxlcykpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5jb21wYXRpYmlsaXR5SlNPTiA9ICd2Myc7XG4gICAgICB0aGlzLmxvZ2dlci5lcnJvcignWW91ciBlbnZpcm9ubWVudCBzZWVtcyBub3QgdG8gYmUgSW50bCBBUEkgY29tcGF0aWJsZSwgdXNlIGFuIEludGwuUGx1cmFsUnVsZXMgcG9seWZpbGwuIFdpbGwgZmFsbGJhY2sgdG8gdGhlIGNvbXBhdGliaWxpdHlKU09OIHYzIGZvcm1hdCBoYW5kbGluZy4nKTtcbiAgICB9XG4gICAgdGhpcy5ydWxlcyA9IGNyZWF0ZVJ1bGVzKCk7XG4gIH1cbiAgYWRkUnVsZShsbmcsIG9iaikge1xuICAgIHRoaXMucnVsZXNbbG5nXSA9IG9iajtcbiAgfVxuICBnZXRSdWxlKGNvZGUpIHtcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgaWYgKHRoaXMuc2hvdWxkVXNlSW50bEFwaSgpKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gbmV3IEludGwuUGx1cmFsUnVsZXMoZ2V0Q2xlYW5lZENvZGUoY29kZSksIHtcbiAgICAgICAgICB0eXBlOiBvcHRpb25zLm9yZGluYWwgPyAnb3JkaW5hbCcgOiAnY2FyZGluYWwnXG4gICAgICAgIH0pO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMucnVsZXNbY29kZV0gfHwgdGhpcy5ydWxlc1t0aGlzLmxhbmd1YWdlVXRpbHMuZ2V0TGFuZ3VhZ2VQYXJ0RnJvbUNvZGUoY29kZSldO1xuICB9XG4gIG5lZWRzUGx1cmFsKGNvZGUpIHtcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgY29uc3QgcnVsZSA9IHRoaXMuZ2V0UnVsZShjb2RlLCBvcHRpb25zKTtcbiAgICBpZiAodGhpcy5zaG91bGRVc2VJbnRsQXBpKCkpIHtcbiAgICAgIHJldHVybiBydWxlICYmIHJ1bGUucmVzb2x2ZWRPcHRpb25zKCkucGx1cmFsQ2F0ZWdvcmllcy5sZW5ndGggPiAxO1xuICAgIH1cbiAgICByZXR1cm4gcnVsZSAmJiBydWxlLm51bWJlcnMubGVuZ3RoID4gMTtcbiAgfVxuICBnZXRQbHVyYWxGb3Jtc09mS2V5KGNvZGUsIGtleSkge1xuICAgIGxldCBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcbiAgICByZXR1cm4gdGhpcy5nZXRTdWZmaXhlcyhjb2RlLCBvcHRpb25zKS5tYXAoc3VmZml4ID0+IGAke2tleX0ke3N1ZmZpeH1gKTtcbiAgfVxuICBnZXRTdWZmaXhlcyhjb2RlKSB7XG4gICAgbGV0IG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIGNvbnN0IHJ1bGUgPSB0aGlzLmdldFJ1bGUoY29kZSwgb3B0aW9ucyk7XG4gICAgaWYgKCFydWxlKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGlmICh0aGlzLnNob3VsZFVzZUludGxBcGkoKSkge1xuICAgICAgcmV0dXJuIHJ1bGUucmVzb2x2ZWRPcHRpb25zKCkucGx1cmFsQ2F0ZWdvcmllcy5zb3J0KChwbHVyYWxDYXRlZ29yeTEsIHBsdXJhbENhdGVnb3J5MikgPT4gc3VmZml4ZXNPcmRlcltwbHVyYWxDYXRlZ29yeTFdIC0gc3VmZml4ZXNPcmRlcltwbHVyYWxDYXRlZ29yeTJdKS5tYXAocGx1cmFsQ2F0ZWdvcnkgPT4gYCR7dGhpcy5vcHRpb25zLnByZXBlbmR9JHtvcHRpb25zLm9yZGluYWwgPyBgb3JkaW5hbCR7dGhpcy5vcHRpb25zLnByZXBlbmR9YCA6ICcnfSR7cGx1cmFsQ2F0ZWdvcnl9YCk7XG4gICAgfVxuICAgIHJldHVybiBydWxlLm51bWJlcnMubWFwKG51bWJlciA9PiB0aGlzLmdldFN1ZmZpeChjb2RlLCBudW1iZXIsIG9wdGlvbnMpKTtcbiAgfVxuICBnZXRTdWZmaXgoY29kZSwgY291bnQpIHtcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG4gICAgY29uc3QgcnVsZSA9IHRoaXMuZ2V0UnVsZShjb2RlLCBvcHRpb25zKTtcbiAgICBpZiAocnVsZSkge1xuICAgICAgaWYgKHRoaXMuc2hvdWxkVXNlSW50bEFwaSgpKSB7XG4gICAgICAgIHJldHVybiBgJHt0aGlzLm9wdGlvbnMucHJlcGVuZH0ke29wdGlvbnMub3JkaW5hbCA/IGBvcmRpbmFsJHt0aGlzLm9wdGlvbnMucHJlcGVuZH1gIDogJyd9JHtydWxlLnNlbGVjdChjb3VudCl9YDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLmdldFN1ZmZpeFJldHJvQ29tcGF0aWJsZShydWxlLCBjb3VudCk7XG4gICAgfVxuICAgIHRoaXMubG9nZ2VyLndhcm4oYG5vIHBsdXJhbCBydWxlIGZvdW5kIGZvcjogJHtjb2RlfWApO1xuICAgIHJldHVybiAnJztcbiAgfVxuICBnZXRTdWZmaXhSZXRyb0NvbXBhdGlibGUocnVsZSwgY291bnQpIHtcbiAgICBjb25zdCBpZHggPSBydWxlLm5vQWJzID8gcnVsZS5wbHVyYWxzKGNvdW50KSA6IHJ1bGUucGx1cmFscyhNYXRoLmFicyhjb3VudCkpO1xuICAgIGxldCBzdWZmaXggPSBydWxlLm51bWJlcnNbaWR4XTtcbiAgICBpZiAodGhpcy5vcHRpb25zLnNpbXBsaWZ5UGx1cmFsU3VmZml4ICYmIHJ1bGUubnVtYmVycy5sZW5ndGggPT09IDIgJiYgcnVsZS5udW1iZXJzWzBdID09PSAxKSB7XG4gICAgICBpZiAoc3VmZml4ID09PSAyKSB7XG4gICAgICAgIHN1ZmZpeCA9ICdwbHVyYWwnO1xuICAgICAgfSBlbHNlIGlmIChzdWZmaXggPT09IDEpIHtcbiAgICAgICAgc3VmZml4ID0gJyc7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHJldHVyblN1ZmZpeCA9ICgpID0+IHRoaXMub3B0aW9ucy5wcmVwZW5kICYmIHN1ZmZpeC50b1N0cmluZygpID8gdGhpcy5vcHRpb25zLnByZXBlbmQgKyBzdWZmaXgudG9TdHJpbmcoKSA6IHN1ZmZpeC50b1N0cmluZygpO1xuICAgIGlmICh0aGlzLm9wdGlvbnMuY29tcGF0aWJpbGl0eUpTT04gPT09ICd2MScpIHtcbiAgICAgIGlmIChzdWZmaXggPT09IDEpIHJldHVybiAnJztcbiAgICAgIGlmICh0eXBlb2Ygc3VmZml4ID09PSAnbnVtYmVyJykgcmV0dXJuIGBfcGx1cmFsXyR7c3VmZml4LnRvU3RyaW5nKCl9YDtcbiAgICAgIHJldHVybiByZXR1cm5TdWZmaXgoKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMub3B0aW9ucy5jb21wYXRpYmlsaXR5SlNPTiA9PT0gJ3YyJykge1xuICAgICAgcmV0dXJuIHJldHVyblN1ZmZpeCgpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5vcHRpb25zLnNpbXBsaWZ5UGx1cmFsU3VmZml4ICYmIHJ1bGUubnVtYmVycy5sZW5ndGggPT09IDIgJiYgcnVsZS5udW1iZXJzWzBdID09PSAxKSB7XG4gICAgICByZXR1cm4gcmV0dXJuU3VmZml4KCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLm9wdGlvbnMucHJlcGVuZCAmJiBpZHgudG9TdHJpbmcoKSA/IHRoaXMub3B0aW9ucy5wcmVwZW5kICsgaWR4LnRvU3RyaW5nKCkgOiBpZHgudG9TdHJpbmcoKTtcbiAgfVxuICBzaG91bGRVc2VJbnRsQXBpKCkge1xuICAgIHJldHVybiAhbm9uSW50bFZlcnNpb25zLmluY2x1ZGVzKHRoaXMub3B0aW9ucy5jb21wYXRpYmlsaXR5SlNPTik7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGVlcEZpbmRXaXRoRGVmYXVsdHMoZGF0YSwgZGVmYXVsdERhdGEsIGtleSkge1xuICBsZXQga2V5U2VwYXJhdG9yID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiAnLic7XG4gIGxldCBpZ25vcmVKU09OU3RydWN0dXJlID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiB0cnVlO1xuICBsZXQgcGF0aCA9IGdldFBhdGhXaXRoRGVmYXVsdHMoZGF0YSwgZGVmYXVsdERhdGEsIGtleSk7XG4gIGlmICghcGF0aCAmJiBpZ25vcmVKU09OU3RydWN0dXJlICYmIHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnKSB7XG4gICAgcGF0aCA9IGRlZXBGaW5kKGRhdGEsIGtleSwga2V5U2VwYXJhdG9yKTtcbiAgICBpZiAocGF0aCA9PT0gdW5kZWZpbmVkKSBwYXRoID0gZGVlcEZpbmQoZGVmYXVsdERhdGEsIGtleSwga2V5U2VwYXJhdG9yKTtcbiAgfVxuICByZXR1cm4gcGF0aDtcbn1cbmNsYXNzIEludGVycG9sYXRvciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGxldCBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICB0aGlzLmxvZ2dlciA9IGJhc2VMb2dnZXIuY3JlYXRlKCdpbnRlcnBvbGF0b3InKTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMuZm9ybWF0ID0gb3B0aW9ucy5pbnRlcnBvbGF0aW9uICYmIG9wdGlvbnMuaW50ZXJwb2xhdGlvbi5mb3JtYXQgfHwgKHZhbHVlID0+IHZhbHVlKTtcbiAgICB0aGlzLmluaXQob3B0aW9ucyk7XG4gIH1cbiAgaW5pdCgpIHtcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgaWYgKCFvcHRpb25zLmludGVycG9sYXRpb24pIG9wdGlvbnMuaW50ZXJwb2xhdGlvbiA9IHtcbiAgICAgIGVzY2FwZVZhbHVlOiB0cnVlXG4gICAgfTtcbiAgICBjb25zdCBpT3B0cyA9IG9wdGlvbnMuaW50ZXJwb2xhdGlvbjtcbiAgICB0aGlzLmVzY2FwZSA9IGlPcHRzLmVzY2FwZSAhPT0gdW5kZWZpbmVkID8gaU9wdHMuZXNjYXBlIDogZXNjYXBlO1xuICAgIHRoaXMuZXNjYXBlVmFsdWUgPSBpT3B0cy5lc2NhcGVWYWx1ZSAhPT0gdW5kZWZpbmVkID8gaU9wdHMuZXNjYXBlVmFsdWUgOiB0cnVlO1xuICAgIHRoaXMudXNlUmF3VmFsdWVUb0VzY2FwZSA9IGlPcHRzLnVzZVJhd1ZhbHVlVG9Fc2NhcGUgIT09IHVuZGVmaW5lZCA/IGlPcHRzLnVzZVJhd1ZhbHVlVG9Fc2NhcGUgOiBmYWxzZTtcbiAgICB0aGlzLnByZWZpeCA9IGlPcHRzLnByZWZpeCA/IHJlZ2V4RXNjYXBlKGlPcHRzLnByZWZpeCkgOiBpT3B0cy5wcmVmaXhFc2NhcGVkIHx8ICd7eyc7XG4gICAgdGhpcy5zdWZmaXggPSBpT3B0cy5zdWZmaXggPyByZWdleEVzY2FwZShpT3B0cy5zdWZmaXgpIDogaU9wdHMuc3VmZml4RXNjYXBlZCB8fCAnfX0nO1xuICAgIHRoaXMuZm9ybWF0U2VwYXJhdG9yID0gaU9wdHMuZm9ybWF0U2VwYXJhdG9yID8gaU9wdHMuZm9ybWF0U2VwYXJhdG9yIDogaU9wdHMuZm9ybWF0U2VwYXJhdG9yIHx8ICcsJztcbiAgICB0aGlzLnVuZXNjYXBlUHJlZml4ID0gaU9wdHMudW5lc2NhcGVTdWZmaXggPyAnJyA6IGlPcHRzLnVuZXNjYXBlUHJlZml4IHx8ICctJztcbiAgICB0aGlzLnVuZXNjYXBlU3VmZml4ID0gdGhpcy51bmVzY2FwZVByZWZpeCA/ICcnIDogaU9wdHMudW5lc2NhcGVTdWZmaXggfHwgJyc7XG4gICAgdGhpcy5uZXN0aW5nUHJlZml4ID0gaU9wdHMubmVzdGluZ1ByZWZpeCA/IHJlZ2V4RXNjYXBlKGlPcHRzLm5lc3RpbmdQcmVmaXgpIDogaU9wdHMubmVzdGluZ1ByZWZpeEVzY2FwZWQgfHwgcmVnZXhFc2NhcGUoJyR0KCcpO1xuICAgIHRoaXMubmVzdGluZ1N1ZmZpeCA9IGlPcHRzLm5lc3RpbmdTdWZmaXggPyByZWdleEVzY2FwZShpT3B0cy5uZXN0aW5nU3VmZml4KSA6IGlPcHRzLm5lc3RpbmdTdWZmaXhFc2NhcGVkIHx8IHJlZ2V4RXNjYXBlKCcpJyk7XG4gICAgdGhpcy5uZXN0aW5nT3B0aW9uc1NlcGFyYXRvciA9IGlPcHRzLm5lc3RpbmdPcHRpb25zU2VwYXJhdG9yID8gaU9wdHMubmVzdGluZ09wdGlvbnNTZXBhcmF0b3IgOiBpT3B0cy5uZXN0aW5nT3B0aW9uc1NlcGFyYXRvciB8fCAnLCc7XG4gICAgdGhpcy5tYXhSZXBsYWNlcyA9IGlPcHRzLm1heFJlcGxhY2VzID8gaU9wdHMubWF4UmVwbGFjZXMgOiAxMDAwO1xuICAgIHRoaXMuYWx3YXlzRm9ybWF0ID0gaU9wdHMuYWx3YXlzRm9ybWF0ICE9PSB1bmRlZmluZWQgPyBpT3B0cy5hbHdheXNGb3JtYXQgOiBmYWxzZTtcbiAgICB0aGlzLnJlc2V0UmVnRXhwKCk7XG4gIH1cbiAgcmVzZXQoKSB7XG4gICAgaWYgKHRoaXMub3B0aW9ucykgdGhpcy5pbml0KHRoaXMub3B0aW9ucyk7XG4gIH1cbiAgcmVzZXRSZWdFeHAoKSB7XG4gICAgY29uc3QgcmVnZXhwU3RyID0gYCR7dGhpcy5wcmVmaXh9KC4rPykke3RoaXMuc3VmZml4fWA7XG4gICAgdGhpcy5yZWdleHAgPSBuZXcgUmVnRXhwKHJlZ2V4cFN0ciwgJ2cnKTtcbiAgICBjb25zdCByZWdleHBVbmVzY2FwZVN0ciA9IGAke3RoaXMucHJlZml4fSR7dGhpcy51bmVzY2FwZVByZWZpeH0oLis/KSR7dGhpcy51bmVzY2FwZVN1ZmZpeH0ke3RoaXMuc3VmZml4fWA7XG4gICAgdGhpcy5yZWdleHBVbmVzY2FwZSA9IG5ldyBSZWdFeHAocmVnZXhwVW5lc2NhcGVTdHIsICdnJyk7XG4gICAgY29uc3QgbmVzdGluZ1JlZ2V4cFN0ciA9IGAke3RoaXMubmVzdGluZ1ByZWZpeH0oLis/KSR7dGhpcy5uZXN0aW5nU3VmZml4fWA7XG4gICAgdGhpcy5uZXN0aW5nUmVnZXhwID0gbmV3IFJlZ0V4cChuZXN0aW5nUmVnZXhwU3RyLCAnZycpO1xuICB9XG4gIGludGVycG9sYXRlKHN0ciwgZGF0YSwgbG5nLCBvcHRpb25zKSB7XG4gICAgbGV0IG1hdGNoO1xuICAgIGxldCB2YWx1ZTtcbiAgICBsZXQgcmVwbGFjZXM7XG4gICAgY29uc3QgZGVmYXVsdERhdGEgPSB0aGlzLm9wdGlvbnMgJiYgdGhpcy5vcHRpb25zLmludGVycG9sYXRpb24gJiYgdGhpcy5vcHRpb25zLmludGVycG9sYXRpb24uZGVmYXVsdFZhcmlhYmxlcyB8fCB7fTtcbiAgICBmdW5jdGlvbiByZWdleFNhZmUodmFsKSB7XG4gICAgICByZXR1cm4gdmFsLnJlcGxhY2UoL1xcJC9nLCAnJCQkJCcpO1xuICAgIH1cbiAgICBjb25zdCBoYW5kbGVGb3JtYXQgPSBrZXkgPT4ge1xuICAgICAgaWYgKGtleS5pbmRleE9mKHRoaXMuZm9ybWF0U2VwYXJhdG9yKSA8IDApIHtcbiAgICAgICAgY29uc3QgcGF0aCA9IGRlZXBGaW5kV2l0aERlZmF1bHRzKGRhdGEsIGRlZmF1bHREYXRhLCBrZXksIHRoaXMub3B0aW9ucy5rZXlTZXBhcmF0b3IsIHRoaXMub3B0aW9ucy5pZ25vcmVKU09OU3RydWN0dXJlKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWx3YXlzRm9ybWF0ID8gdGhpcy5mb3JtYXQocGF0aCwgdW5kZWZpbmVkLCBsbmcsIHtcbiAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgIC4uLmRhdGEsXG4gICAgICAgICAgaW50ZXJwb2xhdGlvbmtleToga2V5XG4gICAgICAgIH0pIDogcGF0aDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHAgPSBrZXkuc3BsaXQodGhpcy5mb3JtYXRTZXBhcmF0b3IpO1xuICAgICAgY29uc3QgayA9IHAuc2hpZnQoKS50cmltKCk7XG4gICAgICBjb25zdCBmID0gcC5qb2luKHRoaXMuZm9ybWF0U2VwYXJhdG9yKS50cmltKCk7XG4gICAgICByZXR1cm4gdGhpcy5mb3JtYXQoZGVlcEZpbmRXaXRoRGVmYXVsdHMoZGF0YSwgZGVmYXVsdERhdGEsIGssIHRoaXMub3B0aW9ucy5rZXlTZXBhcmF0b3IsIHRoaXMub3B0aW9ucy5pZ25vcmVKU09OU3RydWN0dXJlKSwgZiwgbG5nLCB7XG4gICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIC4uLmRhdGEsXG4gICAgICAgIGludGVycG9sYXRpb25rZXk6IGtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgdGhpcy5yZXNldFJlZ0V4cCgpO1xuICAgIGNvbnN0IG1pc3NpbmdJbnRlcnBvbGF0aW9uSGFuZGxlciA9IG9wdGlvbnMgJiYgb3B0aW9ucy5taXNzaW5nSW50ZXJwb2xhdGlvbkhhbmRsZXIgfHwgdGhpcy5vcHRpb25zLm1pc3NpbmdJbnRlcnBvbGF0aW9uSGFuZGxlcjtcbiAgICBjb25zdCBza2lwT25WYXJpYWJsZXMgPSBvcHRpb25zICYmIG9wdGlvbnMuaW50ZXJwb2xhdGlvbiAmJiBvcHRpb25zLmludGVycG9sYXRpb24uc2tpcE9uVmFyaWFibGVzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmludGVycG9sYXRpb24uc2tpcE9uVmFyaWFibGVzIDogdGhpcy5vcHRpb25zLmludGVycG9sYXRpb24uc2tpcE9uVmFyaWFibGVzO1xuICAgIGNvbnN0IHRvZG9zID0gW3tcbiAgICAgIHJlZ2V4OiB0aGlzLnJlZ2V4cFVuZXNjYXBlLFxuICAgICAgc2FmZVZhbHVlOiB2YWwgPT4gcmVnZXhTYWZlKHZhbClcbiAgICB9LCB7XG4gICAgICByZWdleDogdGhpcy5yZWdleHAsXG4gICAgICBzYWZlVmFsdWU6IHZhbCA9PiB0aGlzLmVzY2FwZVZhbHVlID8gcmVnZXhTYWZlKHRoaXMuZXNjYXBlKHZhbCkpIDogcmVnZXhTYWZlKHZhbClcbiAgICB9XTtcbiAgICB0b2Rvcy5mb3JFYWNoKHRvZG8gPT4ge1xuICAgICAgcmVwbGFjZXMgPSAwO1xuICAgICAgd2hpbGUgKG1hdGNoID0gdG9kby5yZWdleC5leGVjKHN0cikpIHtcbiAgICAgICAgY29uc3QgbWF0Y2hlZFZhciA9IG1hdGNoWzFdLnRyaW0oKTtcbiAgICAgICAgdmFsdWUgPSBoYW5kbGVGb3JtYXQobWF0Y2hlZFZhcik7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBtaXNzaW5nSW50ZXJwb2xhdGlvbkhhbmRsZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNvbnN0IHRlbXAgPSBtaXNzaW5nSW50ZXJwb2xhdGlvbkhhbmRsZXIoc3RyLCBtYXRjaCwgb3B0aW9ucyk7XG4gICAgICAgICAgICB2YWx1ZSA9IHR5cGVvZiB0ZW1wID09PSAnc3RyaW5nJyA/IHRlbXAgOiAnJztcbiAgICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9wdGlvbnMsIG1hdGNoZWRWYXIpKSB7XG4gICAgICAgICAgICB2YWx1ZSA9ICcnO1xuICAgICAgICAgIH0gZWxzZSBpZiAoc2tpcE9uVmFyaWFibGVzKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IG1hdGNoWzBdO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLndhcm4oYG1pc3NlZCB0byBwYXNzIGluIHZhcmlhYmxlICR7bWF0Y2hlZFZhcn0gZm9yIGludGVycG9sYXRpbmcgJHtzdHJ9YCk7XG4gICAgICAgICAgICB2YWx1ZSA9ICcnO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnICYmICF0aGlzLnVzZVJhd1ZhbHVlVG9Fc2NhcGUpIHtcbiAgICAgICAgICB2YWx1ZSA9IG1ha2VTdHJpbmcodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNhZmVWYWx1ZSA9IHRvZG8uc2FmZVZhbHVlKHZhbHVlKTtcbiAgICAgICAgc3RyID0gc3RyLnJlcGxhY2UobWF0Y2hbMF0sIHNhZmVWYWx1ZSk7XG4gICAgICAgIGlmIChza2lwT25WYXJpYWJsZXMpIHtcbiAgICAgICAgICB0b2RvLnJlZ2V4Lmxhc3RJbmRleCArPSB2YWx1ZS5sZW5ndGg7XG4gICAgICAgICAgdG9kby5yZWdleC5sYXN0SW5kZXggLT0gbWF0Y2hbMF0ubGVuZ3RoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRvZG8ucmVnZXgubGFzdEluZGV4ID0gMDtcbiAgICAgICAgfVxuICAgICAgICByZXBsYWNlcysrO1xuICAgICAgICBpZiAocmVwbGFjZXMgPj0gdGhpcy5tYXhSZXBsYWNlcykge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxuICBuZXN0KHN0ciwgZmMpIHtcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG4gICAgbGV0IG1hdGNoO1xuICAgIGxldCB2YWx1ZTtcbiAgICBsZXQgY2xvbmVkT3B0aW9ucztcbiAgICBmdW5jdGlvbiBoYW5kbGVIYXNPcHRpb25zKGtleSwgaW5oZXJpdGVkT3B0aW9ucykge1xuICAgICAgY29uc3Qgc2VwID0gdGhpcy5uZXN0aW5nT3B0aW9uc1NlcGFyYXRvcjtcbiAgICAgIGlmIChrZXkuaW5kZXhPZihzZXApIDwgMCkgcmV0dXJuIGtleTtcbiAgICAgIGNvbnN0IGMgPSBrZXkuc3BsaXQobmV3IFJlZ0V4cChgJHtzZXB9WyBdKntgKSk7XG4gICAgICBsZXQgb3B0aW9uc1N0cmluZyA9IGB7JHtjWzFdfWA7XG4gICAgICBrZXkgPSBjWzBdO1xuICAgICAgb3B0aW9uc1N0cmluZyA9IHRoaXMuaW50ZXJwb2xhdGUob3B0aW9uc1N0cmluZywgY2xvbmVkT3B0aW9ucyk7XG4gICAgICBjb25zdCBtYXRjaGVkU2luZ2xlUXVvdGVzID0gb3B0aW9uc1N0cmluZy5tYXRjaCgvJy9nKTtcbiAgICAgIGNvbnN0IG1hdGNoZWREb3VibGVRdW90ZXMgPSBvcHRpb25zU3RyaW5nLm1hdGNoKC9cIi9nKTtcbiAgICAgIGlmIChtYXRjaGVkU2luZ2xlUXVvdGVzICYmIG1hdGNoZWRTaW5nbGVRdW90ZXMubGVuZ3RoICUgMiA9PT0gMCAmJiAhbWF0Y2hlZERvdWJsZVF1b3RlcyB8fCBtYXRjaGVkRG91YmxlUXVvdGVzLmxlbmd0aCAlIDIgIT09IDApIHtcbiAgICAgICAgb3B0aW9uc1N0cmluZyA9IG9wdGlvbnNTdHJpbmcucmVwbGFjZSgvJy9nLCAnXCInKTtcbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIGNsb25lZE9wdGlvbnMgPSBKU09OLnBhcnNlKG9wdGlvbnNTdHJpbmcpO1xuICAgICAgICBpZiAoaW5oZXJpdGVkT3B0aW9ucykgY2xvbmVkT3B0aW9ucyA9IHtcbiAgICAgICAgICAuLi5pbmhlcml0ZWRPcHRpb25zLFxuICAgICAgICAgIC4uLmNsb25lZE9wdGlvbnNcbiAgICAgICAgfTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdGhpcy5sb2dnZXIud2FybihgZmFpbGVkIHBhcnNpbmcgb3B0aW9ucyBzdHJpbmcgaW4gbmVzdGluZyBmb3Iga2V5ICR7a2V5fWAsIGUpO1xuICAgICAgICByZXR1cm4gYCR7a2V5fSR7c2VwfSR7b3B0aW9uc1N0cmluZ31gO1xuICAgICAgfVxuICAgICAgZGVsZXRlIGNsb25lZE9wdGlvbnMuZGVmYXVsdFZhbHVlO1xuICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG4gICAgd2hpbGUgKG1hdGNoID0gdGhpcy5uZXN0aW5nUmVnZXhwLmV4ZWMoc3RyKSkge1xuICAgICAgbGV0IGZvcm1hdHRlcnMgPSBbXTtcbiAgICAgIGNsb25lZE9wdGlvbnMgPSB7XG4gICAgICAgIC4uLm9wdGlvbnNcbiAgICAgIH07XG4gICAgICBjbG9uZWRPcHRpb25zID0gY2xvbmVkT3B0aW9ucy5yZXBsYWNlICYmIHR5cGVvZiBjbG9uZWRPcHRpb25zLnJlcGxhY2UgIT09ICdzdHJpbmcnID8gY2xvbmVkT3B0aW9ucy5yZXBsYWNlIDogY2xvbmVkT3B0aW9ucztcbiAgICAgIGNsb25lZE9wdGlvbnMuYXBwbHlQb3N0UHJvY2Vzc29yID0gZmFsc2U7XG4gICAgICBkZWxldGUgY2xvbmVkT3B0aW9ucy5kZWZhdWx0VmFsdWU7XG4gICAgICBsZXQgZG9SZWR1Y2UgPSBmYWxzZTtcbiAgICAgIGlmIChtYXRjaFswXS5pbmRleE9mKHRoaXMuZm9ybWF0U2VwYXJhdG9yKSAhPT0gLTEgJiYgIS97Lip9Ly50ZXN0KG1hdGNoWzFdKSkge1xuICAgICAgICBjb25zdCByID0gbWF0Y2hbMV0uc3BsaXQodGhpcy5mb3JtYXRTZXBhcmF0b3IpLm1hcChlbGVtID0+IGVsZW0udHJpbSgpKTtcbiAgICAgICAgbWF0Y2hbMV0gPSByLnNoaWZ0KCk7XG4gICAgICAgIGZvcm1hdHRlcnMgPSByO1xuICAgICAgICBkb1JlZHVjZSA9IHRydWU7XG4gICAgICB9XG4gICAgICB2YWx1ZSA9IGZjKGhhbmRsZUhhc09wdGlvbnMuY2FsbCh0aGlzLCBtYXRjaFsxXS50cmltKCksIGNsb25lZE9wdGlvbnMpLCBjbG9uZWRPcHRpb25zKTtcbiAgICAgIGlmICh2YWx1ZSAmJiBtYXRjaFswXSA9PT0gc3RyICYmIHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHJldHVybiB2YWx1ZTtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSB2YWx1ZSA9IG1ha2VTdHJpbmcodmFsdWUpO1xuICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICB0aGlzLmxvZ2dlci53YXJuKGBtaXNzZWQgdG8gcmVzb2x2ZSAke21hdGNoWzFdfSBmb3IgbmVzdGluZyAke3N0cn1gKTtcbiAgICAgICAgdmFsdWUgPSAnJztcbiAgICAgIH1cbiAgICAgIGlmIChkb1JlZHVjZSkge1xuICAgICAgICB2YWx1ZSA9IGZvcm1hdHRlcnMucmVkdWNlKCh2LCBmKSA9PiB0aGlzLmZvcm1hdCh2LCBmLCBvcHRpb25zLmxuZywge1xuICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgaW50ZXJwb2xhdGlvbmtleTogbWF0Y2hbMV0udHJpbSgpXG4gICAgICAgIH0pLCB2YWx1ZS50cmltKCkpO1xuICAgICAgfVxuICAgICAgc3RyID0gc3RyLnJlcGxhY2UobWF0Y2hbMF0sIHZhbHVlKTtcbiAgICAgIHRoaXMucmVnZXhwLmxhc3RJbmRleCA9IDA7XG4gICAgfVxuICAgIHJldHVybiBzdHI7XG4gIH1cbn1cblxuZnVuY3Rpb24gcGFyc2VGb3JtYXRTdHIoZm9ybWF0U3RyKSB7XG4gIGxldCBmb3JtYXROYW1lID0gZm9ybWF0U3RyLnRvTG93ZXJDYXNlKCkudHJpbSgpO1xuICBjb25zdCBmb3JtYXRPcHRpb25zID0ge307XG4gIGlmIChmb3JtYXRTdHIuaW5kZXhPZignKCcpID4gLTEpIHtcbiAgICBjb25zdCBwID0gZm9ybWF0U3RyLnNwbGl0KCcoJyk7XG4gICAgZm9ybWF0TmFtZSA9IHBbMF0udG9Mb3dlckNhc2UoKS50cmltKCk7XG4gICAgY29uc3Qgb3B0U3RyID0gcFsxXS5zdWJzdHJpbmcoMCwgcFsxXS5sZW5ndGggLSAxKTtcbiAgICBpZiAoZm9ybWF0TmFtZSA9PT0gJ2N1cnJlbmN5JyAmJiBvcHRTdHIuaW5kZXhPZignOicpIDwgMCkge1xuICAgICAgaWYgKCFmb3JtYXRPcHRpb25zLmN1cnJlbmN5KSBmb3JtYXRPcHRpb25zLmN1cnJlbmN5ID0gb3B0U3RyLnRyaW0oKTtcbiAgICB9IGVsc2UgaWYgKGZvcm1hdE5hbWUgPT09ICdyZWxhdGl2ZXRpbWUnICYmIG9wdFN0ci5pbmRleE9mKCc6JykgPCAwKSB7XG4gICAgICBpZiAoIWZvcm1hdE9wdGlvbnMucmFuZ2UpIGZvcm1hdE9wdGlvbnMucmFuZ2UgPSBvcHRTdHIudHJpbSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBvcHRzID0gb3B0U3RyLnNwbGl0KCc7Jyk7XG4gICAgICBvcHRzLmZvckVhY2gob3B0ID0+IHtcbiAgICAgICAgaWYgKCFvcHQpIHJldHVybjtcbiAgICAgICAgY29uc3QgW2tleSwgLi4ucmVzdF0gPSBvcHQuc3BsaXQoJzonKTtcbiAgICAgICAgY29uc3QgdmFsID0gcmVzdC5qb2luKCc6JykudHJpbSgpLnJlcGxhY2UoL14nK3wnKyQvZywgJycpO1xuICAgICAgICBpZiAoIWZvcm1hdE9wdGlvbnNba2V5LnRyaW0oKV0pIGZvcm1hdE9wdGlvbnNba2V5LnRyaW0oKV0gPSB2YWw7XG4gICAgICAgIGlmICh2YWwgPT09ICdmYWxzZScpIGZvcm1hdE9wdGlvbnNba2V5LnRyaW0oKV0gPSBmYWxzZTtcbiAgICAgICAgaWYgKHZhbCA9PT0gJ3RydWUnKSBmb3JtYXRPcHRpb25zW2tleS50cmltKCldID0gdHJ1ZTtcbiAgICAgICAgaWYgKCFpc05hTih2YWwpKSBmb3JtYXRPcHRpb25zW2tleS50cmltKCldID0gcGFyc2VJbnQodmFsLCAxMCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBmb3JtYXROYW1lLFxuICAgIGZvcm1hdE9wdGlvbnNcbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUNhY2hlZEZvcm1hdHRlcihmbikge1xuICBjb25zdCBjYWNoZSA9IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gaW52b2tlRm9ybWF0dGVyKHZhbCwgbG5nLCBvcHRpb25zKSB7XG4gICAgY29uc3Qga2V5ID0gbG5nICsgSlNPTi5zdHJpbmdpZnkob3B0aW9ucyk7XG4gICAgbGV0IGZvcm1hdHRlciA9IGNhY2hlW2tleV07XG4gICAgaWYgKCFmb3JtYXR0ZXIpIHtcbiAgICAgIGZvcm1hdHRlciA9IGZuKGdldENsZWFuZWRDb2RlKGxuZyksIG9wdGlvbnMpO1xuICAgICAgY2FjaGVba2V5XSA9IGZvcm1hdHRlcjtcbiAgICB9XG4gICAgcmV0dXJuIGZvcm1hdHRlcih2YWwpO1xuICB9O1xufVxuY2xhc3MgRm9ybWF0dGVyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgbGV0IG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgIHRoaXMubG9nZ2VyID0gYmFzZUxvZ2dlci5jcmVhdGUoJ2Zvcm1hdHRlcicpO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5mb3JtYXRzID0ge1xuICAgICAgbnVtYmVyOiBjcmVhdGVDYWNoZWRGb3JtYXR0ZXIoKGxuZywgb3B0KSA9PiB7XG4gICAgICAgIGNvbnN0IGZvcm1hdHRlciA9IG5ldyBJbnRsLk51bWJlckZvcm1hdChsbmcsIHtcbiAgICAgICAgICAuLi5vcHRcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB2YWwgPT4gZm9ybWF0dGVyLmZvcm1hdCh2YWwpO1xuICAgICAgfSksXG4gICAgICBjdXJyZW5jeTogY3JlYXRlQ2FjaGVkRm9ybWF0dGVyKChsbmcsIG9wdCkgPT4ge1xuICAgICAgICBjb25zdCBmb3JtYXR0ZXIgPSBuZXcgSW50bC5OdW1iZXJGb3JtYXQobG5nLCB7XG4gICAgICAgICAgLi4ub3B0LFxuICAgICAgICAgIHN0eWxlOiAnY3VycmVuY3knXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdmFsID0+IGZvcm1hdHRlci5mb3JtYXQodmFsKTtcbiAgICAgIH0pLFxuICAgICAgZGF0ZXRpbWU6IGNyZWF0ZUNhY2hlZEZvcm1hdHRlcigobG5nLCBvcHQpID0+IHtcbiAgICAgICAgY29uc3QgZm9ybWF0dGVyID0gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQobG5nLCB7XG4gICAgICAgICAgLi4ub3B0XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdmFsID0+IGZvcm1hdHRlci5mb3JtYXQodmFsKTtcbiAgICAgIH0pLFxuICAgICAgcmVsYXRpdmV0aW1lOiBjcmVhdGVDYWNoZWRGb3JtYXR0ZXIoKGxuZywgb3B0KSA9PiB7XG4gICAgICAgIGNvbnN0IGZvcm1hdHRlciA9IG5ldyBJbnRsLlJlbGF0aXZlVGltZUZvcm1hdChsbmcsIHtcbiAgICAgICAgICAuLi5vcHRcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB2YWwgPT4gZm9ybWF0dGVyLmZvcm1hdCh2YWwsIG9wdC5yYW5nZSB8fCAnZGF5Jyk7XG4gICAgICB9KSxcbiAgICAgIGxpc3Q6IGNyZWF0ZUNhY2hlZEZvcm1hdHRlcigobG5nLCBvcHQpID0+IHtcbiAgICAgICAgY29uc3QgZm9ybWF0dGVyID0gbmV3IEludGwuTGlzdEZvcm1hdChsbmcsIHtcbiAgICAgICAgICAuLi5vcHRcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB2YWwgPT4gZm9ybWF0dGVyLmZvcm1hdCh2YWwpO1xuICAgICAgfSlcbiAgICB9O1xuICAgIHRoaXMuaW5pdChvcHRpb25zKTtcbiAgfVxuICBpbml0KHNlcnZpY2VzKSB7XG4gICAgbGV0IG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHtcbiAgICAgIGludGVycG9sYXRpb246IHt9XG4gICAgfTtcbiAgICBjb25zdCBpT3B0cyA9IG9wdGlvbnMuaW50ZXJwb2xhdGlvbjtcbiAgICB0aGlzLmZvcm1hdFNlcGFyYXRvciA9IGlPcHRzLmZvcm1hdFNlcGFyYXRvciA/IGlPcHRzLmZvcm1hdFNlcGFyYXRvciA6IGlPcHRzLmZvcm1hdFNlcGFyYXRvciB8fCAnLCc7XG4gIH1cbiAgYWRkKG5hbWUsIGZjKSB7XG4gICAgdGhpcy5mb3JtYXRzW25hbWUudG9Mb3dlckNhc2UoKS50cmltKCldID0gZmM7XG4gIH1cbiAgYWRkQ2FjaGVkKG5hbWUsIGZjKSB7XG4gICAgdGhpcy5mb3JtYXRzW25hbWUudG9Mb3dlckNhc2UoKS50cmltKCldID0gY3JlYXRlQ2FjaGVkRm9ybWF0dGVyKGZjKTtcbiAgfVxuICBmb3JtYXQodmFsdWUsIGZvcm1hdCwgbG5nKSB7XG4gICAgbGV0IG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IHt9O1xuICAgIGNvbnN0IGZvcm1hdHMgPSBmb3JtYXQuc3BsaXQodGhpcy5mb3JtYXRTZXBhcmF0b3IpO1xuICAgIGNvbnN0IHJlc3VsdCA9IGZvcm1hdHMucmVkdWNlKChtZW0sIGYpID0+IHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgZm9ybWF0TmFtZSxcbiAgICAgICAgZm9ybWF0T3B0aW9uc1xuICAgICAgfSA9IHBhcnNlRm9ybWF0U3RyKGYpO1xuICAgICAgaWYgKHRoaXMuZm9ybWF0c1tmb3JtYXROYW1lXSkge1xuICAgICAgICBsZXQgZm9ybWF0dGVkID0gbWVtO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IHZhbE9wdGlvbnMgPSBvcHRpb25zICYmIG9wdGlvbnMuZm9ybWF0UGFyYW1zICYmIG9wdGlvbnMuZm9ybWF0UGFyYW1zW29wdGlvbnMuaW50ZXJwb2xhdGlvbmtleV0gfHwge307XG4gICAgICAgICAgY29uc3QgbCA9IHZhbE9wdGlvbnMubG9jYWxlIHx8IHZhbE9wdGlvbnMubG5nIHx8IG9wdGlvbnMubG9jYWxlIHx8IG9wdGlvbnMubG5nIHx8IGxuZztcbiAgICAgICAgICBmb3JtYXR0ZWQgPSB0aGlzLmZvcm1hdHNbZm9ybWF0TmFtZV0obWVtLCBsLCB7XG4gICAgICAgICAgICAuLi5mb3JtYXRPcHRpb25zLFxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIC4uLnZhbE9wdGlvbnNcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICB0aGlzLmxvZ2dlci53YXJuKGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZm9ybWF0dGVkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5sb2dnZXIud2FybihgdGhlcmUgd2FzIG5vIGZvcm1hdCBmdW5jdGlvbiBmb3IgJHtmb3JtYXROYW1lfWApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1lbTtcbiAgICB9LCB2YWx1ZSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufVxuXG5mdW5jdGlvbiByZW1vdmVQZW5kaW5nKHEsIG5hbWUpIHtcbiAgaWYgKHEucGVuZGluZ1tuYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZGVsZXRlIHEucGVuZGluZ1tuYW1lXTtcbiAgICBxLnBlbmRpbmdDb3VudC0tO1xuICB9XG59XG5jbGFzcyBDb25uZWN0b3IgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICBjb25zdHJ1Y3RvcihiYWNrZW5kLCBzdG9yZSwgc2VydmljZXMpIHtcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDoge307XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmJhY2tlbmQgPSBiYWNrZW5kO1xuICAgIHRoaXMuc3RvcmUgPSBzdG9yZTtcbiAgICB0aGlzLnNlcnZpY2VzID0gc2VydmljZXM7XG4gICAgdGhpcy5sYW5ndWFnZVV0aWxzID0gc2VydmljZXMubGFuZ3VhZ2VVdGlscztcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMubG9nZ2VyID0gYmFzZUxvZ2dlci5jcmVhdGUoJ2JhY2tlbmRDb25uZWN0b3InKTtcbiAgICB0aGlzLndhaXRpbmdSZWFkcyA9IFtdO1xuICAgIHRoaXMubWF4UGFyYWxsZWxSZWFkcyA9IG9wdGlvbnMubWF4UGFyYWxsZWxSZWFkcyB8fCAxMDtcbiAgICB0aGlzLnJlYWRpbmdDYWxscyA9IDA7XG4gICAgdGhpcy5tYXhSZXRyaWVzID0gb3B0aW9ucy5tYXhSZXRyaWVzID49IDAgPyBvcHRpb25zLm1heFJldHJpZXMgOiA1O1xuICAgIHRoaXMucmV0cnlUaW1lb3V0ID0gb3B0aW9ucy5yZXRyeVRpbWVvdXQgPj0gMSA/IG9wdGlvbnMucmV0cnlUaW1lb3V0IDogMzUwO1xuICAgIHRoaXMuc3RhdGUgPSB7fTtcbiAgICB0aGlzLnF1ZXVlID0gW107XG4gICAgaWYgKHRoaXMuYmFja2VuZCAmJiB0aGlzLmJhY2tlbmQuaW5pdCkge1xuICAgICAgdGhpcy5iYWNrZW5kLmluaXQoc2VydmljZXMsIG9wdGlvbnMuYmFja2VuZCwgb3B0aW9ucyk7XG4gICAgfVxuICB9XG4gIHF1ZXVlTG9hZChsYW5ndWFnZXMsIG5hbWVzcGFjZXMsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgY29uc3QgdG9Mb2FkID0ge307XG4gICAgY29uc3QgcGVuZGluZyA9IHt9O1xuICAgIGNvbnN0IHRvTG9hZExhbmd1YWdlcyA9IHt9O1xuICAgIGNvbnN0IHRvTG9hZE5hbWVzcGFjZXMgPSB7fTtcbiAgICBsYW5ndWFnZXMuZm9yRWFjaChsbmcgPT4ge1xuICAgICAgbGV0IGhhc0FsbE5hbWVzcGFjZXMgPSB0cnVlO1xuICAgICAgbmFtZXNwYWNlcy5mb3JFYWNoKG5zID0+IHtcbiAgICAgICAgY29uc3QgbmFtZSA9IGAke2xuZ318JHtuc31gO1xuICAgICAgICBpZiAoIW9wdGlvbnMucmVsb2FkICYmIHRoaXMuc3RvcmUuaGFzUmVzb3VyY2VCdW5kbGUobG5nLCBucykpIHtcbiAgICAgICAgICB0aGlzLnN0YXRlW25hbWVdID0gMjtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnN0YXRlW25hbWVdIDwgMCkgOyBlbHNlIGlmICh0aGlzLnN0YXRlW25hbWVdID09PSAxKSB7XG4gICAgICAgICAgaWYgKHBlbmRpbmdbbmFtZV0gPT09IHVuZGVmaW5lZCkgcGVuZGluZ1tuYW1lXSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5zdGF0ZVtuYW1lXSA9IDE7XG4gICAgICAgICAgaGFzQWxsTmFtZXNwYWNlcyA9IGZhbHNlO1xuICAgICAgICAgIGlmIChwZW5kaW5nW25hbWVdID09PSB1bmRlZmluZWQpIHBlbmRpbmdbbmFtZV0gPSB0cnVlO1xuICAgICAgICAgIGlmICh0b0xvYWRbbmFtZV0gPT09IHVuZGVmaW5lZCkgdG9Mb2FkW25hbWVdID0gdHJ1ZTtcbiAgICAgICAgICBpZiAodG9Mb2FkTmFtZXNwYWNlc1tuc10gPT09IHVuZGVmaW5lZCkgdG9Mb2FkTmFtZXNwYWNlc1tuc10gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmICghaGFzQWxsTmFtZXNwYWNlcykgdG9Mb2FkTGFuZ3VhZ2VzW2xuZ10gPSB0cnVlO1xuICAgIH0pO1xuICAgIGlmIChPYmplY3Qua2V5cyh0b0xvYWQpLmxlbmd0aCB8fCBPYmplY3Qua2V5cyhwZW5kaW5nKS5sZW5ndGgpIHtcbiAgICAgIHRoaXMucXVldWUucHVzaCh7XG4gICAgICAgIHBlbmRpbmcsXG4gICAgICAgIHBlbmRpbmdDb3VudDogT2JqZWN0LmtleXMocGVuZGluZykubGVuZ3RoLFxuICAgICAgICBsb2FkZWQ6IHt9LFxuICAgICAgICBlcnJvcnM6IFtdLFxuICAgICAgICBjYWxsYmFja1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICB0b0xvYWQ6IE9iamVjdC5rZXlzKHRvTG9hZCksXG4gICAgICBwZW5kaW5nOiBPYmplY3Qua2V5cyhwZW5kaW5nKSxcbiAgICAgIHRvTG9hZExhbmd1YWdlczogT2JqZWN0LmtleXModG9Mb2FkTGFuZ3VhZ2VzKSxcbiAgICAgIHRvTG9hZE5hbWVzcGFjZXM6IE9iamVjdC5rZXlzKHRvTG9hZE5hbWVzcGFjZXMpXG4gICAgfTtcbiAgfVxuICBsb2FkZWQobmFtZSwgZXJyLCBkYXRhKSB7XG4gICAgY29uc3QgcyA9IG5hbWUuc3BsaXQoJ3wnKTtcbiAgICBjb25zdCBsbmcgPSBzWzBdO1xuICAgIGNvbnN0IG5zID0gc1sxXTtcbiAgICBpZiAoZXJyKSB0aGlzLmVtaXQoJ2ZhaWxlZExvYWRpbmcnLCBsbmcsIG5zLCBlcnIpO1xuICAgIGlmIChkYXRhKSB7XG4gICAgICB0aGlzLnN0b3JlLmFkZFJlc291cmNlQnVuZGxlKGxuZywgbnMsIGRhdGEpO1xuICAgIH1cbiAgICB0aGlzLnN0YXRlW25hbWVdID0gZXJyID8gLTEgOiAyO1xuICAgIGNvbnN0IGxvYWRlZCA9IHt9O1xuICAgIHRoaXMucXVldWUuZm9yRWFjaChxID0+IHtcbiAgICAgIHB1c2hQYXRoKHEubG9hZGVkLCBbbG5nXSwgbnMpO1xuICAgICAgcmVtb3ZlUGVuZGluZyhxLCBuYW1lKTtcbiAgICAgIGlmIChlcnIpIHEuZXJyb3JzLnB1c2goZXJyKTtcbiAgICAgIGlmIChxLnBlbmRpbmdDb3VudCA9PT0gMCAmJiAhcS5kb25lKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKHEubG9hZGVkKS5mb3JFYWNoKGwgPT4ge1xuICAgICAgICAgIGlmICghbG9hZGVkW2xdKSBsb2FkZWRbbF0gPSB7fTtcbiAgICAgICAgICBjb25zdCBsb2FkZWRLZXlzID0gcS5sb2FkZWRbbF07XG4gICAgICAgICAgaWYgKGxvYWRlZEtleXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBsb2FkZWRLZXlzLmZvckVhY2gobiA9PiB7XG4gICAgICAgICAgICAgIGlmIChsb2FkZWRbbF1bbl0gPT09IHVuZGVmaW5lZCkgbG9hZGVkW2xdW25dID0gdHJ1ZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHEuZG9uZSA9IHRydWU7XG4gICAgICAgIGlmIChxLmVycm9ycy5sZW5ndGgpIHtcbiAgICAgICAgICBxLmNhbGxiYWNrKHEuZXJyb3JzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBxLmNhbGxiYWNrKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLmVtaXQoJ2xvYWRlZCcsIGxvYWRlZCk7XG4gICAgdGhpcy5xdWV1ZSA9IHRoaXMucXVldWUuZmlsdGVyKHEgPT4gIXEuZG9uZSk7XG4gIH1cbiAgcmVhZChsbmcsIG5zLCBmY05hbWUpIHtcbiAgICBsZXQgdHJpZWQgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IDA7XG4gICAgbGV0IHdhaXQgPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IHRoaXMucmV0cnlUaW1lb3V0O1xuICAgIGxldCBjYWxsYmFjayA9IGFyZ3VtZW50cy5sZW5ndGggPiA1ID8gYXJndW1lbnRzWzVdIDogdW5kZWZpbmVkO1xuICAgIGlmICghbG5nLmxlbmd0aCkgcmV0dXJuIGNhbGxiYWNrKG51bGwsIHt9KTtcbiAgICBpZiAodGhpcy5yZWFkaW5nQ2FsbHMgPj0gdGhpcy5tYXhQYXJhbGxlbFJlYWRzKSB7XG4gICAgICB0aGlzLndhaXRpbmdSZWFkcy5wdXNoKHtcbiAgICAgICAgbG5nLFxuICAgICAgICBucyxcbiAgICAgICAgZmNOYW1lLFxuICAgICAgICB0cmllZCxcbiAgICAgICAgd2FpdCxcbiAgICAgICAgY2FsbGJhY2tcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnJlYWRpbmdDYWxscysrO1xuICAgIGNvbnN0IHJlc29sdmVyID0gKGVyciwgZGF0YSkgPT4ge1xuICAgICAgdGhpcy5yZWFkaW5nQ2FsbHMtLTtcbiAgICAgIGlmICh0aGlzLndhaXRpbmdSZWFkcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IG5leHQgPSB0aGlzLndhaXRpbmdSZWFkcy5zaGlmdCgpO1xuICAgICAgICB0aGlzLnJlYWQobmV4dC5sbmcsIG5leHQubnMsIG5leHQuZmNOYW1lLCBuZXh0LnRyaWVkLCBuZXh0LndhaXQsIG5leHQuY2FsbGJhY2spO1xuICAgICAgfVxuICAgICAgaWYgKGVyciAmJiBkYXRhICYmIHRyaWVkIDwgdGhpcy5tYXhSZXRyaWVzKSB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHRoaXMucmVhZC5jYWxsKHRoaXMsIGxuZywgbnMsIGZjTmFtZSwgdHJpZWQgKyAxLCB3YWl0ICogMiwgY2FsbGJhY2spO1xuICAgICAgICB9LCB3YWl0KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY2FsbGJhY2soZXJyLCBkYXRhKTtcbiAgICB9O1xuICAgIGNvbnN0IGZjID0gdGhpcy5iYWNrZW5kW2ZjTmFtZV0uYmluZCh0aGlzLmJhY2tlbmQpO1xuICAgIGlmIChmYy5sZW5ndGggPT09IDIpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHIgPSBmYyhsbmcsIG5zKTtcbiAgICAgICAgaWYgKHIgJiYgdHlwZW9mIHIudGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHIudGhlbihkYXRhID0+IHJlc29sdmVyKG51bGwsIGRhdGEpKS5jYXRjaChyZXNvbHZlcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzb2x2ZXIobnVsbCwgcik7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICByZXNvbHZlcihlcnIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXR1cm4gZmMobG5nLCBucywgcmVzb2x2ZXIpO1xuICB9XG4gIHByZXBhcmVMb2FkaW5nKGxhbmd1YWdlcywgbmFtZXNwYWNlcykge1xuICAgIGxldCBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcbiAgICBsZXQgY2FsbGJhY2sgPSBhcmd1bWVudHMubGVuZ3RoID4gMyA/IGFyZ3VtZW50c1szXSA6IHVuZGVmaW5lZDtcbiAgICBpZiAoIXRoaXMuYmFja2VuZCkge1xuICAgICAgdGhpcy5sb2dnZXIud2FybignTm8gYmFja2VuZCB3YXMgYWRkZWQgdmlhIGkxOG5leHQudXNlLiBXaWxsIG5vdCBsb2FkIHJlc291cmNlcy4nKTtcbiAgICAgIHJldHVybiBjYWxsYmFjayAmJiBjYWxsYmFjaygpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGxhbmd1YWdlcyA9PT0gJ3N0cmluZycpIGxhbmd1YWdlcyA9IHRoaXMubGFuZ3VhZ2VVdGlscy50b1Jlc29sdmVIaWVyYXJjaHkobGFuZ3VhZ2VzKTtcbiAgICBpZiAodHlwZW9mIG5hbWVzcGFjZXMgPT09ICdzdHJpbmcnKSBuYW1lc3BhY2VzID0gW25hbWVzcGFjZXNdO1xuICAgIGNvbnN0IHRvTG9hZCA9IHRoaXMucXVldWVMb2FkKGxhbmd1YWdlcywgbmFtZXNwYWNlcywgb3B0aW9ucywgY2FsbGJhY2spO1xuICAgIGlmICghdG9Mb2FkLnRvTG9hZC5sZW5ndGgpIHtcbiAgICAgIGlmICghdG9Mb2FkLnBlbmRpbmcubGVuZ3RoKSBjYWxsYmFjaygpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHRvTG9hZC50b0xvYWQuZm9yRWFjaChuYW1lID0+IHtcbiAgICAgIHRoaXMubG9hZE9uZShuYW1lKTtcbiAgICB9KTtcbiAgfVxuICBsb2FkKGxhbmd1YWdlcywgbmFtZXNwYWNlcywgY2FsbGJhY2spIHtcbiAgICB0aGlzLnByZXBhcmVMb2FkaW5nKGxhbmd1YWdlcywgbmFtZXNwYWNlcywge30sIGNhbGxiYWNrKTtcbiAgfVxuICByZWxvYWQobGFuZ3VhZ2VzLCBuYW1lc3BhY2VzLCBjYWxsYmFjaykge1xuICAgIHRoaXMucHJlcGFyZUxvYWRpbmcobGFuZ3VhZ2VzLCBuYW1lc3BhY2VzLCB7XG4gICAgICByZWxvYWQ6IHRydWVcbiAgICB9LCBjYWxsYmFjayk7XG4gIH1cbiAgbG9hZE9uZShuYW1lKSB7XG4gICAgbGV0IHByZWZpeCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJyc7XG4gICAgY29uc3QgcyA9IG5hbWUuc3BsaXQoJ3wnKTtcbiAgICBjb25zdCBsbmcgPSBzWzBdO1xuICAgIGNvbnN0IG5zID0gc1sxXTtcbiAgICB0aGlzLnJlYWQobG5nLCBucywgJ3JlYWQnLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgKGVyciwgZGF0YSkgPT4ge1xuICAgICAgaWYgKGVycikgdGhpcy5sb2dnZXIud2FybihgJHtwcmVmaXh9bG9hZGluZyBuYW1lc3BhY2UgJHtuc30gZm9yIGxhbmd1YWdlICR7bG5nfSBmYWlsZWRgLCBlcnIpO1xuICAgICAgaWYgKCFlcnIgJiYgZGF0YSkgdGhpcy5sb2dnZXIubG9nKGAke3ByZWZpeH1sb2FkZWQgbmFtZXNwYWNlICR7bnN9IGZvciBsYW5ndWFnZSAke2xuZ31gLCBkYXRhKTtcbiAgICAgIHRoaXMubG9hZGVkKG5hbWUsIGVyciwgZGF0YSk7XG4gICAgfSk7XG4gIH1cbiAgc2F2ZU1pc3NpbmcobGFuZ3VhZ2VzLCBuYW1lc3BhY2UsIGtleSwgZmFsbGJhY2tWYWx1ZSwgaXNVcGRhdGUpIHtcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiA1ICYmIGFyZ3VtZW50c1s1XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzVdIDoge307XG4gICAgbGV0IGNsYiA9IGFyZ3VtZW50cy5sZW5ndGggPiA2ICYmIGFyZ3VtZW50c1s2XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzZdIDogKCkgPT4ge307XG4gICAgaWYgKHRoaXMuc2VydmljZXMudXRpbHMgJiYgdGhpcy5zZXJ2aWNlcy51dGlscy5oYXNMb2FkZWROYW1lc3BhY2UgJiYgIXRoaXMuc2VydmljZXMudXRpbHMuaGFzTG9hZGVkTmFtZXNwYWNlKG5hbWVzcGFjZSkpIHtcbiAgICAgIHRoaXMubG9nZ2VyLndhcm4oYGRpZCBub3Qgc2F2ZSBrZXkgXCIke2tleX1cIiBhcyB0aGUgbmFtZXNwYWNlIFwiJHtuYW1lc3BhY2V9XCIgd2FzIG5vdCB5ZXQgbG9hZGVkYCwgJ1RoaXMgbWVhbnMgc29tZXRoaW5nIElTIFdST05HIGluIHlvdXIgc2V0dXAuIFlvdSBhY2Nlc3MgdGhlIHQgZnVuY3Rpb24gYmVmb3JlIGkxOG5leHQuaW5pdCAvIGkxOG5leHQubG9hZE5hbWVzcGFjZSAvIGkxOG5leHQuY2hhbmdlTGFuZ3VhZ2Ugd2FzIGRvbmUuIFdhaXQgZm9yIHRoZSBjYWxsYmFjayBvciBQcm9taXNlIHRvIHJlc29sdmUgYmVmb3JlIGFjY2Vzc2luZyBpdCEhIScpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoa2V5ID09PSB1bmRlZmluZWQgfHwga2V5ID09PSBudWxsIHx8IGtleSA9PT0gJycpIHJldHVybjtcbiAgICBpZiAodGhpcy5iYWNrZW5kICYmIHRoaXMuYmFja2VuZC5jcmVhdGUpIHtcbiAgICAgIGNvbnN0IG9wdHMgPSB7XG4gICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIGlzVXBkYXRlXG4gICAgICB9O1xuICAgICAgY29uc3QgZmMgPSB0aGlzLmJhY2tlbmQuY3JlYXRlLmJpbmQodGhpcy5iYWNrZW5kKTtcbiAgICAgIGlmIChmYy5sZW5ndGggPCA2KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgbGV0IHI7XG4gICAgICAgICAgaWYgKGZjLmxlbmd0aCA9PT0gNSkge1xuICAgICAgICAgICAgciA9IGZjKGxhbmd1YWdlcywgbmFtZXNwYWNlLCBrZXksIGZhbGxiYWNrVmFsdWUsIG9wdHMpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByID0gZmMobGFuZ3VhZ2VzLCBuYW1lc3BhY2UsIGtleSwgZmFsbGJhY2tWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChyICYmIHR5cGVvZiByLnRoZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHIudGhlbihkYXRhID0+IGNsYihudWxsLCBkYXRhKSkuY2F0Y2goY2xiKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2xiKG51bGwsIHIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgY2xiKGVycik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZjKGxhbmd1YWdlcywgbmFtZXNwYWNlLCBrZXksIGZhbGxiYWNrVmFsdWUsIGNsYiwgb3B0cyk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghbGFuZ3VhZ2VzIHx8ICFsYW5ndWFnZXNbMF0pIHJldHVybjtcbiAgICB0aGlzLnN0b3JlLmFkZFJlc291cmNlKGxhbmd1YWdlc1swXSwgbmFtZXNwYWNlLCBrZXksIGZhbGxiYWNrVmFsdWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldCgpIHtcbiAgcmV0dXJuIHtcbiAgICBkZWJ1ZzogZmFsc2UsXG4gICAgaW5pdEltbWVkaWF0ZTogdHJ1ZSxcbiAgICBuczogWyd0cmFuc2xhdGlvbiddLFxuICAgIGRlZmF1bHROUzogWyd0cmFuc2xhdGlvbiddLFxuICAgIGZhbGxiYWNrTG5nOiBbJ2RldiddLFxuICAgIGZhbGxiYWNrTlM6IGZhbHNlLFxuICAgIHN1cHBvcnRlZExuZ3M6IGZhbHNlLFxuICAgIG5vbkV4cGxpY2l0U3VwcG9ydGVkTG5nczogZmFsc2UsXG4gICAgbG9hZDogJ2FsbCcsXG4gICAgcHJlbG9hZDogZmFsc2UsXG4gICAgc2ltcGxpZnlQbHVyYWxTdWZmaXg6IHRydWUsXG4gICAga2V5U2VwYXJhdG9yOiAnLicsXG4gICAgbnNTZXBhcmF0b3I6ICc6JyxcbiAgICBwbHVyYWxTZXBhcmF0b3I6ICdfJyxcbiAgICBjb250ZXh0U2VwYXJhdG9yOiAnXycsXG4gICAgcGFydGlhbEJ1bmRsZWRMYW5ndWFnZXM6IGZhbHNlLFxuICAgIHNhdmVNaXNzaW5nOiBmYWxzZSxcbiAgICB1cGRhdGVNaXNzaW5nOiBmYWxzZSxcbiAgICBzYXZlTWlzc2luZ1RvOiAnZmFsbGJhY2snLFxuICAgIHNhdmVNaXNzaW5nUGx1cmFsczogdHJ1ZSxcbiAgICBtaXNzaW5nS2V5SGFuZGxlcjogZmFsc2UsXG4gICAgbWlzc2luZ0ludGVycG9sYXRpb25IYW5kbGVyOiBmYWxzZSxcbiAgICBwb3N0UHJvY2VzczogZmFsc2UsXG4gICAgcG9zdFByb2Nlc3NQYXNzUmVzb2x2ZWQ6IGZhbHNlLFxuICAgIHJldHVybk51bGw6IGZhbHNlLFxuICAgIHJldHVybkVtcHR5U3RyaW5nOiB0cnVlLFxuICAgIHJldHVybk9iamVjdHM6IGZhbHNlLFxuICAgIGpvaW5BcnJheXM6IGZhbHNlLFxuICAgIHJldHVybmVkT2JqZWN0SGFuZGxlcjogZmFsc2UsXG4gICAgcGFyc2VNaXNzaW5nS2V5SGFuZGxlcjogZmFsc2UsXG4gICAgYXBwZW5kTmFtZXNwYWNlVG9NaXNzaW5nS2V5OiBmYWxzZSxcbiAgICBhcHBlbmROYW1lc3BhY2VUb0NJTW9kZTogZmFsc2UsXG4gICAgb3ZlcmxvYWRUcmFuc2xhdGlvbk9wdGlvbkhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZShhcmdzKSB7XG4gICAgICBsZXQgcmV0ID0ge307XG4gICAgICBpZiAodHlwZW9mIGFyZ3NbMV0gPT09ICdvYmplY3QnKSByZXQgPSBhcmdzWzFdO1xuICAgICAgaWYgKHR5cGVvZiBhcmdzWzFdID09PSAnc3RyaW5nJykgcmV0LmRlZmF1bHRWYWx1ZSA9IGFyZ3NbMV07XG4gICAgICBpZiAodHlwZW9mIGFyZ3NbMl0gPT09ICdzdHJpbmcnKSByZXQudERlc2NyaXB0aW9uID0gYXJnc1syXTtcbiAgICAgIGlmICh0eXBlb2YgYXJnc1syXSA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIGFyZ3NbM10gPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSBhcmdzWzNdIHx8IGFyZ3NbMl07XG4gICAgICAgIE9iamVjdC5rZXlzKG9wdGlvbnMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgICByZXRba2V5XSA9IG9wdGlvbnNba2V5XTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmV0O1xuICAgIH0sXG4gICAgaW50ZXJwb2xhdGlvbjoge1xuICAgICAgZXNjYXBlVmFsdWU6IHRydWUsXG4gICAgICBmb3JtYXQ6ICh2YWx1ZSwgZm9ybWF0LCBsbmcsIG9wdGlvbnMpID0+IHZhbHVlLFxuICAgICAgcHJlZml4OiAne3snLFxuICAgICAgc3VmZml4OiAnfX0nLFxuICAgICAgZm9ybWF0U2VwYXJhdG9yOiAnLCcsXG4gICAgICB1bmVzY2FwZVByZWZpeDogJy0nLFxuICAgICAgbmVzdGluZ1ByZWZpeDogJyR0KCcsXG4gICAgICBuZXN0aW5nU3VmZml4OiAnKScsXG4gICAgICBuZXN0aW5nT3B0aW9uc1NlcGFyYXRvcjogJywnLFxuICAgICAgbWF4UmVwbGFjZXM6IDEwMDAsXG4gICAgICBza2lwT25WYXJpYWJsZXM6IHRydWVcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiB0cmFuc2Zvcm1PcHRpb25zKG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBvcHRpb25zLm5zID09PSAnc3RyaW5nJykgb3B0aW9ucy5ucyA9IFtvcHRpb25zLm5zXTtcbiAgaWYgKHR5cGVvZiBvcHRpb25zLmZhbGxiYWNrTG5nID09PSAnc3RyaW5nJykgb3B0aW9ucy5mYWxsYmFja0xuZyA9IFtvcHRpb25zLmZhbGxiYWNrTG5nXTtcbiAgaWYgKHR5cGVvZiBvcHRpb25zLmZhbGxiYWNrTlMgPT09ICdzdHJpbmcnKSBvcHRpb25zLmZhbGxiYWNrTlMgPSBbb3B0aW9ucy5mYWxsYmFja05TXTtcbiAgaWYgKG9wdGlvbnMuc3VwcG9ydGVkTG5ncyAmJiBvcHRpb25zLnN1cHBvcnRlZExuZ3MuaW5kZXhPZignY2ltb2RlJykgPCAwKSB7XG4gICAgb3B0aW9ucy5zdXBwb3J0ZWRMbmdzID0gb3B0aW9ucy5zdXBwb3J0ZWRMbmdzLmNvbmNhdChbJ2NpbW9kZSddKTtcbiAgfVxuICByZXR1cm4gb3B0aW9ucztcbn1cblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5mdW5jdGlvbiBiaW5kTWVtYmVyRnVuY3Rpb25zKGluc3QpIHtcbiAgY29uc3QgbWVtcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE9iamVjdC5nZXRQcm90b3R5cGVPZihpbnN0KSk7XG4gIG1lbXMuZm9yRWFjaChtZW0gPT4ge1xuICAgIGlmICh0eXBlb2YgaW5zdFttZW1dID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpbnN0W21lbV0gPSBpbnN0W21lbV0uYmluZChpbnN0KTtcbiAgICB9XG4gIH0pO1xufVxuY2xhc3MgSTE4biBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGxldCBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICBsZXQgY2FsbGJhY2sgPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMub3B0aW9ucyA9IHRyYW5zZm9ybU9wdGlvbnMob3B0aW9ucyk7XG4gICAgdGhpcy5zZXJ2aWNlcyA9IHt9O1xuICAgIHRoaXMubG9nZ2VyID0gYmFzZUxvZ2dlcjtcbiAgICB0aGlzLm1vZHVsZXMgPSB7XG4gICAgICBleHRlcm5hbDogW11cbiAgICB9O1xuICAgIGJpbmRNZW1iZXJGdW5jdGlvbnModGhpcyk7XG4gICAgaWYgKGNhbGxiYWNrICYmICF0aGlzLmlzSW5pdGlhbGl6ZWQgJiYgIW9wdGlvbnMuaXNDbG9uZSkge1xuICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuaW5pdEltbWVkaWF0ZSkge1xuICAgICAgICB0aGlzLmluaXQob3B0aW9ucywgY2FsbGJhY2spO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLmluaXQob3B0aW9ucywgY2FsbGJhY2spO1xuICAgICAgfSwgMCk7XG4gICAgfVxuICB9XG4gIGluaXQoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgbGV0IGNhbGxiYWNrID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjYWxsYmFjayA9IG9wdGlvbnM7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuICAgIGlmICghb3B0aW9ucy5kZWZhdWx0TlMgJiYgb3B0aW9ucy5kZWZhdWx0TlMgIT09IGZhbHNlICYmIG9wdGlvbnMubnMpIHtcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5ucyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgb3B0aW9ucy5kZWZhdWx0TlMgPSBvcHRpb25zLm5zO1xuICAgICAgfSBlbHNlIGlmIChvcHRpb25zLm5zLmluZGV4T2YoJ3RyYW5zbGF0aW9uJykgPCAwKSB7XG4gICAgICAgIG9wdGlvbnMuZGVmYXVsdE5TID0gb3B0aW9ucy5uc1swXTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgZGVmT3B0cyA9IGdldCgpO1xuICAgIHRoaXMub3B0aW9ucyA9IHtcbiAgICAgIC4uLmRlZk9wdHMsXG4gICAgICAuLi50aGlzLm9wdGlvbnMsXG4gICAgICAuLi50cmFuc2Zvcm1PcHRpb25zKG9wdGlvbnMpXG4gICAgfTtcbiAgICBpZiAodGhpcy5vcHRpb25zLmNvbXBhdGliaWxpdHlBUEkgIT09ICd2MScpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5pbnRlcnBvbGF0aW9uID0ge1xuICAgICAgICAuLi5kZWZPcHRzLmludGVycG9sYXRpb24sXG4gICAgICAgIC4uLnRoaXMub3B0aW9ucy5pbnRlcnBvbGF0aW9uXG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5rZXlTZXBhcmF0b3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5vcHRpb25zLnVzZXJEZWZpbmVkS2V5U2VwYXJhdG9yID0gb3B0aW9ucy5rZXlTZXBhcmF0b3I7XG4gICAgfVxuICAgIGlmIChvcHRpb25zLm5zU2VwYXJhdG9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMub3B0aW9ucy51c2VyRGVmaW5lZE5zU2VwYXJhdG9yID0gb3B0aW9ucy5uc1NlcGFyYXRvcjtcbiAgICB9XG4gICAgZnVuY3Rpb24gY3JlYXRlQ2xhc3NPbkRlbWFuZChDbGFzc09yT2JqZWN0KSB7XG4gICAgICBpZiAoIUNsYXNzT3JPYmplY3QpIHJldHVybiBudWxsO1xuICAgICAgaWYgKHR5cGVvZiBDbGFzc09yT2JqZWN0ID09PSAnZnVuY3Rpb24nKSByZXR1cm4gbmV3IENsYXNzT3JPYmplY3QoKTtcbiAgICAgIHJldHVybiBDbGFzc09yT2JqZWN0O1xuICAgIH1cbiAgICBpZiAoIXRoaXMub3B0aW9ucy5pc0Nsb25lKSB7XG4gICAgICBpZiAodGhpcy5tb2R1bGVzLmxvZ2dlcikge1xuICAgICAgICBiYXNlTG9nZ2VyLmluaXQoY3JlYXRlQ2xhc3NPbkRlbWFuZCh0aGlzLm1vZHVsZXMubG9nZ2VyKSwgdGhpcy5vcHRpb25zKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJhc2VMb2dnZXIuaW5pdChudWxsLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgfVxuICAgICAgbGV0IGZvcm1hdHRlcjtcbiAgICAgIGlmICh0aGlzLm1vZHVsZXMuZm9ybWF0dGVyKSB7XG4gICAgICAgIGZvcm1hdHRlciA9IHRoaXMubW9kdWxlcy5mb3JtYXR0ZXI7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBJbnRsICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBmb3JtYXR0ZXIgPSBGb3JtYXR0ZXI7XG4gICAgICB9XG4gICAgICBjb25zdCBsdSA9IG5ldyBMYW5ndWFnZVV0aWwodGhpcy5vcHRpb25zKTtcbiAgICAgIHRoaXMuc3RvcmUgPSBuZXcgUmVzb3VyY2VTdG9yZSh0aGlzLm9wdGlvbnMucmVzb3VyY2VzLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgY29uc3QgcyA9IHRoaXMuc2VydmljZXM7XG4gICAgICBzLmxvZ2dlciA9IGJhc2VMb2dnZXI7XG4gICAgICBzLnJlc291cmNlU3RvcmUgPSB0aGlzLnN0b3JlO1xuICAgICAgcy5sYW5ndWFnZVV0aWxzID0gbHU7XG4gICAgICBzLnBsdXJhbFJlc29sdmVyID0gbmV3IFBsdXJhbFJlc29sdmVyKGx1LCB7XG4gICAgICAgIHByZXBlbmQ6IHRoaXMub3B0aW9ucy5wbHVyYWxTZXBhcmF0b3IsXG4gICAgICAgIGNvbXBhdGliaWxpdHlKU09OOiB0aGlzLm9wdGlvbnMuY29tcGF0aWJpbGl0eUpTT04sXG4gICAgICAgIHNpbXBsaWZ5UGx1cmFsU3VmZml4OiB0aGlzLm9wdGlvbnMuc2ltcGxpZnlQbHVyYWxTdWZmaXhcbiAgICAgIH0pO1xuICAgICAgaWYgKGZvcm1hdHRlciAmJiAoIXRoaXMub3B0aW9ucy5pbnRlcnBvbGF0aW9uLmZvcm1hdCB8fCB0aGlzLm9wdGlvbnMuaW50ZXJwb2xhdGlvbi5mb3JtYXQgPT09IGRlZk9wdHMuaW50ZXJwb2xhdGlvbi5mb3JtYXQpKSB7XG4gICAgICAgIHMuZm9ybWF0dGVyID0gY3JlYXRlQ2xhc3NPbkRlbWFuZChmb3JtYXR0ZXIpO1xuICAgICAgICBzLmZvcm1hdHRlci5pbml0KHMsIHRoaXMub3B0aW9ucyk7XG4gICAgICAgIHRoaXMub3B0aW9ucy5pbnRlcnBvbGF0aW9uLmZvcm1hdCA9IHMuZm9ybWF0dGVyLmZvcm1hdC5iaW5kKHMuZm9ybWF0dGVyKTtcbiAgICAgIH1cbiAgICAgIHMuaW50ZXJwb2xhdG9yID0gbmV3IEludGVycG9sYXRvcih0aGlzLm9wdGlvbnMpO1xuICAgICAgcy51dGlscyA9IHtcbiAgICAgICAgaGFzTG9hZGVkTmFtZXNwYWNlOiB0aGlzLmhhc0xvYWRlZE5hbWVzcGFjZS5iaW5kKHRoaXMpXG4gICAgICB9O1xuICAgICAgcy5iYWNrZW5kQ29ubmVjdG9yID0gbmV3IENvbm5lY3RvcihjcmVhdGVDbGFzc09uRGVtYW5kKHRoaXMubW9kdWxlcy5iYWNrZW5kKSwgcy5yZXNvdXJjZVN0b3JlLCBzLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgcy5iYWNrZW5kQ29ubmVjdG9yLm9uKCcqJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgICAgfVxuICAgICAgICBfdGhpcy5lbWl0KGV2ZW50LCAuLi5hcmdzKTtcbiAgICAgIH0pO1xuICAgICAgaWYgKHRoaXMubW9kdWxlcy5sYW5ndWFnZURldGVjdG9yKSB7XG4gICAgICAgIHMubGFuZ3VhZ2VEZXRlY3RvciA9IGNyZWF0ZUNsYXNzT25EZW1hbmQodGhpcy5tb2R1bGVzLmxhbmd1YWdlRGV0ZWN0b3IpO1xuICAgICAgICBpZiAocy5sYW5ndWFnZURldGVjdG9yLmluaXQpIHMubGFuZ3VhZ2VEZXRlY3Rvci5pbml0KHMsIHRoaXMub3B0aW9ucy5kZXRlY3Rpb24sIHRoaXMub3B0aW9ucyk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5tb2R1bGVzLmkxOG5Gb3JtYXQpIHtcbiAgICAgICAgcy5pMThuRm9ybWF0ID0gY3JlYXRlQ2xhc3NPbkRlbWFuZCh0aGlzLm1vZHVsZXMuaTE4bkZvcm1hdCk7XG4gICAgICAgIGlmIChzLmkxOG5Gb3JtYXQuaW5pdCkgcy5pMThuRm9ybWF0LmluaXQodGhpcyk7XG4gICAgICB9XG4gICAgICB0aGlzLnRyYW5zbGF0b3IgPSBuZXcgVHJhbnNsYXRvcih0aGlzLnNlcnZpY2VzLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgdGhpcy50cmFuc2xhdG9yLm9uKCcqJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiA+IDEgPyBfbGVuMiAtIDEgOiAwKSwgX2tleTIgPSAxOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgICAgYXJnc1tfa2V5MiAtIDFdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgICAgfVxuICAgICAgICBfdGhpcy5lbWl0KGV2ZW50LCAuLi5hcmdzKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5tb2R1bGVzLmV4dGVybmFsLmZvckVhY2gobSA9PiB7XG4gICAgICAgIGlmIChtLmluaXQpIG0uaW5pdCh0aGlzKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICB0aGlzLmZvcm1hdCA9IHRoaXMub3B0aW9ucy5pbnRlcnBvbGF0aW9uLmZvcm1hdDtcbiAgICBpZiAoIWNhbGxiYWNrKSBjYWxsYmFjayA9IG5vb3A7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5mYWxsYmFja0xuZyAmJiAhdGhpcy5zZXJ2aWNlcy5sYW5ndWFnZURldGVjdG9yICYmICF0aGlzLm9wdGlvbnMubG5nKSB7XG4gICAgICBjb25zdCBjb2RlcyA9IHRoaXMuc2VydmljZXMubGFuZ3VhZ2VVdGlscy5nZXRGYWxsYmFja0NvZGVzKHRoaXMub3B0aW9ucy5mYWxsYmFja0xuZyk7XG4gICAgICBpZiAoY29kZXMubGVuZ3RoID4gMCAmJiBjb2Rlc1swXSAhPT0gJ2RldicpIHRoaXMub3B0aW9ucy5sbmcgPSBjb2Rlc1swXTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLnNlcnZpY2VzLmxhbmd1YWdlRGV0ZWN0b3IgJiYgIXRoaXMub3B0aW9ucy5sbmcpIHtcbiAgICAgIHRoaXMubG9nZ2VyLndhcm4oJ2luaXQ6IG5vIGxhbmd1YWdlRGV0ZWN0b3IgaXMgdXNlZCBhbmQgbm8gbG5nIGlzIGRlZmluZWQnKTtcbiAgICB9XG4gICAgY29uc3Qgc3RvcmVBcGkgPSBbJ2dldFJlc291cmNlJywgJ2hhc1Jlc291cmNlQnVuZGxlJywgJ2dldFJlc291cmNlQnVuZGxlJywgJ2dldERhdGFCeUxhbmd1YWdlJ107XG4gICAgc3RvcmVBcGkuZm9yRWFjaChmY05hbWUgPT4ge1xuICAgICAgdGhpc1tmY05hbWVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMuc3RvcmVbZmNOYW1lXSguLi5hcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgICBjb25zdCBzdG9yZUFwaUNoYWluZWQgPSBbJ2FkZFJlc291cmNlJywgJ2FkZFJlc291cmNlcycsICdhZGRSZXNvdXJjZUJ1bmRsZScsICdyZW1vdmVSZXNvdXJjZUJ1bmRsZSddO1xuICAgIHN0b3JlQXBpQ2hhaW5lZC5mb3JFYWNoKGZjTmFtZSA9PiB7XG4gICAgICB0aGlzW2ZjTmFtZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzLnN0b3JlW2ZjTmFtZV0oLi4uYXJndW1lbnRzKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgICAgfTtcbiAgICB9KTtcbiAgICBjb25zdCBkZWZlcnJlZCA9IGRlZmVyKCk7XG4gICAgY29uc3QgbG9hZCA9ICgpID0+IHtcbiAgICAgIGNvbnN0IGZpbmlzaCA9IChlcnIsIHQpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuaXNJbml0aWFsaXplZCAmJiAhdGhpcy5pbml0aWFsaXplZFN0b3JlT25jZSkgdGhpcy5sb2dnZXIud2FybignaW5pdDogaTE4bmV4dCBpcyBhbHJlYWR5IGluaXRpYWxpemVkLiBZb3Ugc2hvdWxkIGNhbGwgaW5pdCBqdXN0IG9uY2UhJyk7XG4gICAgICAgIHRoaXMuaXNJbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgIGlmICghdGhpcy5vcHRpb25zLmlzQ2xvbmUpIHRoaXMubG9nZ2VyLmxvZygnaW5pdGlhbGl6ZWQnLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICB0aGlzLmVtaXQoJ2luaXRpYWxpemVkJywgdGhpcy5vcHRpb25zKTtcbiAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSh0KTtcbiAgICAgICAgY2FsbGJhY2soZXJyLCB0KTtcbiAgICAgIH07XG4gICAgICBpZiAodGhpcy5sYW5ndWFnZXMgJiYgdGhpcy5vcHRpb25zLmNvbXBhdGliaWxpdHlBUEkgIT09ICd2MScgJiYgIXRoaXMuaXNJbml0aWFsaXplZCkgcmV0dXJuIGZpbmlzaChudWxsLCB0aGlzLnQuYmluZCh0aGlzKSk7XG4gICAgICB0aGlzLmNoYW5nZUxhbmd1YWdlKHRoaXMub3B0aW9ucy5sbmcsIGZpbmlzaCk7XG4gICAgfTtcbiAgICBpZiAodGhpcy5vcHRpb25zLnJlc291cmNlcyB8fCAhdGhpcy5vcHRpb25zLmluaXRJbW1lZGlhdGUpIHtcbiAgICAgIGxvYWQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0VGltZW91dChsb2FkLCAwKTtcbiAgICB9XG4gICAgcmV0dXJuIGRlZmVycmVkO1xuICB9XG4gIGxvYWRSZXNvdXJjZXMobGFuZ3VhZ2UpIHtcbiAgICBsZXQgY2FsbGJhY2sgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IG5vb3A7XG4gICAgbGV0IHVzZWRDYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIGNvbnN0IHVzZWRMbmcgPSB0eXBlb2YgbGFuZ3VhZ2UgPT09ICdzdHJpbmcnID8gbGFuZ3VhZ2UgOiB0aGlzLmxhbmd1YWdlO1xuICAgIGlmICh0eXBlb2YgbGFuZ3VhZ2UgPT09ICdmdW5jdGlvbicpIHVzZWRDYWxsYmFjayA9IGxhbmd1YWdlO1xuICAgIGlmICghdGhpcy5vcHRpb25zLnJlc291cmNlcyB8fCB0aGlzLm9wdGlvbnMucGFydGlhbEJ1bmRsZWRMYW5ndWFnZXMpIHtcbiAgICAgIGlmICh1c2VkTG5nICYmIHVzZWRMbmcudG9Mb3dlckNhc2UoKSA9PT0gJ2NpbW9kZScgJiYgKCF0aGlzLm9wdGlvbnMucHJlbG9hZCB8fCB0aGlzLm9wdGlvbnMucHJlbG9hZC5sZW5ndGggPT09IDApKSByZXR1cm4gdXNlZENhbGxiYWNrKCk7XG4gICAgICBjb25zdCB0b0xvYWQgPSBbXTtcbiAgICAgIGNvbnN0IGFwcGVuZCA9IGxuZyA9PiB7XG4gICAgICAgIGlmICghbG5nKSByZXR1cm47XG4gICAgICAgIGlmIChsbmcgPT09ICdjaW1vZGUnKSByZXR1cm47XG4gICAgICAgIGNvbnN0IGxuZ3MgPSB0aGlzLnNlcnZpY2VzLmxhbmd1YWdlVXRpbHMudG9SZXNvbHZlSGllcmFyY2h5KGxuZyk7XG4gICAgICAgIGxuZ3MuZm9yRWFjaChsID0+IHtcbiAgICAgICAgICBpZiAobCA9PT0gJ2NpbW9kZScpIHJldHVybjtcbiAgICAgICAgICBpZiAodG9Mb2FkLmluZGV4T2YobCkgPCAwKSB0b0xvYWQucHVzaChsKTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgICAgaWYgKCF1c2VkTG5nKSB7XG4gICAgICAgIGNvbnN0IGZhbGxiYWNrcyA9IHRoaXMuc2VydmljZXMubGFuZ3VhZ2VVdGlscy5nZXRGYWxsYmFja0NvZGVzKHRoaXMub3B0aW9ucy5mYWxsYmFja0xuZyk7XG4gICAgICAgIGZhbGxiYWNrcy5mb3JFYWNoKGwgPT4gYXBwZW5kKGwpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFwcGVuZCh1c2VkTG5nKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMucHJlbG9hZCkge1xuICAgICAgICB0aGlzLm9wdGlvbnMucHJlbG9hZC5mb3JFYWNoKGwgPT4gYXBwZW5kKGwpKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc2VydmljZXMuYmFja2VuZENvbm5lY3Rvci5sb2FkKHRvTG9hZCwgdGhpcy5vcHRpb25zLm5zLCBlID0+IHtcbiAgICAgICAgaWYgKCFlICYmICF0aGlzLnJlc29sdmVkTGFuZ3VhZ2UgJiYgdGhpcy5sYW5ndWFnZSkgdGhpcy5zZXRSZXNvbHZlZExhbmd1YWdlKHRoaXMubGFuZ3VhZ2UpO1xuICAgICAgICB1c2VkQ2FsbGJhY2soZSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdXNlZENhbGxiYWNrKG51bGwpO1xuICAgIH1cbiAgfVxuICByZWxvYWRSZXNvdXJjZXMobG5ncywgbnMsIGNhbGxiYWNrKSB7XG4gICAgY29uc3QgZGVmZXJyZWQgPSBkZWZlcigpO1xuICAgIGlmICghbG5ncykgbG5ncyA9IHRoaXMubGFuZ3VhZ2VzO1xuICAgIGlmICghbnMpIG5zID0gdGhpcy5vcHRpb25zLm5zO1xuICAgIGlmICghY2FsbGJhY2spIGNhbGxiYWNrID0gbm9vcDtcbiAgICB0aGlzLnNlcnZpY2VzLmJhY2tlbmRDb25uZWN0b3IucmVsb2FkKGxuZ3MsIG5zLCBlcnIgPT4ge1xuICAgICAgZGVmZXJyZWQucmVzb2x2ZSgpO1xuICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICB9KTtcbiAgICByZXR1cm4gZGVmZXJyZWQ7XG4gIH1cbiAgdXNlKG1vZHVsZSkge1xuICAgIGlmICghbW9kdWxlKSB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBhcmUgcGFzc2luZyBhbiB1bmRlZmluZWQgbW9kdWxlISBQbGVhc2UgY2hlY2sgdGhlIG9iamVjdCB5b3UgYXJlIHBhc3NpbmcgdG8gaTE4bmV4dC51c2UoKScpO1xuICAgIGlmICghbW9kdWxlLnR5cGUpIHRocm93IG5ldyBFcnJvcignWW91IGFyZSBwYXNzaW5nIGEgd3JvbmcgbW9kdWxlISBQbGVhc2UgY2hlY2sgdGhlIG9iamVjdCB5b3UgYXJlIHBhc3NpbmcgdG8gaTE4bmV4dC51c2UoKScpO1xuICAgIGlmIChtb2R1bGUudHlwZSA9PT0gJ2JhY2tlbmQnKSB7XG4gICAgICB0aGlzLm1vZHVsZXMuYmFja2VuZCA9IG1vZHVsZTtcbiAgICB9XG4gICAgaWYgKG1vZHVsZS50eXBlID09PSAnbG9nZ2VyJyB8fCBtb2R1bGUubG9nICYmIG1vZHVsZS53YXJuICYmIG1vZHVsZS5lcnJvcikge1xuICAgICAgdGhpcy5tb2R1bGVzLmxvZ2dlciA9IG1vZHVsZTtcbiAgICB9XG4gICAgaWYgKG1vZHVsZS50eXBlID09PSAnbGFuZ3VhZ2VEZXRlY3RvcicpIHtcbiAgICAgIHRoaXMubW9kdWxlcy5sYW5ndWFnZURldGVjdG9yID0gbW9kdWxlO1xuICAgIH1cbiAgICBpZiAobW9kdWxlLnR5cGUgPT09ICdpMThuRm9ybWF0Jykge1xuICAgICAgdGhpcy5tb2R1bGVzLmkxOG5Gb3JtYXQgPSBtb2R1bGU7XG4gICAgfVxuICAgIGlmIChtb2R1bGUudHlwZSA9PT0gJ3Bvc3RQcm9jZXNzb3InKSB7XG4gICAgICBwb3N0UHJvY2Vzc29yLmFkZFBvc3RQcm9jZXNzb3IobW9kdWxlKTtcbiAgICB9XG4gICAgaWYgKG1vZHVsZS50eXBlID09PSAnZm9ybWF0dGVyJykge1xuICAgICAgdGhpcy5tb2R1bGVzLmZvcm1hdHRlciA9IG1vZHVsZTtcbiAgICB9XG4gICAgaWYgKG1vZHVsZS50eXBlID09PSAnM3JkUGFydHknKSB7XG4gICAgICB0aGlzLm1vZHVsZXMuZXh0ZXJuYWwucHVzaChtb2R1bGUpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBzZXRSZXNvbHZlZExhbmd1YWdlKGwpIHtcbiAgICBpZiAoIWwgfHwgIXRoaXMubGFuZ3VhZ2VzKSByZXR1cm47XG4gICAgaWYgKFsnY2ltb2RlJywgJ2RldiddLmluZGV4T2YobCkgPiAtMSkgcmV0dXJuO1xuICAgIGZvciAobGV0IGxpID0gMDsgbGkgPCB0aGlzLmxhbmd1YWdlcy5sZW5ndGg7IGxpKyspIHtcbiAgICAgIGNvbnN0IGxuZ0luTG5ncyA9IHRoaXMubGFuZ3VhZ2VzW2xpXTtcbiAgICAgIGlmIChbJ2NpbW9kZScsICdkZXYnXS5pbmRleE9mKGxuZ0luTG5ncykgPiAtMSkgY29udGludWU7XG4gICAgICBpZiAodGhpcy5zdG9yZS5oYXNMYW5ndWFnZVNvbWVUcmFuc2xhdGlvbnMobG5nSW5MbmdzKSkge1xuICAgICAgICB0aGlzLnJlc29sdmVkTGFuZ3VhZ2UgPSBsbmdJbkxuZ3M7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBjaGFuZ2VMYW5ndWFnZShsbmcsIGNhbGxiYWNrKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG4gICAgdGhpcy5pc0xhbmd1YWdlQ2hhbmdpbmdUbyA9IGxuZztcbiAgICBjb25zdCBkZWZlcnJlZCA9IGRlZmVyKCk7XG4gICAgdGhpcy5lbWl0KCdsYW5ndWFnZUNoYW5naW5nJywgbG5nKTtcbiAgICBjb25zdCBzZXRMbmdQcm9wcyA9IGwgPT4ge1xuICAgICAgdGhpcy5sYW5ndWFnZSA9IGw7XG4gICAgICB0aGlzLmxhbmd1YWdlcyA9IHRoaXMuc2VydmljZXMubGFuZ3VhZ2VVdGlscy50b1Jlc29sdmVIaWVyYXJjaHkobCk7XG4gICAgICB0aGlzLnJlc29sdmVkTGFuZ3VhZ2UgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLnNldFJlc29sdmVkTGFuZ3VhZ2UobCk7XG4gICAgfTtcbiAgICBjb25zdCBkb25lID0gKGVyciwgbCkgPT4ge1xuICAgICAgaWYgKGwpIHtcbiAgICAgICAgc2V0TG5nUHJvcHMobCk7XG4gICAgICAgIHRoaXMudHJhbnNsYXRvci5jaGFuZ2VMYW5ndWFnZShsKTtcbiAgICAgICAgdGhpcy5pc0xhbmd1YWdlQ2hhbmdpbmdUbyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5lbWl0KCdsYW5ndWFnZUNoYW5nZWQnLCBsKTtcbiAgICAgICAgdGhpcy5sb2dnZXIubG9nKCdsYW5ndWFnZUNoYW5nZWQnLCBsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuaXNMYW5ndWFnZUNoYW5naW5nVG8gPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBkZWZlcnJlZC5yZXNvbHZlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzMi50KC4uLmFyZ3VtZW50cyk7XG4gICAgICB9KTtcbiAgICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soZXJyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpczIudCguLi5hcmd1bWVudHMpO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICBjb25zdCBzZXRMbmcgPSBsbmdzID0+IHtcbiAgICAgIGlmICghbG5nICYmICFsbmdzICYmIHRoaXMuc2VydmljZXMubGFuZ3VhZ2VEZXRlY3RvcikgbG5ncyA9IFtdO1xuICAgICAgY29uc3QgbCA9IHR5cGVvZiBsbmdzID09PSAnc3RyaW5nJyA/IGxuZ3MgOiB0aGlzLnNlcnZpY2VzLmxhbmd1YWdlVXRpbHMuZ2V0QmVzdE1hdGNoRnJvbUNvZGVzKGxuZ3MpO1xuICAgICAgaWYgKGwpIHtcbiAgICAgICAgaWYgKCF0aGlzLmxhbmd1YWdlKSB7XG4gICAgICAgICAgc2V0TG5nUHJvcHMobCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLnRyYW5zbGF0b3IubGFuZ3VhZ2UpIHRoaXMudHJhbnNsYXRvci5jaGFuZ2VMYW5ndWFnZShsKTtcbiAgICAgICAgaWYgKHRoaXMuc2VydmljZXMubGFuZ3VhZ2VEZXRlY3RvciAmJiB0aGlzLnNlcnZpY2VzLmxhbmd1YWdlRGV0ZWN0b3IuY2FjaGVVc2VyTGFuZ3VhZ2UpIHRoaXMuc2VydmljZXMubGFuZ3VhZ2VEZXRlY3Rvci5jYWNoZVVzZXJMYW5ndWFnZShsKTtcbiAgICAgIH1cbiAgICAgIHRoaXMubG9hZFJlc291cmNlcyhsLCBlcnIgPT4ge1xuICAgICAgICBkb25lKGVyciwgbCk7XG4gICAgICB9KTtcbiAgICB9O1xuICAgIGlmICghbG5nICYmIHRoaXMuc2VydmljZXMubGFuZ3VhZ2VEZXRlY3RvciAmJiAhdGhpcy5zZXJ2aWNlcy5sYW5ndWFnZURldGVjdG9yLmFzeW5jKSB7XG4gICAgICBzZXRMbmcodGhpcy5zZXJ2aWNlcy5sYW5ndWFnZURldGVjdG9yLmRldGVjdCgpKTtcbiAgICB9IGVsc2UgaWYgKCFsbmcgJiYgdGhpcy5zZXJ2aWNlcy5sYW5ndWFnZURldGVjdG9yICYmIHRoaXMuc2VydmljZXMubGFuZ3VhZ2VEZXRlY3Rvci5hc3luYykge1xuICAgICAgaWYgKHRoaXMuc2VydmljZXMubGFuZ3VhZ2VEZXRlY3Rvci5kZXRlY3QubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRoaXMuc2VydmljZXMubGFuZ3VhZ2VEZXRlY3Rvci5kZXRlY3QoKS50aGVuKHNldExuZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNlcnZpY2VzLmxhbmd1YWdlRGV0ZWN0b3IuZGV0ZWN0KHNldExuZyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldExuZyhsbmcpO1xuICAgIH1cbiAgICByZXR1cm4gZGVmZXJyZWQ7XG4gIH1cbiAgZ2V0Rml4ZWRUKGxuZywgbnMsIGtleVByZWZpeCkge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuICAgIGNvbnN0IGZpeGVkVCA9IGZ1bmN0aW9uIChrZXksIG9wdHMpIHtcbiAgICAgIGxldCBvcHRpb25zO1xuICAgICAgaWYgKHR5cGVvZiBvcHRzICE9PSAnb2JqZWN0Jykge1xuICAgICAgICBmb3IgKHZhciBfbGVuMyA9IGFyZ3VtZW50cy5sZW5ndGgsIHJlc3QgPSBuZXcgQXJyYXkoX2xlbjMgPiAyID8gX2xlbjMgLSAyIDogMCksIF9rZXkzID0gMjsgX2tleTMgPCBfbGVuMzsgX2tleTMrKykge1xuICAgICAgICAgIHJlc3RbX2tleTMgLSAyXSA9IGFyZ3VtZW50c1tfa2V5M107XG4gICAgICAgIH1cbiAgICAgICAgb3B0aW9ucyA9IF90aGlzMy5vcHRpb25zLm92ZXJsb2FkVHJhbnNsYXRpb25PcHRpb25IYW5kbGVyKFtrZXksIG9wdHNdLmNvbmNhdChyZXN0KSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvcHRpb25zID0ge1xuICAgICAgICAgIC4uLm9wdHNcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIG9wdGlvbnMubG5nID0gb3B0aW9ucy5sbmcgfHwgZml4ZWRULmxuZztcbiAgICAgIG9wdGlvbnMubG5ncyA9IG9wdGlvbnMubG5ncyB8fCBmaXhlZFQubG5ncztcbiAgICAgIG9wdGlvbnMubnMgPSBvcHRpb25zLm5zIHx8IGZpeGVkVC5ucztcbiAgICAgIG9wdGlvbnMua2V5UHJlZml4ID0gb3B0aW9ucy5rZXlQcmVmaXggfHwga2V5UHJlZml4IHx8IGZpeGVkVC5rZXlQcmVmaXg7XG4gICAgICBjb25zdCBrZXlTZXBhcmF0b3IgPSBfdGhpczMub3B0aW9ucy5rZXlTZXBhcmF0b3IgfHwgJy4nO1xuICAgICAgbGV0IHJlc3VsdEtleTtcbiAgICAgIGlmIChvcHRpb25zLmtleVByZWZpeCAmJiBBcnJheS5pc0FycmF5KGtleSkpIHtcbiAgICAgICAgcmVzdWx0S2V5ID0ga2V5Lm1hcChrID0+IGAke29wdGlvbnMua2V5UHJlZml4fSR7a2V5U2VwYXJhdG9yfSR7a31gKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdEtleSA9IG9wdGlvbnMua2V5UHJlZml4ID8gYCR7b3B0aW9ucy5rZXlQcmVmaXh9JHtrZXlTZXBhcmF0b3J9JHtrZXl9YCA6IGtleTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBfdGhpczMudChyZXN1bHRLZXksIG9wdGlvbnMpO1xuICAgIH07XG4gICAgaWYgKHR5cGVvZiBsbmcgPT09ICdzdHJpbmcnKSB7XG4gICAgICBmaXhlZFQubG5nID0gbG5nO1xuICAgIH0gZWxzZSB7XG4gICAgICBmaXhlZFQubG5ncyA9IGxuZztcbiAgICB9XG4gICAgZml4ZWRULm5zID0gbnM7XG4gICAgZml4ZWRULmtleVByZWZpeCA9IGtleVByZWZpeDtcbiAgICByZXR1cm4gZml4ZWRUO1xuICB9XG4gIHQoKSB7XG4gICAgcmV0dXJuIHRoaXMudHJhbnNsYXRvciAmJiB0aGlzLnRyYW5zbGF0b3IudHJhbnNsYXRlKC4uLmFyZ3VtZW50cyk7XG4gIH1cbiAgZXhpc3RzKCkge1xuICAgIHJldHVybiB0aGlzLnRyYW5zbGF0b3IgJiYgdGhpcy50cmFuc2xhdG9yLmV4aXN0cyguLi5hcmd1bWVudHMpO1xuICB9XG4gIHNldERlZmF1bHROYW1lc3BhY2UobnMpIHtcbiAgICB0aGlzLm9wdGlvbnMuZGVmYXVsdE5TID0gbnM7XG4gIH1cbiAgaGFzTG9hZGVkTmFtZXNwYWNlKG5zKSB7XG4gICAgbGV0IG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIGlmICghdGhpcy5pc0luaXRpYWxpemVkKSB7XG4gICAgICB0aGlzLmxvZ2dlci53YXJuKCdoYXNMb2FkZWROYW1lc3BhY2U6IGkxOG5leHQgd2FzIG5vdCBpbml0aWFsaXplZCcsIHRoaXMubGFuZ3VhZ2VzKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLmxhbmd1YWdlcyB8fCAhdGhpcy5sYW5ndWFnZXMubGVuZ3RoKSB7XG4gICAgICB0aGlzLmxvZ2dlci53YXJuKCdoYXNMb2FkZWROYW1lc3BhY2U6IGkxOG4ubGFuZ3VhZ2VzIHdlcmUgdW5kZWZpbmVkIG9yIGVtcHR5JywgdGhpcy5sYW5ndWFnZXMpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBsbmcgPSBvcHRpb25zLmxuZyB8fCB0aGlzLnJlc29sdmVkTGFuZ3VhZ2UgfHwgdGhpcy5sYW5ndWFnZXNbMF07XG4gICAgY29uc3QgZmFsbGJhY2tMbmcgPSB0aGlzLm9wdGlvbnMgPyB0aGlzLm9wdGlvbnMuZmFsbGJhY2tMbmcgOiBmYWxzZTtcbiAgICBjb25zdCBsYXN0TG5nID0gdGhpcy5sYW5ndWFnZXNbdGhpcy5sYW5ndWFnZXMubGVuZ3RoIC0gMV07XG4gICAgaWYgKGxuZy50b0xvd2VyQ2FzZSgpID09PSAnY2ltb2RlJykgcmV0dXJuIHRydWU7XG4gICAgY29uc3QgbG9hZE5vdFBlbmRpbmcgPSAobCwgbikgPT4ge1xuICAgICAgY29uc3QgbG9hZFN0YXRlID0gdGhpcy5zZXJ2aWNlcy5iYWNrZW5kQ29ubmVjdG9yLnN0YXRlW2Ake2x9fCR7bn1gXTtcbiAgICAgIHJldHVybiBsb2FkU3RhdGUgPT09IC0xIHx8IGxvYWRTdGF0ZSA9PT0gMjtcbiAgICB9O1xuICAgIGlmIChvcHRpb25zLnByZWNoZWNrKSB7XG4gICAgICBjb25zdCBwcmVSZXN1bHQgPSBvcHRpb25zLnByZWNoZWNrKHRoaXMsIGxvYWROb3RQZW5kaW5nKTtcbiAgICAgIGlmIChwcmVSZXN1bHQgIT09IHVuZGVmaW5lZCkgcmV0dXJuIHByZVJlc3VsdDtcbiAgICB9XG4gICAgaWYgKHRoaXMuaGFzUmVzb3VyY2VCdW5kbGUobG5nLCBucykpIHJldHVybiB0cnVlO1xuICAgIGlmICghdGhpcy5zZXJ2aWNlcy5iYWNrZW5kQ29ubmVjdG9yLmJhY2tlbmQgfHwgdGhpcy5vcHRpb25zLnJlc291cmNlcyAmJiAhdGhpcy5vcHRpb25zLnBhcnRpYWxCdW5kbGVkTGFuZ3VhZ2VzKSByZXR1cm4gdHJ1ZTtcbiAgICBpZiAobG9hZE5vdFBlbmRpbmcobG5nLCBucykgJiYgKCFmYWxsYmFja0xuZyB8fCBsb2FkTm90UGVuZGluZyhsYXN0TG5nLCBucykpKSByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgbG9hZE5hbWVzcGFjZXMobnMsIGNhbGxiYWNrKSB7XG4gICAgY29uc3QgZGVmZXJyZWQgPSBkZWZlcigpO1xuICAgIGlmICghdGhpcy5vcHRpb25zLm5zKSB7XG4gICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKCk7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgbnMgPT09ICdzdHJpbmcnKSBucyA9IFtuc107XG4gICAgbnMuZm9yRWFjaChuID0+IHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMubnMuaW5kZXhPZihuKSA8IDApIHRoaXMub3B0aW9ucy5ucy5wdXNoKG4pO1xuICAgIH0pO1xuICAgIHRoaXMubG9hZFJlc291cmNlcyhlcnIgPT4ge1xuICAgICAgZGVmZXJyZWQucmVzb2x2ZSgpO1xuICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjayhlcnIpO1xuICAgIH0pO1xuICAgIHJldHVybiBkZWZlcnJlZDtcbiAgfVxuICBsb2FkTGFuZ3VhZ2VzKGxuZ3MsIGNhbGxiYWNrKSB7XG4gICAgY29uc3QgZGVmZXJyZWQgPSBkZWZlcigpO1xuICAgIGlmICh0eXBlb2YgbG5ncyA9PT0gJ3N0cmluZycpIGxuZ3MgPSBbbG5nc107XG4gICAgY29uc3QgcHJlbG9hZGVkID0gdGhpcy5vcHRpb25zLnByZWxvYWQgfHwgW107XG4gICAgY29uc3QgbmV3TG5ncyA9IGxuZ3MuZmlsdGVyKGxuZyA9PiBwcmVsb2FkZWQuaW5kZXhPZihsbmcpIDwgMCk7XG4gICAgaWYgKCFuZXdMbmdzLmxlbmd0aCkge1xuICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjaygpO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cbiAgICB0aGlzLm9wdGlvbnMucHJlbG9hZCA9IHByZWxvYWRlZC5jb25jYXQobmV3TG5ncyk7XG4gICAgdGhpcy5sb2FkUmVzb3VyY2VzKGVyciA9PiB7XG4gICAgICBkZWZlcnJlZC5yZXNvbHZlKCk7XG4gICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKGVycik7XG4gICAgfSk7XG4gICAgcmV0dXJuIGRlZmVycmVkO1xuICB9XG4gIGRpcihsbmcpIHtcbiAgICBpZiAoIWxuZykgbG5nID0gdGhpcy5yZXNvbHZlZExhbmd1YWdlIHx8ICh0aGlzLmxhbmd1YWdlcyAmJiB0aGlzLmxhbmd1YWdlcy5sZW5ndGggPiAwID8gdGhpcy5sYW5ndWFnZXNbMF0gOiB0aGlzLmxhbmd1YWdlKTtcbiAgICBpZiAoIWxuZykgcmV0dXJuICdydGwnO1xuICAgIGNvbnN0IHJ0bExuZ3MgPSBbJ2FyJywgJ3NodScsICdzcXInLCAnc3NoJywgJ3hhYScsICd5aGQnLCAneXVkJywgJ2FhbycsICdhYmgnLCAnYWJ2JywgJ2FjbScsICdhY3EnLCAnYWN3JywgJ2FjeCcsICdhY3knLCAnYWRmJywgJ2FkcycsICdhZWInLCAnYWVjJywgJ2FmYicsICdhanAnLCAnYXBjJywgJ2FwZCcsICdhcmInLCAnYXJxJywgJ2FycycsICdhcnknLCAnYXJ6JywgJ2F1eicsICdhdmwnLCAnYXloJywgJ2F5bCcsICdheW4nLCAnYXlwJywgJ2JieicsICdwZ2EnLCAnaGUnLCAnaXcnLCAncHMnLCAncGJ0JywgJ3BidScsICdwc3QnLCAncHJwJywgJ3ByZCcsICd1ZycsICd1cicsICd5ZGQnLCAneWRzJywgJ3lpaCcsICdqaScsICd5aScsICdoYm8nLCAnbWVuJywgJ3htbicsICdmYScsICdqcHInLCAncGVvJywgJ3BlcycsICdwcnMnLCAnZHYnLCAnc2FtJywgJ2NrYiddO1xuICAgIGNvbnN0IGxhbmd1YWdlVXRpbHMgPSB0aGlzLnNlcnZpY2VzICYmIHRoaXMuc2VydmljZXMubGFuZ3VhZ2VVdGlscyB8fCBuZXcgTGFuZ3VhZ2VVdGlsKGdldCgpKTtcbiAgICByZXR1cm4gcnRsTG5ncy5pbmRleE9mKGxhbmd1YWdlVXRpbHMuZ2V0TGFuZ3VhZ2VQYXJ0RnJvbUNvZGUobG5nKSkgPiAtMSB8fCBsbmcudG9Mb3dlckNhc2UoKS5pbmRleE9mKCctYXJhYicpID4gMSA/ICdydGwnIDogJ2x0cic7XG4gIH1cbiAgc3RhdGljIGNyZWF0ZUluc3RhbmNlKCkge1xuICAgIGxldCBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICBsZXQgY2FsbGJhY2sgPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gbmV3IEkxOG4ob3B0aW9ucywgY2FsbGJhY2spO1xuICB9XG4gIGNsb25lSW5zdGFuY2UoKSB7XG4gICAgbGV0IG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgIGxldCBjYWxsYmFjayA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogbm9vcDtcbiAgICBjb25zdCBmb3JrUmVzb3VyY2VTdG9yZSA9IG9wdGlvbnMuZm9ya1Jlc291cmNlU3RvcmU7XG4gICAgaWYgKGZvcmtSZXNvdXJjZVN0b3JlKSBkZWxldGUgb3B0aW9ucy5mb3JrUmVzb3VyY2VTdG9yZTtcbiAgICBjb25zdCBtZXJnZWRPcHRpb25zID0ge1xuICAgICAgLi4udGhpcy5vcHRpb25zLFxuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIC4uLntcbiAgICAgICAgaXNDbG9uZTogdHJ1ZVxuICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgY2xvbmUgPSBuZXcgSTE4bihtZXJnZWRPcHRpb25zKTtcbiAgICBpZiAob3B0aW9ucy5kZWJ1ZyAhPT0gdW5kZWZpbmVkIHx8IG9wdGlvbnMucHJlZml4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNsb25lLmxvZ2dlciA9IGNsb25lLmxvZ2dlci5jbG9uZShvcHRpb25zKTtcbiAgICB9XG4gICAgY29uc3QgbWVtYmVyc1RvQ29weSA9IFsnc3RvcmUnLCAnc2VydmljZXMnLCAnbGFuZ3VhZ2UnXTtcbiAgICBtZW1iZXJzVG9Db3B5LmZvckVhY2gobSA9PiB7XG4gICAgICBjbG9uZVttXSA9IHRoaXNbbV07XG4gICAgfSk7XG4gICAgY2xvbmUuc2VydmljZXMgPSB7XG4gICAgICAuLi50aGlzLnNlcnZpY2VzXG4gICAgfTtcbiAgICBjbG9uZS5zZXJ2aWNlcy51dGlscyA9IHtcbiAgICAgIGhhc0xvYWRlZE5hbWVzcGFjZTogY2xvbmUuaGFzTG9hZGVkTmFtZXNwYWNlLmJpbmQoY2xvbmUpXG4gICAgfTtcbiAgICBpZiAoZm9ya1Jlc291cmNlU3RvcmUpIHtcbiAgICAgIGNsb25lLnN0b3JlID0gbmV3IFJlc291cmNlU3RvcmUodGhpcy5zdG9yZS5kYXRhLCBtZXJnZWRPcHRpb25zKTtcbiAgICAgIGNsb25lLnNlcnZpY2VzLnJlc291cmNlU3RvcmUgPSBjbG9uZS5zdG9yZTtcbiAgICB9XG4gICAgY2xvbmUudHJhbnNsYXRvciA9IG5ldyBUcmFuc2xhdG9yKGNsb25lLnNlcnZpY2VzLCBtZXJnZWRPcHRpb25zKTtcbiAgICBjbG9uZS50cmFuc2xhdG9yLm9uKCcqJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBmb3IgKHZhciBfbGVuNCA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjQgPiAxID8gX2xlbjQgLSAxIDogMCksIF9rZXk0ID0gMTsgX2tleTQgPCBfbGVuNDsgX2tleTQrKykge1xuICAgICAgICBhcmdzW19rZXk0IC0gMV0gPSBhcmd1bWVudHNbX2tleTRdO1xuICAgICAgfVxuICAgICAgY2xvbmUuZW1pdChldmVudCwgLi4uYXJncyk7XG4gICAgfSk7XG4gICAgY2xvbmUuaW5pdChtZXJnZWRPcHRpb25zLCBjYWxsYmFjayk7XG4gICAgY2xvbmUudHJhbnNsYXRvci5vcHRpb25zID0gbWVyZ2VkT3B0aW9ucztcbiAgICBjbG9uZS50cmFuc2xhdG9yLmJhY2tlbmRDb25uZWN0b3Iuc2VydmljZXMudXRpbHMgPSB7XG4gICAgICBoYXNMb2FkZWROYW1lc3BhY2U6IGNsb25lLmhhc0xvYWRlZE5hbWVzcGFjZS5iaW5kKGNsb25lKVxuICAgIH07XG4gICAgcmV0dXJuIGNsb25lO1xuICB9XG4gIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgb3B0aW9uczogdGhpcy5vcHRpb25zLFxuICAgICAgc3RvcmU6IHRoaXMuc3RvcmUsXG4gICAgICBsYW5ndWFnZTogdGhpcy5sYW5ndWFnZSxcbiAgICAgIGxhbmd1YWdlczogdGhpcy5sYW5ndWFnZXMsXG4gICAgICByZXNvbHZlZExhbmd1YWdlOiB0aGlzLnJlc29sdmVkTGFuZ3VhZ2VcbiAgICB9O1xuICB9XG59XG5jb25zdCBpbnN0YW5jZSA9IEkxOG4uY3JlYXRlSW5zdGFuY2UoKTtcbmluc3RhbmNlLmNyZWF0ZUluc3RhbmNlID0gSTE4bi5jcmVhdGVJbnN0YW5jZTtcblxuY29uc3QgY3JlYXRlSW5zdGFuY2UgPSBpbnN0YW5jZS5jcmVhdGVJbnN0YW5jZTtcbmNvbnN0IGRpciA9IGluc3RhbmNlLmRpcjtcbmNvbnN0IGluaXQgPSBpbnN0YW5jZS5pbml0O1xuY29uc3QgbG9hZFJlc291cmNlcyA9IGluc3RhbmNlLmxvYWRSZXNvdXJjZXM7XG5jb25zdCByZWxvYWRSZXNvdXJjZXMgPSBpbnN0YW5jZS5yZWxvYWRSZXNvdXJjZXM7XG5jb25zdCB1c2UgPSBpbnN0YW5jZS51c2U7XG5jb25zdCBjaGFuZ2VMYW5ndWFnZSA9IGluc3RhbmNlLmNoYW5nZUxhbmd1YWdlO1xuY29uc3QgZ2V0Rml4ZWRUID0gaW5zdGFuY2UuZ2V0Rml4ZWRUO1xuY29uc3QgdCA9IGluc3RhbmNlLnQ7XG5jb25zdCBleGlzdHMgPSBpbnN0YW5jZS5leGlzdHM7XG5jb25zdCBzZXREZWZhdWx0TmFtZXNwYWNlID0gaW5zdGFuY2Uuc2V0RGVmYXVsdE5hbWVzcGFjZTtcbmNvbnN0IGhhc0xvYWRlZE5hbWVzcGFjZSA9IGluc3RhbmNlLmhhc0xvYWRlZE5hbWVzcGFjZTtcbmNvbnN0IGxvYWROYW1lc3BhY2VzID0gaW5zdGFuY2UubG9hZE5hbWVzcGFjZXM7XG5jb25zdCBsb2FkTGFuZ3VhZ2VzID0gaW5zdGFuY2UubG9hZExhbmd1YWdlcztcblxuZXhwb3J0IHsgY2hhbmdlTGFuZ3VhZ2UsIGNyZWF0ZUluc3RhbmNlLCBpbnN0YW5jZSBhcyBkZWZhdWx0LCBkaXIsIGV4aXN0cywgZ2V0Rml4ZWRULCBoYXNMb2FkZWROYW1lc3BhY2UsIGluaXQsIGxvYWRMYW5ndWFnZXMsIGxvYWROYW1lc3BhY2VzLCBsb2FkUmVzb3VyY2VzLCByZWxvYWRSZXNvdXJjZXMsIHNldERlZmF1bHROYW1lc3BhY2UsIHQsIHVzZSB9O1xuIl0sIm5hbWVzIjpbImNvbnNvbGVMb2dnZXIiLCJ0eXBlIiwibG9nIiwiYXJncyIsIm91dHB1dCIsIndhcm4iLCJlcnJvciIsImNvbnNvbGUiLCJhcHBseSIsIkxvZ2dlciIsImNvbnN0cnVjdG9yIiwiY29uY3JldGVMb2dnZXIiLCJvcHRpb25zIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiaW5pdCIsInByZWZpeCIsImxvZ2dlciIsImRlYnVnIiwiX2xlbiIsIkFycmF5IiwiX2tleSIsImZvcndhcmQiLCJfbGVuMiIsIl9rZXkyIiwiX2xlbjMiLCJfa2V5MyIsImRlcHJlY2F0ZSIsIl9sZW40IiwiX2tleTQiLCJsdmwiLCJkZWJ1Z09ubHkiLCJjcmVhdGUiLCJtb2R1bGVOYW1lIiwiY2xvbmUiLCJiYXNlTG9nZ2VyIiwiRXZlbnRFbWl0dGVyIiwib2JzZXJ2ZXJzIiwib24iLCJldmVudHMiLCJsaXN0ZW5lciIsInNwbGl0IiwiZm9yRWFjaCIsImV2ZW50IiwicHVzaCIsIm9mZiIsImZpbHRlciIsImwiLCJlbWl0IiwiY2xvbmVkIiwiY29uY2F0Iiwib2JzZXJ2ZXIiLCJkZWZlciIsInJlcyIsInJlaiIsInByb21pc2UiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIm1ha2VTdHJpbmciLCJvYmplY3QiLCJjb3B5IiwiYSIsInMiLCJ0IiwibSIsImdldExhc3RPZlBhdGgiLCJwYXRoIiwiRW1wdHkiLCJjbGVhbktleSIsImtleSIsImluZGV4T2YiLCJyZXBsYWNlIiwiY2FuTm90VHJhdmVyc2VEZWVwZXIiLCJzdGFjayIsInNoaWZ0IiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwib2JqIiwiayIsInNldFBhdGgiLCJuZXdWYWx1ZSIsInB1c2hQYXRoIiwiZ2V0UGF0aCIsImdldFBhdGhXaXRoRGVmYXVsdHMiLCJkYXRhIiwiZGVmYXVsdERhdGEiLCJ2YWx1ZSIsImRlZXBFeHRlbmQiLCJ0YXJnZXQiLCJzb3VyY2UiLCJvdmVyd3JpdGUiLCJwcm9wIiwiU3RyaW5nIiwicmVnZXhFc2NhcGUiLCJzdHIiLCJfZW50aXR5TWFwIiwiZXNjYXBlIiwiY2hhcnMiLCJsb29rc0xpa2VPYmplY3RQYXRoIiwibnNTZXBhcmF0b3IiLCJrZXlTZXBhcmF0b3IiLCJwb3NzaWJsZUNoYXJzIiwiYyIsInIiLCJSZWdFeHAiLCJtYXAiLCJqb2luIiwibWF0Y2hlZCIsInRlc3QiLCJraSIsInN1YnN0cmluZyIsImRlZXBGaW5kIiwicGF0aHMiLCJjdXJyZW50IiwiaSIsImoiLCJwIiwic2xpY2UiLCJtaXgiLCJlbmRzV2l0aCIsImpvaW5lZFBhdGgiLCJnZXRDbGVhbmVkQ29kZSIsImNvZGUiLCJSZXNvdXJjZVN0b3JlIiwibnMiLCJkZWZhdWx0TlMiLCJpZ25vcmVKU09OU3RydWN0dXJlIiwiYWRkTmFtZXNwYWNlcyIsInJlbW92ZU5hbWVzcGFjZXMiLCJpbmRleCIsInNwbGljZSIsImdldFJlc291cmNlIiwibG5nIiwicmVzdWx0IiwiYWRkUmVzb3VyY2UiLCJzaWxlbnQiLCJhZGRSZXNvdXJjZXMiLCJyZXNvdXJjZXMiLCJ0b1N0cmluZyIsImFkZFJlc291cmNlQnVuZGxlIiwiZGVlcCIsInBhY2siLCJyZW1vdmVSZXNvdXJjZUJ1bmRsZSIsImhhc1Jlc291cmNlQnVuZGxlIiwiZ2V0UmVzb3VyY2VCdW5kbGUiLCJjb21wYXRpYmlsaXR5QVBJIiwiZ2V0RGF0YUJ5TGFuZ3VhZ2UiLCJoYXNMYW5ndWFnZVNvbWVUcmFuc2xhdGlvbnMiLCJuIiwia2V5cyIsImZpbmQiLCJ2IiwidG9KU09OIiwicG9zdFByb2Nlc3NvciIsInByb2Nlc3NvcnMiLCJhZGRQb3N0UHJvY2Vzc29yIiwibW9kdWxlIiwibmFtZSIsImhhbmRsZSIsInRyYW5zbGF0b3IiLCJwcm9jZXNzb3IiLCJwcm9jZXNzIiwiY2hlY2tlZExvYWRlZEZvciIsIlRyYW5zbGF0b3IiLCJzZXJ2aWNlcyIsImNoYW5nZUxhbmd1YWdlIiwibGFuZ3VhZ2UiLCJleGlzdHMiLCJpbnRlcnBvbGF0aW9uIiwicmVzb2x2ZWQiLCJleHRyYWN0RnJvbUtleSIsIm5hbWVzcGFjZXMiLCJ3b3VsZENoZWNrRm9yTnNJbktleSIsInNlZW1zTmF0dXJhbExhbmd1YWdlIiwidXNlckRlZmluZWRLZXlTZXBhcmF0b3IiLCJ1c2VyRGVmaW5lZE5zU2VwYXJhdG9yIiwibWF0Y2giLCJpbnRlcnBvbGF0b3IiLCJuZXN0aW5nUmVnZXhwIiwicGFydHMiLCJ0cmFuc2xhdGUiLCJsYXN0S2V5Iiwib3ZlcmxvYWRUcmFuc2xhdGlvbk9wdGlvbkhhbmRsZXIiLCJpc0FycmF5IiwicmV0dXJuRGV0YWlscyIsIm5hbWVzcGFjZSIsImFwcGVuZE5hbWVzcGFjZVRvQ0lNb2RlIiwidG9Mb3dlckNhc2UiLCJ1c2VkS2V5IiwiZXhhY3RVc2VkS2V5IiwidXNlZExuZyIsInVzZWROUyIsInVzZWRQYXJhbXMiLCJnZXRVc2VkUGFyYW1zRGV0YWlscyIsInJlc1VzZWRLZXkiLCJyZXNFeGFjdFVzZWRLZXkiLCJyZXNUeXBlIiwibm9PYmplY3QiLCJqb2luQXJyYXlzIiwiaGFuZGxlQXNPYmplY3RJbkkxOG5Gb3JtYXQiLCJpMThuRm9ybWF0IiwiaGFuZGxlQXNPYmplY3QiLCJyZXR1cm5PYmplY3RzIiwicmV0dXJuZWRPYmplY3RIYW5kbGVyIiwicmVzVHlwZUlzQXJyYXkiLCJuZXdLZXlUb1VzZSIsImRlZXBLZXkiLCJleHRlbmRUcmFuc2xhdGlvbiIsInVzZWREZWZhdWx0IiwibmVlZHNQbHVyYWxIYW5kbGluZyIsImNvdW50IiwiaGFzRGVmYXVsdFZhbHVlIiwiZGVmYXVsdFZhbHVlU3VmZml4IiwicGx1cmFsUmVzb2x2ZXIiLCJnZXRTdWZmaXgiLCJkZWZhdWx0VmFsdWVTdWZmaXhPcmRpbmFsRmFsbGJhY2siLCJvcmRpbmFsIiwiZGVmYXVsdFZhbHVlIiwiaXNWYWxpZExvb2t1cCIsIm1pc3NpbmdLZXlOb1ZhbHVlRmFsbGJhY2tUb0tleSIsInJlc0Zvck1pc3NpbmciLCJ1cGRhdGVNaXNzaW5nIiwiZmsiLCJsbmdzIiwiZmFsbGJhY2tMbmdzIiwibGFuZ3VhZ2VVdGlscyIsImdldEZhbGxiYWNrQ29kZXMiLCJmYWxsYmFja0xuZyIsInNhdmVNaXNzaW5nVG8iLCJ0b1Jlc29sdmVIaWVyYXJjaHkiLCJzZW5kIiwic3BlY2lmaWNEZWZhdWx0VmFsdWUiLCJkZWZhdWx0Rm9yTWlzc2luZyIsIm1pc3NpbmdLZXlIYW5kbGVyIiwiYmFja2VuZENvbm5lY3RvciIsInNhdmVNaXNzaW5nIiwic2F2ZU1pc3NpbmdQbHVyYWxzIiwiZ2V0U3VmZml4ZXMiLCJzdWZmaXgiLCJhcHBlbmROYW1lc3BhY2VUb01pc3NpbmdLZXkiLCJwYXJzZU1pc3NpbmdLZXlIYW5kbGVyIiwiX3RoaXMiLCJwYXJzZSIsImRlZmF1bHRWYXJpYWJsZXMiLCJza2lwSW50ZXJwb2xhdGlvbiIsInNraXBPblZhcmlhYmxlcyIsIm5lc3RCZWYiLCJuYiIsImludGVycG9sYXRlIiwibmEiLCJuZXN0QWZ0IiwibmVzdCIsImNvbnRleHQiLCJyZXNldCIsInBvc3RQcm9jZXNzIiwicG9zdFByb2Nlc3Nvck5hbWVzIiwiYXBwbHlQb3N0UHJvY2Vzc29yIiwicG9zdFByb2Nlc3NQYXNzUmVzb2x2ZWQiLCJpMThuUmVzb2x2ZWQiLCJmb3VuZCIsImV4dHJhY3RlZCIsImZhbGxiYWNrTlMiLCJuZWVkc1plcm9TdWZmaXhMb29rdXAiLCJzaG91bGRVc2VJbnRsQXBpIiwibmVlZHNDb250ZXh0SGFuZGxpbmciLCJjb2RlcyIsInV0aWxzIiwiaGFzTG9hZGVkTmFtZXNwYWNlIiwiZmluYWxLZXlzIiwiYWRkTG9va3VwS2V5cyIsInBsdXJhbFN1ZmZpeCIsInplcm9TdWZmaXgiLCJwbHVyYWxTZXBhcmF0b3IiLCJvcmRpbmFsUHJlZml4IiwiY29udGV4dEtleSIsImNvbnRleHRTZXBhcmF0b3IiLCJwb3NzaWJsZUtleSIsInBvcCIsInJldHVybk51bGwiLCJyZXR1cm5FbXB0eVN0cmluZyIsInJlc291cmNlU3RvcmUiLCJvcHRpb25zS2V5cyIsInVzZU9wdGlvbnNSZXBsYWNlRm9yRGF0YSIsIm9wdGlvbiIsImNhcGl0YWxpemUiLCJzdHJpbmciLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsIkxhbmd1YWdlVXRpbCIsInN1cHBvcnRlZExuZ3MiLCJnZXRTY3JpcHRQYXJ0RnJvbUNvZGUiLCJmb3JtYXRMYW5ndWFnZUNvZGUiLCJnZXRMYW5ndWFnZVBhcnRGcm9tQ29kZSIsInNwZWNpYWxDYXNlcyIsImxvd2VyQ2FzZUxuZyIsInBhcnQiLCJjbGVhbkNvZGUiLCJpc1N1cHBvcnRlZENvZGUiLCJsb2FkIiwibm9uRXhwbGljaXRTdXBwb3J0ZWRMbmdzIiwiZ2V0QmVzdE1hdGNoRnJvbUNvZGVzIiwiY2xlYW5lZExuZyIsImxuZ09ubHkiLCJzdXBwb3J0ZWRMbmciLCJmYWxsYmFja3MiLCJkZWZhdWx0IiwiZmFsbGJhY2tDb2RlIiwiZmFsbGJhY2tDb2RlcyIsImFkZENvZGUiLCJmYyIsInNldHMiLCJuciIsIl9ydWxlc1BsdXJhbHNUeXBlcyIsIk51bWJlciIsIm5vbkludGxWZXJzaW9ucyIsImludGxWZXJzaW9ucyIsInN1ZmZpeGVzT3JkZXIiLCJ6ZXJvIiwib25lIiwidHdvIiwiZmV3IiwibWFueSIsIm90aGVyIiwiY3JlYXRlUnVsZXMiLCJydWxlcyIsInNldCIsIm51bWJlcnMiLCJwbHVyYWxzIiwiUGx1cmFsUmVzb2x2ZXIiLCJjb21wYXRpYmlsaXR5SlNPTiIsImluY2x1ZGVzIiwiSW50bCIsIlBsdXJhbFJ1bGVzIiwiYWRkUnVsZSIsImdldFJ1bGUiLCJlcnIiLCJuZWVkc1BsdXJhbCIsInJ1bGUiLCJyZXNvbHZlZE9wdGlvbnMiLCJwbHVyYWxDYXRlZ29yaWVzIiwiZ2V0UGx1cmFsRm9ybXNPZktleSIsInNvcnQiLCJwbHVyYWxDYXRlZ29yeTEiLCJwbHVyYWxDYXRlZ29yeTIiLCJwbHVyYWxDYXRlZ29yeSIsInByZXBlbmQiLCJudW1iZXIiLCJzZWxlY3QiLCJnZXRTdWZmaXhSZXRyb0NvbXBhdGlibGUiLCJpZHgiLCJub0FicyIsIk1hdGgiLCJhYnMiLCJzaW1wbGlmeVBsdXJhbFN1ZmZpeCIsInJldHVyblN1ZmZpeCIsImRlZXBGaW5kV2l0aERlZmF1bHRzIiwiSW50ZXJwb2xhdG9yIiwiZm9ybWF0IiwiZXNjYXBlVmFsdWUiLCJpT3B0cyIsInVzZVJhd1ZhbHVlVG9Fc2NhcGUiLCJwcmVmaXhFc2NhcGVkIiwic3VmZml4RXNjYXBlZCIsImZvcm1hdFNlcGFyYXRvciIsInVuZXNjYXBlUHJlZml4IiwidW5lc2NhcGVTdWZmaXgiLCJuZXN0aW5nUHJlZml4IiwibmVzdGluZ1ByZWZpeEVzY2FwZWQiLCJuZXN0aW5nU3VmZml4IiwibmVzdGluZ1N1ZmZpeEVzY2FwZWQiLCJuZXN0aW5nT3B0aW9uc1NlcGFyYXRvciIsIm1heFJlcGxhY2VzIiwiYWx3YXlzRm9ybWF0IiwicmVzZXRSZWdFeHAiLCJyZWdleHBTdHIiLCJyZWdleHAiLCJyZWdleHBVbmVzY2FwZVN0ciIsInJlZ2V4cFVuZXNjYXBlIiwibmVzdGluZ1JlZ2V4cFN0ciIsInJlcGxhY2VzIiwicmVnZXhTYWZlIiwidmFsIiwiaGFuZGxlRm9ybWF0IiwiaW50ZXJwb2xhdGlvbmtleSIsInRyaW0iLCJmIiwibWlzc2luZ0ludGVycG9sYXRpb25IYW5kbGVyIiwidG9kb3MiLCJyZWdleCIsInNhZmVWYWx1ZSIsInRvZG8iLCJleGVjIiwibWF0Y2hlZFZhciIsInRlbXAiLCJsYXN0SW5kZXgiLCJjbG9uZWRPcHRpb25zIiwiaGFuZGxlSGFzT3B0aW9ucyIsImluaGVyaXRlZE9wdGlvbnMiLCJzZXAiLCJvcHRpb25zU3RyaW5nIiwibWF0Y2hlZFNpbmdsZVF1b3RlcyIsIm1hdGNoZWREb3VibGVRdW90ZXMiLCJKU09OIiwiZSIsImZvcm1hdHRlcnMiLCJkb1JlZHVjZSIsImVsZW0iLCJyZWR1Y2UiLCJwYXJzZUZvcm1hdFN0ciIsImZvcm1hdFN0ciIsImZvcm1hdE5hbWUiLCJmb3JtYXRPcHRpb25zIiwib3B0U3RyIiwiY3VycmVuY3kiLCJyYW5nZSIsIm9wdHMiLCJvcHQiLCJyZXN0IiwiaXNOYU4iLCJwYXJzZUludCIsImNyZWF0ZUNhY2hlZEZvcm1hdHRlciIsImZuIiwiY2FjaGUiLCJpbnZva2VGb3JtYXR0ZXIiLCJzdHJpbmdpZnkiLCJmb3JtYXR0ZXIiLCJGb3JtYXR0ZXIiLCJmb3JtYXRzIiwiTnVtYmVyRm9ybWF0Iiwic3R5bGUiLCJkYXRldGltZSIsIkRhdGVUaW1lRm9ybWF0IiwicmVsYXRpdmV0aW1lIiwiUmVsYXRpdmVUaW1lRm9ybWF0IiwibGlzdCIsIkxpc3RGb3JtYXQiLCJhZGQiLCJhZGRDYWNoZWQiLCJtZW0iLCJmb3JtYXR0ZWQiLCJ2YWxPcHRpb25zIiwiZm9ybWF0UGFyYW1zIiwibG9jYWxlIiwicmVtb3ZlUGVuZGluZyIsInEiLCJwZW5kaW5nIiwicGVuZGluZ0NvdW50IiwiQ29ubmVjdG9yIiwiYmFja2VuZCIsInN0b3JlIiwid2FpdGluZ1JlYWRzIiwibWF4UGFyYWxsZWxSZWFkcyIsInJlYWRpbmdDYWxscyIsIm1heFJldHJpZXMiLCJyZXRyeVRpbWVvdXQiLCJzdGF0ZSIsInF1ZXVlIiwicXVldWVMb2FkIiwibGFuZ3VhZ2VzIiwiY2FsbGJhY2siLCJ0b0xvYWQiLCJ0b0xvYWRMYW5ndWFnZXMiLCJ0b0xvYWROYW1lc3BhY2VzIiwiaGFzQWxsTmFtZXNwYWNlcyIsInJlbG9hZCIsImxvYWRlZCIsImVycm9ycyIsImRvbmUiLCJsb2FkZWRLZXlzIiwicmVhZCIsImZjTmFtZSIsInRyaWVkIiwid2FpdCIsInJlc29sdmVyIiwibmV4dCIsInNldFRpbWVvdXQiLCJiaW5kIiwidGhlbiIsImNhdGNoIiwicHJlcGFyZUxvYWRpbmciLCJsb2FkT25lIiwiZmFsbGJhY2tWYWx1ZSIsImlzVXBkYXRlIiwiY2xiIiwiZ2V0IiwiaW5pdEltbWVkaWF0ZSIsInByZWxvYWQiLCJwYXJ0aWFsQnVuZGxlZExhbmd1YWdlcyIsInJldCIsInREZXNjcmlwdGlvbiIsInRyYW5zZm9ybU9wdGlvbnMiLCJub29wIiwiYmluZE1lbWJlckZ1bmN0aW9ucyIsImluc3QiLCJtZW1zIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdldFByb3RvdHlwZU9mIiwiSTE4biIsIm1vZHVsZXMiLCJleHRlcm5hbCIsImlzSW5pdGlhbGl6ZWQiLCJpc0Nsb25lIiwiZGVmT3B0cyIsImNyZWF0ZUNsYXNzT25EZW1hbmQiLCJDbGFzc09yT2JqZWN0IiwibHUiLCJsYW5ndWFnZURldGVjdG9yIiwiZGV0ZWN0aW9uIiwic3RvcmVBcGkiLCJzdG9yZUFwaUNoYWluZWQiLCJkZWZlcnJlZCIsImZpbmlzaCIsImluaXRpYWxpemVkU3RvcmVPbmNlIiwibG9hZFJlc291cmNlcyIsInVzZWRDYWxsYmFjayIsImFwcGVuZCIsInJlc29sdmVkTGFuZ3VhZ2UiLCJzZXRSZXNvbHZlZExhbmd1YWdlIiwicmVsb2FkUmVzb3VyY2VzIiwidXNlIiwiRXJyb3IiLCJsaSIsImxuZ0luTG5ncyIsIl90aGlzMiIsImlzTGFuZ3VhZ2VDaGFuZ2luZ1RvIiwic2V0TG5nUHJvcHMiLCJzZXRMbmciLCJjYWNoZVVzZXJMYW5ndWFnZSIsImFzeW5jIiwiZGV0ZWN0IiwiZ2V0Rml4ZWRUIiwia2V5UHJlZml4IiwiX3RoaXMzIiwiZml4ZWRUIiwicmVzdWx0S2V5Iiwic2V0RGVmYXVsdE5hbWVzcGFjZSIsImxhc3RMbmciLCJsb2FkTm90UGVuZGluZyIsImxvYWRTdGF0ZSIsInByZWNoZWNrIiwicHJlUmVzdWx0IiwibG9hZE5hbWVzcGFjZXMiLCJsb2FkTGFuZ3VhZ2VzIiwicHJlbG9hZGVkIiwibmV3TG5ncyIsImRpciIsInJ0bExuZ3MiLCJjcmVhdGVJbnN0YW5jZSIsImNsb25lSW5zdGFuY2UiLCJmb3JrUmVzb3VyY2VTdG9yZSIsIm1lcmdlZE9wdGlvbnMiLCJtZW1iZXJzVG9Db3B5IiwiaW5zdGFuY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/i18next/dist/esm/i18next.js\n");

/***/ })

};
;