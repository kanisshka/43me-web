"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/rifm";
exports.ids = ["vendor-chunks/rifm"];
exports.modules = {

/***/ "(ssr)/./node_modules/rifm/dist/rifm.esm.js":
/*!********************************************!*\
  !*** ./node_modules/rifm/dist/rifm.esm.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Rifm: () => (/* binding */ Rifm),\n/* harmony export */   useRifm: () => (/* binding */ useRifm)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\nconst useRifm = (props)=>{\n    const [, refresh] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useReducer)((c)=>c + 1, 0);\n    const valueRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const { replace, append } = props;\n    const userValue = replace ? replace(props.format(props.value)) : props.format(props.value); // state of delete button see comments below about inputType support\n    const isDeleleteButtonDownRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    const onChange = (evt)=>{\n        if (true) {\n            if (evt.target.type === \"number\") {\n                console.error(\"Rifm does not support input type=number, use type=tel instead.\");\n                return;\n            }\n            if (evt.target.type === \"date\") {\n                console.error(\"Rifm does not support input type=date.\");\n                return;\n            }\n        }\n        const eventValue = evt.target.value;\n        valueRef.current = [\n            eventValue,\n            evt.target,\n            eventValue.length > userValue.length,\n            isDeleleteButtonDownRef.current,\n            userValue === props.format(eventValue) // isNoOperation\n        ];\n        if (true) {\n            const formattedEventValue = props.format(eventValue);\n            if (eventValue !== formattedEventValue && eventValue.toLowerCase() === formattedEventValue.toLowerCase()) {\n                console.warn(\"Case enforcement does not work with format. Please use replace={value => value.toLowerCase()} instead\");\n            }\n        } // The main trick is to update underlying input with non formatted value (= eventValue)\n        // that allows us to calculate right cursor position after formatting (see getCursorPosition)\n        // then we format new value and call props.onChange with masked/formatted value\n        // and finally we are able to set cursor position into right place\n        refresh();\n    }; // React prints warn on server in non production mode about useLayoutEffect usage\n    // in both cases it's noop\n    if (false) {}\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        // until https://developer.mozilla.org/en-US/docs/Web/API/InputEvent/inputType will be supported\n        // by all major browsers (now supported by: +chrome, +safari, ?edge, !firefox)\n        // there is no way I found to distinguish in onChange\n        // backspace or delete was called in some situations\n        // firefox track https://bugzilla.mozilla.org/show_bug.cgi?id=1447239\n        const handleKeyDown = (evt)=>{\n            if (evt.code === \"Delete\") {\n                isDeleleteButtonDownRef.current = true;\n            }\n        };\n        const handleKeyUp = (evt)=>{\n            if (evt.code === \"Delete\") {\n                isDeleleteButtonDownRef.current = false;\n            }\n        };\n        document.addEventListener(\"keydown\", handleKeyDown);\n        document.addEventListener(\"keyup\", handleKeyUp);\n        return ()=>{\n            document.removeEventListener(\"keydown\", handleKeyDown);\n            document.removeEventListener(\"keyup\", handleKeyUp);\n        };\n    }, []);\n    return {\n        value: valueRef.current != null ? valueRef.current[0] : userValue,\n        onChange\n    };\n};\nconst Rifm = (props)=>{\n    const renderProps = useRifm(props);\n    return props.children(renderProps);\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/rifm/dist/rifm.esm.js\n");

/***/ })

};
;